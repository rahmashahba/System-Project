
Motor_Dashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  000039bc  00003a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003030  00000000  00000000  00003ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f65  00000000  00000000  00006b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00007a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00007bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00007d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009966  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a851  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000b600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c1bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 00 18 	call	0x3000	; 0x3000 <main>
      7a:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 ed       	ldi	r26, 0xD8	; 216
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 ed       	ldi	r24, 0xD8	; 216
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <voidSetHalfDataPort>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"

#if CLCD_u8BIT_MODE == FOUR_BIT
static void voidSetHalfDataPort(uint8 Copy_u8Data)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D4_PIN, GET_BIT(Copy_u8Data,0));
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	98 2f       	mov	r25, r24
     b46:	91 70       	andi	r25, 0x01	; 1
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	63 e0       	ldi	r22, 0x03	; 3
     b4c:	49 2f       	mov	r20, r25
     b4e:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D5_PIN, GET_BIT(Copy_u8Data,1));
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	86 95       	lsr	r24
     b56:	98 2f       	mov	r25, r24
     b58:	91 70       	andi	r25, 0x01	; 1
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	64 e0       	ldi	r22, 0x04	; 4
     b5e:	49 2f       	mov	r20, r25
     b60:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D6_PIN, GET_BIT(Copy_u8Data,2));
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	86 95       	lsr	r24
     b68:	86 95       	lsr	r24
     b6a:	98 2f       	mov	r25, r24
     b6c:	91 70       	andi	r25, 0x01	; 1
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	65 e0       	ldi	r22, 0x05	; 5
     b72:	49 2f       	mov	r20, r25
     b74:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D7_PIN, GET_BIT(Copy_u8Data,3));
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	86 95       	lsr	r24
     b7c:	86 95       	lsr	r24
     b7e:	86 95       	lsr	r24
     b80:	98 2f       	mov	r25, r24
     b82:	91 70       	andi	r25, 0x01	; 1
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	66 e0       	ldi	r22, 0x06	; 6
     b88:	49 2f       	mov	r20, r25
     b8a:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
}
     b8e:	0f 90       	pop	r0
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <voidSendEnablePulse>:
#endif

static void voidSendEnablePulse(void)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	2e 97       	sbiw	r28, 0x0e	; 14
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN, DIO_u8PIN_HIGH);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	b0 e4       	ldi	r27, 0x40	; 64
     bbc:	8b 87       	std	Y+11, r24	; 0x0b
     bbe:	9c 87       	std	Y+12, r25	; 0x0c
     bc0:	ad 87       	std	Y+13, r26	; 0x0d
     bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bca:	9e 85       	ldd	r25, Y+14	; 0x0e
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	4a e7       	ldi	r20, 0x7A	; 122
     bd2:	55 e4       	ldi	r21, 0x45	; 69
     bd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	8f 83       	std	Y+7, r24	; 0x07
     bde:	98 87       	std	Y+8, r25	; 0x08
     be0:	a9 87       	std	Y+9, r26	; 0x09
     be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     be4:	6f 81       	ldd	r22, Y+7	; 0x07
     be6:	78 85       	ldd	r23, Y+8	; 0x08
     be8:	89 85       	ldd	r24, Y+9	; 0x09
     bea:	9a 85       	ldd	r25, Y+10	; 0x0a
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e8       	ldi	r20, 0x80	; 128
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bf8:	88 23       	and	r24, r24
     bfa:	2c f4       	brge	.+10     	; 0xc06 <voidSendEnablePulse+0x70>
		__ticks = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	3f c0       	rjmp	.+126    	; 0xc84 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     c06:	6f 81       	ldd	r22, Y+7	; 0x07
     c08:	78 85       	ldd	r23, Y+8	; 0x08
     c0a:	89 85       	ldd	r24, Y+9	; 0x09
     c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	3f ef       	ldi	r19, 0xFF	; 255
     c12:	4f e7       	ldi	r20, 0x7F	; 127
     c14:	57 e4       	ldi	r21, 0x47	; 71
     c16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c1a:	18 16       	cp	r1, r24
     c1c:	4c f5       	brge	.+82     	; 0xc70 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c20:	7c 85       	ldd	r23, Y+12	; 0x0c
     c22:	8d 85       	ldd	r24, Y+13	; 0x0d
     c24:	9e 85       	ldd	r25, Y+14	; 0x0e
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9e 83       	std	Y+6, r25	; 0x06
     c44:	8d 83       	std	Y+5, r24	; 0x05
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <voidSendEnablePulse+0xd0>
     c48:	80 e9       	ldi	r24, 0x90	; 144
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <voidSendEnablePulse+0xbe>
     c58:	9c 83       	std	Y+4, r25	; 0x04
     c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	69 f7       	brne	.-38     	; 0xc48 <voidSendEnablePulse+0xb2>
     c6e:	14 c0       	rjmp	.+40     	; 0xc98 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c70:	6f 81       	ldd	r22, Y+7	; 0x07
     c72:	78 85       	ldd	r23, Y+8	; 0x08
     c74:	89 85       	ldd	r24, Y+9	; 0x09
     c76:	9a 85       	ldd	r25, Y+10	; 0x0a
     c78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	9e 83       	std	Y+6, r25	; 0x06
     c82:	8d 83       	std	Y+5, r24	; 0x05
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <voidSendEnablePulse+0xfa>
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN, DIO_u8PIN_LOW);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	62 e0       	ldi	r22, 0x02	; 2
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
}
     ca2:	2e 96       	adiw	r28, 0x0e	; 14
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_LOW);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Cmd);
	voidSendEnablePulse();

#elif CLCD_u8BIT_MODE == FOUR_BIT
	/*Send the 4 Most significant bits of the command first*/
	voidSetHalfDataPort(Copy_u8Cmd >> 4);
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	82 95       	swap	r24
     cce:	8f 70       	andi	r24, 0x0F	; 15
     cd0:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse();
     cd4:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Cmd);
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse();
     cde:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>

#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif

}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	0f 92       	push	r0
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_HIGH);
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Data);
	voidSendEnablePulse();

#elif CLCD_u8BIT_MODE == FOUR_BIT
	/*Send the 4 Most significant bits of the data first*/
	voidSetHalfDataPort(Copy_u8Data >> 4);
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	82 95       	swap	r24
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d0a:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Data);
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d14:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>

#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif
}
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	2e 97       	sbiw	r28, 0x0e	; 14
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	a0 e2       	ldi	r26, 0x20	; 32
     d3a:	b2 e4       	ldi	r27, 0x42	; 66
     d3c:	8b 87       	std	Y+11, r24	; 0x0b
     d3e:	9c 87       	std	Y+12, r25	; 0x0c
     d40:	ad 87       	std	Y+13, r26	; 0x0d
     d42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d44:	6b 85       	ldd	r22, Y+11	; 0x0b
     d46:	7c 85       	ldd	r23, Y+12	; 0x0c
     d48:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	4a e7       	ldi	r20, 0x7A	; 122
     d52:	55 e4       	ldi	r21, 0x45	; 69
     d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	8f 83       	std	Y+7, r24	; 0x07
     d5e:	98 87       	std	Y+8, r25	; 0x08
     d60:	a9 87       	std	Y+9, r26	; 0x09
     d62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d64:	6f 81       	ldd	r22, Y+7	; 0x07
     d66:	78 85       	ldd	r23, Y+8	; 0x08
     d68:	89 85       	ldd	r24, Y+9	; 0x09
     d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	5f e3       	ldi	r21, 0x3F	; 63
     d74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d78:	88 23       	and	r24, r24
     d7a:	2c f4       	brge	.+10     	; 0xd86 <CLCD_voidInit+0x66>
		__ticks = 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	9e 83       	std	Y+6, r25	; 0x06
     d82:	8d 83       	std	Y+5, r24	; 0x05
     d84:	3f c0       	rjmp	.+126    	; 0xe04 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d86:	6f 81       	ldd	r22, Y+7	; 0x07
     d88:	78 85       	ldd	r23, Y+8	; 0x08
     d8a:	89 85       	ldd	r24, Y+9	; 0x09
     d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	3f ef       	ldi	r19, 0xFF	; 255
     d92:	4f e7       	ldi	r20, 0x7F	; 127
     d94:	57 e4       	ldi	r21, 0x47	; 71
     d96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d9a:	18 16       	cp	r1, r24
     d9c:	4c f5       	brge	.+82     	; 0xdf0 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     da0:	7c 85       	ldd	r23, Y+12	; 0x0c
     da2:	8d 85       	ldd	r24, Y+13	; 0x0d
     da4:	9e 85       	ldd	r25, Y+14	; 0x0e
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e2       	ldi	r20, 0x20	; 32
     dac:	51 e4       	ldi	r21, 0x41	; 65
     dae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	bc 01       	movw	r22, r24
     db8:	cd 01       	movw	r24, r26
     dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	9e 83       	std	Y+6, r25	; 0x06
     dc4:	8d 83       	std	Y+5, r24	; 0x05
     dc6:	0f c0       	rjmp	.+30     	; 0xde6 <CLCD_voidInit+0xc6>
     dc8:	80 e9       	ldi	r24, 0x90	; 144
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	8b 83       	std	Y+3, r24	; 0x03
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <CLCD_voidInit+0xb4>
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	69 f7       	brne	.-38     	; 0xdc8 <CLCD_voidInit+0xa8>
     dee:	14 c0       	rjmp	.+40     	; 0xe18 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df0:	6f 81       	ldd	r22, Y+7	; 0x07
     df2:	78 85       	ldd	r23, Y+8	; 0x08
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	9e 81       	ldd	r25, Y+6	; 0x06
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <CLCD_voidInit+0xf0>
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, Font size: 5x7*/
#if CLCD_u8BIT_MODE == EIGHT_BIT
	CLCD_voidSendCmd(0b00111000);

#elif  CLCD_u8BIT_MODE == FOUR_BIT
	voidSetHalfDataPort(0b0010);
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e1e:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
	voidSetHalfDataPort(0b0010);
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e28:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
	voidSetHalfDataPort(0b1000);
     e2c:	88 e0       	ldi	r24, 0x08	; 8
     e2e:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e32:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>

#endif

	/*Display on off control : Display on, cursor off, blink cursor off*/
	CLCD_voidSendCmd(0b00001100);
     e36:	8c e0       	ldi	r24, 0x0C	; 12
     e38:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

	/*Clear display*/
	CLCD_voidSendCmd(1);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

}
     e42:	2e 96       	adiw	r28, 0x0e	; 14
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_pchString)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <CLCD_u8SendString+0x6>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <CLCD_u8SendString+0x8>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	9c 83       	std	Y+4, r25	; 0x04
     e62:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
     e64:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pchString != NULL)
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	e1 f0       	breq	.+56     	; 0xea6 <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Iterator=0u;
     e6e:	19 82       	std	Y+1, r1	; 0x01
     e70:	0e c0       	rjmp	.+28     	; 0xe8e <CLCD_u8SendString+0x3a>
		while(Copy_pchString[Local_u8Iterator] != '\0')
		{
			CLCD_voidSendData(Copy_pchString[Local_u8Iterator]);
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	fc 01       	movw	r30, r24
     e7e:	e2 0f       	add	r30, r18
     e80:	f3 1f       	adc	r31, r19
     e82:	80 81       	ld	r24, Z
     e84:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
			Local_u8Iterator++;
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState = OK;
	if(Copy_pchString != NULL)
	{
		uint8 Local_u8Iterator=0u;
		while(Copy_pchString[Local_u8Iterator] != '\0')
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	fc 01       	movw	r30, r24
     e9a:	e2 0f       	add	r30, r18
     e9c:	f3 1f       	adc	r31, r19
     e9e:	80 81       	ld	r24, Z
     ea0:	88 23       	and	r24, r24
     ea2:	39 f7       	brne	.-50     	; 0xe72 <CLCD_u8SendString+0x1e>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <CLCD_u8SendString+0x56>
			Local_u8Iterator++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	61 97       	sbiw	r28, 0x11	; 17
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	6e 87       	std	Y+14, r22	; 0x0e
     ed0:	7f 87       	std	Y+15, r23	; 0x0f
     ed2:	88 8b       	std	Y+16, r24	; 0x10
     ed4:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chNumber[10];
	uint8 Local_u8RightDigit, Local_u8Counter1=0u;
     ed6:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_s8Counter2;

	if(Copy_s32Number ==0)
     ed8:	8e 85       	ldd	r24, Y+14	; 0x0e
     eda:	9f 85       	ldd	r25, Y+15	; 0x0f
     edc:	a8 89       	ldd	r26, Y+16	; 0x10
     ede:	b9 89       	ldd	r27, Y+17	; 0x11
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	a1 05       	cpc	r26, r1
     ee4:	b1 05       	cpc	r27, r1
     ee6:	21 f4       	brne	.+8      	; 0xef0 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData('0');
     ee8:	80 e3       	ldi	r24, 0x30	; 48
     eea:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
     eee:	67 c0       	rjmp	.+206    	; 0xfbe <CLCD_voidSendNumber+0x104>
		return ;
	}
	else if(Copy_s32Number < 0)
     ef0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ef2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ef4:	a8 89       	ldd	r26, Y+16	; 0x10
     ef6:	b9 89       	ldd	r27, Y+17	; 0x11
     ef8:	bb 23       	and	r27, r27
     efa:	0c f0       	brlt	.+2      	; 0xefe <CLCD_voidSendNumber+0x44>
     efc:	43 c0       	rjmp	.+134    	; 0xf84 <CLCD_voidSendNumber+0xca>
	{
		/*Number is -ve, make it positive, print -ve sign on the CLCD*/
		Copy_s32Number *= -1;
     efe:	8e 85       	ldd	r24, Y+14	; 0x0e
     f00:	9f 85       	ldd	r25, Y+15	; 0x0f
     f02:	a8 89       	ldd	r26, Y+16	; 0x10
     f04:	b9 89       	ldd	r27, Y+17	; 0x11
     f06:	b0 95       	com	r27
     f08:	a0 95       	com	r26
     f0a:	90 95       	com	r25
     f0c:	81 95       	neg	r24
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	af 4f       	sbci	r26, 0xFF	; 255
     f12:	bf 4f       	sbci	r27, 0xFF	; 255
     f14:	8e 87       	std	Y+14, r24	; 0x0e
     f16:	9f 87       	std	Y+15, r25	; 0x0f
     f18:	a8 8b       	std	Y+16, r26	; 0x10
     f1a:	b9 8b       	std	Y+17, r27	; 0x11

		CLCD_voidSendData('-');
     f1c:	8d e2       	ldi	r24, 0x2D	; 45
     f1e:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
     f22:	30 c0       	rjmp	.+96     	; 0xf84 <CLCD_voidSendNumber+0xca>
	}

	while(Copy_s32Number != 0)
	{
		Local_u8RightDigit = (uint8)((uint32)Copy_s32Number % 10); /*Get the right most digit*/
     f24:	8e 85       	ldd	r24, Y+14	; 0x0e
     f26:	9f 85       	ldd	r25, Y+15	; 0x0f
     f28:	a8 89       	ldd	r26, Y+16	; 0x10
     f2a:	b9 89       	ldd	r27, Y+17	; 0x11
     f2c:	2a e0       	ldi	r18, 0x0A	; 10
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__udivmodsi4>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	8b 83       	std	Y+3, r24	; 0x03

		Copy_s32Number /= 10;	/*remove the right most digit*/
     f42:	8e 85       	ldd	r24, Y+14	; 0x0e
     f44:	9f 85       	ldd	r25, Y+15	; 0x0f
     f46:	a8 89       	ldd	r26, Y+16	; 0x10
     f48:	b9 89       	ldd	r27, Y+17	; 0x11
     f4a:	2a e0       	ldi	r18, 0x0A	; 10
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__divmodsi4>
     f5a:	da 01       	movw	r26, r20
     f5c:	c9 01       	movw	r24, r18
     f5e:	8e 87       	std	Y+14, r24	; 0x0e
     f60:	9f 87       	std	Y+15, r25	; 0x0f
     f62:	a8 8b       	std	Y+16, r26	; 0x10
     f64:	b9 8b       	std	Y+17, r27	; 0x11

		Local_chNumber[Local_u8Counter1] = Local_u8RightDigit + '0'; /*Convert to to ASCII*/
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	48 2f       	mov	r20, r24
     f70:	40 5d       	subi	r20, 0xD0	; 208
     f72:	ce 01       	movw	r24, r28
     f74:	04 96       	adiw	r24, 0x04	; 4
     f76:	fc 01       	movw	r30, r24
     f78:	e2 0f       	add	r30, r18
     f7a:	f3 1f       	adc	r31, r19
     f7c:	40 83       	st	Z, r20

		Local_u8Counter1++;
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number *= -1;

		CLCD_voidSendData('-');
	}

	while(Copy_s32Number != 0)
     f84:	8e 85       	ldd	r24, Y+14	; 0x0e
     f86:	9f 85       	ldd	r25, Y+15	; 0x0f
     f88:	a8 89       	ldd	r26, Y+16	; 0x10
     f8a:	b9 89       	ldd	r27, Y+17	; 0x11
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	a1 05       	cpc	r26, r1
     f90:	b1 05       	cpc	r27, r1
     f92:	41 f6       	brne	.-112    	; 0xf24 <CLCD_voidSendNumber+0x6a>
		Local_chNumber[Local_u8Counter1] = Local_u8RightDigit + '0'; /*Convert to to ASCII*/

		Local_u8Counter1++;
	}

	for(Local_s8Counter2 = (sint8)Local_u8Counter1 -1 ; Local_s8Counter2 >= 0 ; Local_s8Counter2--)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	81 50       	subi	r24, 0x01	; 1
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	0e c0       	rjmp	.+28     	; 0xfb8 <CLCD_voidSendNumber+0xfe>
	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	ce 01       	movw	r24, r28
     fa4:	04 96       	adiw	r24, 0x04	; 4
     fa6:	fc 01       	movw	r30, r24
     fa8:	e2 0f       	add	r30, r18
     faa:	f3 1f       	adc	r31, r19
     fac:	80 81       	ld	r24, Z
     fae:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
		Local_chNumber[Local_u8Counter1] = Local_u8RightDigit + '0'; /*Convert to to ASCII*/

		Local_u8Counter1++;
	}

	for(Local_s8Counter2 = (sint8)Local_u8Counter1 -1 ; Local_s8Counter2 >= 0 ; Local_s8Counter2--)
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	81 50       	subi	r24, 0x01	; 1
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	88 23       	and	r24, r24
     fbc:	7c f7       	brge	.-34     	; 0xf9c <CLCD_voidSendNumber+0xe2>
	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
	}

}
     fbe:	61 96       	adiw	r28, 0x11	; 17
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <CLCD_voidGoToXY+0x6>
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	8a 83       	std	Y+2, r24	; 0x02
     fde:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Address ;
	if(Copy_u8YPos == 0u)
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	88 23       	and	r24, r24
     fe4:	19 f4       	brne	.+6      	; 0xfec <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8XPos;
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	06 c0       	rjmp	.+12     	; 0xff8 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8YPos == 1u)
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	19 f4       	brne	.+6      	; 0xff8 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = 0x40 + Copy_u8XPos;
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	80 5c       	subi	r24, 0xC0	; 192
     ff6:	89 83       	std	Y+1, r24	; 0x01
	}
	// Local_u8Address = 0x40 * Copy_u8YPos + Copy_u8XPos;

	/*Set bit 7 for SetDDRAM Address command*/
	SET_BIT(Local_u8Address,7);
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	80 68       	ori	r24, 0x80	; 128
     ffc:	89 83       	std	Y+1, r24	; 0x01

	/*Execute Set DDRAM Address command*/
	CLCD_voidSendCmd(Local_u8Address);
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <CLCD_u8SendSpecialCharacter>:

uint8 CLCD_u8SendSpecialCharacter(uint8 Copy_u8LocationNum, uint8* Copy_pu8Pattern, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	28 97       	sbiw	r28, 0x08	; 8
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	8c 83       	std	Y+4, r24	; 0x04
    1026:	7e 83       	std	Y+6, r23	; 0x06
    1028:	6d 83       	std	Y+5, r22	; 0x05
    102a:	4f 83       	std	Y+7, r20	; 0x07
    102c:	28 87       	std	Y+8, r18	; 0x08
	uint8 Local_u8ErrorState = OK;
    102e:	1b 82       	std	Y+3, r1	; 0x03

	if(Copy_pu8Pattern != NULL)
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	59 f1       	breq	.+86     	; 0x108e <CLCD_u8SendSpecialCharacter+0x7e>
	{
		uint8 Local_u8Counter;

		uint8 Local_u8CGRAMAddress = Copy_u8LocationNum * 8;
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	89 83       	std	Y+1, r24	; 0x01

		/*Set bit 6 for CGRAM Address command*/
		SET_BIT(Local_u8CGRAMAddress , 6u);
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	80 64       	ori	r24, 0x40	; 64
    1050:	89 83       	std	Y+1, r24	; 0x01

		/*Set ACGRAM Address*/
		CLCD_voidSendCmd(Local_u8CGRAMAddress);
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

		/*Write the input pattern inside CGRAM*/
		for(Local_u8Counter=0u; Local_u8Counter<8u; Local_u8Counter++)
    1058:	1a 82       	std	Y+2, r1	; 0x02
    105a:	0e c0       	rjmp	.+28     	; 0x1078 <CLCD_u8SendSpecialCharacter+0x68>
		{
			CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	fc 01       	movw	r30, r24
    1068:	e2 0f       	add	r30, r18
    106a:	f3 1f       	adc	r31, r19
    106c:	80 81       	ld	r24, Z
    106e:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>

		/*Set ACGRAM Address*/
		CLCD_voidSendCmd(Local_u8CGRAMAddress);

		/*Write the input pattern inside CGRAM*/
		for(Local_u8Counter=0u; Local_u8Counter<8u; Local_u8Counter++)
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	8a 83       	std	Y+2, r24	; 0x02
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	88 30       	cpi	r24, 0x08	; 8
    107c:	78 f3       	brcs	.-34     	; 0x105c <CLCD_u8SendSpecialCharacter+0x4c>
		{
			CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
		}

		/*Go back to DDRAM*/
		CLCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	68 85       	ldd	r22, Y+8	; 0x08
    1082:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidGoToXY>

		/*Display the special pattern inside CGRAM*/
		CLCD_voidSendData(Copy_u8LocationNum);
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <CLCD_u8SendSpecialCharacter+0x82>

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_u8ErrorState;
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1094:	28 96       	adiw	r28, 0x08	; 8
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <DcMotor_CW>:
#include "DIO_interface.h"
#include "DCMotor_interface.h"
#include "DCMotor_cfg.h"
#include <util/delay.h>
void DcMotor_CW()
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	2e 97       	sbiw	r28, 0x0e	; 14
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCmd(1);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	63 e0       	ldi	r22, 0x03	; 3
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a0 ea       	ldi	r26, 0xA0	; 160
    10d2:	b1 e4       	ldi	r27, 0x41	; 65
    10d4:	8b 87       	std	Y+11, r24	; 0x0b
    10d6:	9c 87       	std	Y+12, r25	; 0x0c
    10d8:	ad 87       	std	Y+13, r26	; 0x0d
    10da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10de:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	4a e7       	ldi	r20, 0x7A	; 122
    10ea:	55 e4       	ldi	r21, 0x45	; 69
    10ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	8f 83       	std	Y+7, r24	; 0x07
    10f6:	98 87       	std	Y+8, r25	; 0x08
    10f8:	a9 87       	std	Y+9, r26	; 0x09
    10fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10fc:	6f 81       	ldd	r22, Y+7	; 0x07
    10fe:	78 85       	ldd	r23, Y+8	; 0x08
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e8       	ldi	r20, 0x80	; 128
    110a:	5f e3       	ldi	r21, 0x3F	; 63
    110c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1110:	88 23       	and	r24, r24
    1112:	2c f4       	brge	.+10     	; 0x111e <DcMotor_CW+0x78>
		__ticks = 1;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9e 83       	std	Y+6, r25	; 0x06
    111a:	8d 83       	std	Y+5, r24	; 0x05
    111c:	3f c0       	rjmp	.+126    	; 0x119c <DcMotor_CW+0xf6>
	else if (__tmp > 65535)
    111e:	6f 81       	ldd	r22, Y+7	; 0x07
    1120:	78 85       	ldd	r23, Y+8	; 0x08
    1122:	89 85       	ldd	r24, Y+9	; 0x09
    1124:	9a 85       	ldd	r25, Y+10	; 0x0a
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	3f ef       	ldi	r19, 0xFF	; 255
    112a:	4f e7       	ldi	r20, 0x7F	; 127
    112c:	57 e4       	ldi	r21, 0x47	; 71
    112e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1132:	18 16       	cp	r1, r24
    1134:	4c f5       	brge	.+82     	; 0x1188 <DcMotor_CW+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1136:	6b 85       	ldd	r22, Y+11	; 0x0b
    1138:	7c 85       	ldd	r23, Y+12	; 0x0c
    113a:	8d 85       	ldd	r24, Y+13	; 0x0d
    113c:	9e 85       	ldd	r25, Y+14	; 0x0e
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e2       	ldi	r20, 0x20	; 32
    1144:	51 e4       	ldi	r21, 0x41	; 65
    1146:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	9e 83       	std	Y+6, r25	; 0x06
    115c:	8d 83       	std	Y+5, r24	; 0x05
    115e:	0f c0       	rjmp	.+30     	; 0x117e <DcMotor_CW+0xd8>
    1160:	80 e9       	ldi	r24, 0x90	; 144
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	9c 83       	std	Y+4, r25	; 0x04
    1166:	8b 83       	std	Y+3, r24	; 0x03
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <DcMotor_CW+0xc6>
    1170:	9c 83       	std	Y+4, r25	; 0x04
    1172:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	9e 81       	ldd	r25, Y+6	; 0x06
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	69 f7       	brne	.-38     	; 0x1160 <DcMotor_CW+0xba>
    1186:	14 c0       	rjmp	.+40     	; 0x11b0 <DcMotor_CW+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	9e 83       	std	Y+6, r25	; 0x06
    119a:	8d 83       	std	Y+5, r24	; 0x05
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <DcMotor_CW+0x102>
    11ac:	9a 83       	std	Y+2, r25	; 0x02
    11ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_HIGH);
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	64 e0       	ldi	r22, 0x04	; 4
    11b4:	41 e0       	ldi	r20, 0x01	; 1
    11b6:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>

}
    11ba:	2e 96       	adiw	r28, 0x0e	; 14
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <DcMotor_CCW>:
void DcMotor_CCW()
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	2e 97       	sbiw	r28, 0x0e	; 14
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCmd(1);
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_LOW);
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	64 e0       	ldi	r22, 0x04	; 4
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a0 ea       	ldi	r26, 0xA0	; 160
    11f8:	b1 e4       	ldi	r27, 0x41	; 65
    11fa:	8b 87       	std	Y+11, r24	; 0x0b
    11fc:	9c 87       	std	Y+12, r25	; 0x0c
    11fe:	ad 87       	std	Y+13, r26	; 0x0d
    1200:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1202:	6b 85       	ldd	r22, Y+11	; 0x0b
    1204:	7c 85       	ldd	r23, Y+12	; 0x0c
    1206:	8d 85       	ldd	r24, Y+13	; 0x0d
    1208:	9e 85       	ldd	r25, Y+14	; 0x0e
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	4a e7       	ldi	r20, 0x7A	; 122
    1210:	55 e4       	ldi	r21, 0x45	; 69
    1212:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	8f 83       	std	Y+7, r24	; 0x07
    121c:	98 87       	std	Y+8, r25	; 0x08
    121e:	a9 87       	std	Y+9, r26	; 0x09
    1220:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1222:	6f 81       	ldd	r22, Y+7	; 0x07
    1224:	78 85       	ldd	r23, Y+8	; 0x08
    1226:	89 85       	ldd	r24, Y+9	; 0x09
    1228:	9a 85       	ldd	r25, Y+10	; 0x0a
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e8       	ldi	r20, 0x80	; 128
    1230:	5f e3       	ldi	r21, 0x3F	; 63
    1232:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1236:	88 23       	and	r24, r24
    1238:	2c f4       	brge	.+10     	; 0x1244 <DcMotor_CCW+0x78>
		__ticks = 1;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9e 83       	std	Y+6, r25	; 0x06
    1240:	8d 83       	std	Y+5, r24	; 0x05
    1242:	3f c0       	rjmp	.+126    	; 0x12c2 <DcMotor_CCW+0xf6>
	else if (__tmp > 65535)
    1244:	6f 81       	ldd	r22, Y+7	; 0x07
    1246:	78 85       	ldd	r23, Y+8	; 0x08
    1248:	89 85       	ldd	r24, Y+9	; 0x09
    124a:	9a 85       	ldd	r25, Y+10	; 0x0a
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	3f ef       	ldi	r19, 0xFF	; 255
    1250:	4f e7       	ldi	r20, 0x7F	; 127
    1252:	57 e4       	ldi	r21, 0x47	; 71
    1254:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1258:	18 16       	cp	r1, r24
    125a:	4c f5       	brge	.+82     	; 0x12ae <DcMotor_CCW+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125c:	6b 85       	ldd	r22, Y+11	; 0x0b
    125e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1260:	8d 85       	ldd	r24, Y+13	; 0x0d
    1262:	9e 85       	ldd	r25, Y+14	; 0x0e
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e2       	ldi	r20, 0x20	; 32
    126a:	51 e4       	ldi	r21, 0x41	; 65
    126c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	bc 01       	movw	r22, r24
    1276:	cd 01       	movw	r24, r26
    1278:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	9e 83       	std	Y+6, r25	; 0x06
    1282:	8d 83       	std	Y+5, r24	; 0x05
    1284:	0f c0       	rjmp	.+30     	; 0x12a4 <DcMotor_CCW+0xd8>
    1286:	80 e9       	ldi	r24, 0x90	; 144
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	9c 83       	std	Y+4, r25	; 0x04
    128c:	8b 83       	std	Y+3, r24	; 0x03
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <DcMotor_CCW+0xc6>
    1296:	9c 83       	std	Y+4, r25	; 0x04
    1298:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	69 f7       	brne	.-38     	; 0x1286 <DcMotor_CCW+0xba>
    12ac:	14 c0       	rjmp	.+40     	; 0x12d6 <DcMotor_CCW+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <DcMotor_CCW+0x102>
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	63 e0       	ldi	r22, 0x03	; 3
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_HIGH);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	63 e0       	ldi	r22, 0x03	; 3
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
}
    12ea:	2e 96       	adiw	r28, 0x0e	; 14
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <DcMotor_Stop>:
void DcMotor_Stop()
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(1);
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	63 e0       	ldi	r22, 0x03	; 3
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_LOW);
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	64 e0       	ldi	r22, 0x04	; 4
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <DIO_u8SetPinDirection>:
#include "DIO_prv.h"
#include "DIO_cfg.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction )
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	28 97       	sbiw	r28, 0x08	; 8
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	8a 83       	std	Y+2, r24	; 0x02
    133c:	6b 83       	std	Y+3, r22	; 0x03
    133e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1340:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 30       	cpi	r24, 0x08	; 8
    1346:	08 f0       	brcs	.+2      	; 0x134a <DIO_u8SetPinDirection+0x24>
    1348:	f4 c0       	rjmp	.+488    	; 0x1532 <DIO_u8SetPinDirection+0x20c>
	{

		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	88 23       	and	r24, r24
    134e:	09 f0       	breq	.+2      	; 0x1352 <DIO_u8SetPinDirection+0x2c>
    1350:	77 c0       	rjmp	.+238    	; 0x1440 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	38 87       	std	Y+8, r19	; 0x08
    135a:	2f 83       	std	Y+7, r18	; 0x07
    135c:	8f 81       	ldd	r24, Y+7	; 0x07
    135e:	98 85       	ldd	r25, Y+8	; 0x08
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	59 f1       	breq	.+86     	; 0x13bc <DIO_u8SetPinDirection+0x96>
    1366:	2f 81       	ldd	r18, Y+7	; 0x07
    1368:	38 85       	ldd	r19, Y+8	; 0x08
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	2c f4       	brge	.+10     	; 0x137a <DIO_u8SetPinDirection+0x54>
    1370:	8f 81       	ldd	r24, Y+7	; 0x07
    1372:	98 85       	ldd	r25, Y+8	; 0x08
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	69 f0       	breq	.+26     	; 0x1392 <DIO_u8SetPinDirection+0x6c>
    1378:	60 c0       	rjmp	.+192    	; 0x143a <DIO_u8SetPinDirection+0x114>
    137a:	2f 81       	ldd	r18, Y+7	; 0x07
    137c:	38 85       	ldd	r19, Y+8	; 0x08
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	89 f1       	breq	.+98     	; 0x13e6 <DIO_u8SetPinDirection+0xc0>
    1384:	8f 81       	ldd	r24, Y+7	; 0x07
    1386:	98 85       	ldd	r25, Y+8	; 0x08
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	91 05       	cpc	r25, r1
    138c:	09 f4       	brne	.+2      	; 0x1390 <DIO_u8SetPinDirection+0x6a>
    138e:	40 c0       	rjmp	.+128    	; 0x1410 <DIO_u8SetPinDirection+0xea>
    1390:	54 c0       	rjmp	.+168    	; 0x143a <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    1392:	aa e3       	ldi	r26, 0x3A	; 58
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	ea e3       	ldi	r30, 0x3A	; 58
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_u8SetPinDirection+0x8a>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_u8SetPinDirection+0x86>
    13b4:	80 95       	com	r24
    13b6:	84 23       	and	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	bd c0       	rjmp	.+378    	; 0x1536 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    13bc:	a7 e3       	ldi	r26, 0x37	; 55
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e7 e3       	ldi	r30, 0x37	; 55
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_u8SetPinDirection+0xb4>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_u8SetPinDirection+0xb0>
    13de:	80 95       	com	r24
    13e0:	84 23       	and	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	a8 c0       	rjmp	.+336    	; 0x1536 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    13e6:	a4 e3       	ldi	r26, 0x34	; 52
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e4 e3       	ldi	r30, 0x34	; 52
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_u8SetPinDirection+0xde>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_u8SetPinDirection+0xda>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	93 c0       	rjmp	.+294    	; 0x1536 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    1410:	a1 e3       	ldi	r26, 0x31	; 49
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e1 e3       	ldi	r30, 0x31	; 49
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_u8SetPinDirection+0x108>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_u8SetPinDirection+0x104>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	7e c0       	rjmp	.+252    	; 0x1536 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	7b c0       	rjmp	.+246    	; 0x1536 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	09 f0       	breq	.+2      	; 0x1448 <DIO_u8SetPinDirection+0x122>
    1446:	72 c0       	rjmp	.+228    	; 0x152c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3e 83       	std	Y+6, r19	; 0x06
    1450:	2d 83       	std	Y+5, r18	; 0x05
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	91 05       	cpc	r25, r1
    145a:	49 f1       	breq	.+82     	; 0x14ae <DIO_u8SetPinDirection+0x188>
    145c:	2d 81       	ldd	r18, Y+5	; 0x05
    145e:	3e 81       	ldd	r19, Y+6	; 0x06
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	2c f4       	brge	.+10     	; 0x1470 <DIO_u8SetPinDirection+0x14a>
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	61 f0       	breq	.+24     	; 0x1486 <DIO_u8SetPinDirection+0x160>
    146e:	5b c0       	rjmp	.+182    	; 0x1526 <DIO_u8SetPinDirection+0x200>
    1470:	2d 81       	ldd	r18, Y+5	; 0x05
    1472:	3e 81       	ldd	r19, Y+6	; 0x06
    1474:	22 30       	cpi	r18, 0x02	; 2
    1476:	31 05       	cpc	r19, r1
    1478:	71 f1       	breq	.+92     	; 0x14d6 <DIO_u8SetPinDirection+0x1b0>
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	91 05       	cpc	r25, r1
    1482:	e9 f1       	breq	.+122    	; 0x14fe <DIO_u8SetPinDirection+0x1d8>
    1484:	50 c0       	rjmp	.+160    	; 0x1526 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    1486:	aa e3       	ldi	r26, 0x3A	; 58
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	ea e3       	ldi	r30, 0x3A	; 58
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_u8SetPinDirection+0x17e>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_u8SetPinDirection+0x17a>
    14a8:	84 2b       	or	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	44 c0       	rjmp	.+136    	; 0x1536 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    14ae:	a7 e3       	ldi	r26, 0x37	; 55
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e7 e3       	ldi	r30, 0x37	; 55
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <DIO_u8SetPinDirection+0x1a6>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <DIO_u8SetPinDirection+0x1a2>
    14d0:	84 2b       	or	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	30 c0       	rjmp	.+96     	; 0x1536 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    14d6:	a4 e3       	ldi	r26, 0x34	; 52
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e4 e3       	ldi	r30, 0x34	; 52
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_u8SetPinDirection+0x1ce>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_u8SetPinDirection+0x1ca>
    14f8:	84 2b       	or	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	1c c0       	rjmp	.+56     	; 0x1536 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    14fe:	a1 e3       	ldi	r26, 0x31	; 49
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e1 e3       	ldi	r30, 0x31	; 49
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_u8SetPinDirection+0x1f6>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_u8SetPinDirection+0x1f2>
    1520:	84 2b       	or	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	08 c0       	rjmp	.+16     	; 0x1536 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <DIO_u8SetPinDirection+0x210>
			}
		}

		else
		{
			Local_u8ErrorState = NOK;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1536:	89 81       	ldd	r24, Y+1	; 0x01
}
    1538:	28 96       	adiw	r28, 0x08	; 8
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <DIO_u8SetPinValue>:
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value )
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	28 97       	sbiw	r28, 0x08	; 8
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	8a 83       	std	Y+2, r24	; 0x02
    1560:	6b 83       	std	Y+3, r22	; 0x03
    1562:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1564:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	88 30       	cpi	r24, 0x08	; 8
    156a:	08 f0       	brcs	.+2      	; 0x156e <DIO_u8SetPinValue+0x24>
    156c:	f4 c0       	rjmp	.+488    	; 0x1756 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	88 23       	and	r24, r24
    1572:	09 f0       	breq	.+2      	; 0x1576 <DIO_u8SetPinValue+0x2c>
    1574:	77 c0       	rjmp	.+238    	; 0x1664 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	38 87       	std	Y+8, r19	; 0x08
    157e:	2f 83       	std	Y+7, r18	; 0x07
    1580:	8f 81       	ldd	r24, Y+7	; 0x07
    1582:	98 85       	ldd	r25, Y+8	; 0x08
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	59 f1       	breq	.+86     	; 0x15e0 <DIO_u8SetPinValue+0x96>
    158a:	2f 81       	ldd	r18, Y+7	; 0x07
    158c:	38 85       	ldd	r19, Y+8	; 0x08
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <DIO_u8SetPinValue+0x54>
    1594:	8f 81       	ldd	r24, Y+7	; 0x07
    1596:	98 85       	ldd	r25, Y+8	; 0x08
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	69 f0       	breq	.+26     	; 0x15b6 <DIO_u8SetPinValue+0x6c>
    159c:	60 c0       	rjmp	.+192    	; 0x165e <DIO_u8SetPinValue+0x114>
    159e:	2f 81       	ldd	r18, Y+7	; 0x07
    15a0:	38 85       	ldd	r19, Y+8	; 0x08
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	89 f1       	breq	.+98     	; 0x160a <DIO_u8SetPinValue+0xc0>
    15a8:	8f 81       	ldd	r24, Y+7	; 0x07
    15aa:	98 85       	ldd	r25, Y+8	; 0x08
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	91 05       	cpc	r25, r1
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <DIO_u8SetPinValue+0x6a>
    15b2:	40 c0       	rjmp	.+128    	; 0x1634 <DIO_u8SetPinValue+0xea>
    15b4:	54 c0       	rjmp	.+168    	; 0x165e <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    15b6:	ab e3       	ldi	r26, 0x3B	; 59
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	eb e3       	ldi	r30, 0x3B	; 59
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_u8SetPinValue+0x8a>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_u8SetPinValue+0x86>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	bd c0       	rjmp	.+378    	; 0x175a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    15e0:	a8 e3       	ldi	r26, 0x38	; 56
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e8 e3       	ldi	r30, 0x38	; 56
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_u8SetPinValue+0xb4>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_u8SetPinValue+0xb0>
    1602:	80 95       	com	r24
    1604:	84 23       	and	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	a8 c0       	rjmp	.+336    	; 0x175a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    160a:	a5 e3       	ldi	r26, 0x35	; 53
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e3       	ldi	r30, 0x35	; 53
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_u8SetPinValue+0xde>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_u8SetPinValue+0xda>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	93 c0       	rjmp	.+294    	; 0x175a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    1634:	a2 e3       	ldi	r26, 0x32	; 50
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e2 e3       	ldi	r30, 0x32	; 50
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_u8SetPinValue+0x108>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_u8SetPinValue+0x104>
    1656:	80 95       	com	r24
    1658:	84 23       	and	r24, r20
    165a:	8c 93       	st	X, r24
    165c:	7e c0       	rjmp	.+252    	; 0x175a <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	7b c0       	rjmp	.+246    	; 0x175a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1664:	8c 81       	ldd	r24, Y+4	; 0x04
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	09 f0       	breq	.+2      	; 0x166c <DIO_u8SetPinValue+0x122>
    166a:	72 c0       	rjmp	.+228    	; 0x1750 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	3e 83       	std	Y+6, r19	; 0x06
    1674:	2d 83       	std	Y+5, r18	; 0x05
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	91 05       	cpc	r25, r1
    167e:	49 f1       	breq	.+82     	; 0x16d2 <DIO_u8SetPinValue+0x188>
    1680:	2d 81       	ldd	r18, Y+5	; 0x05
    1682:	3e 81       	ldd	r19, Y+6	; 0x06
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	2c f4       	brge	.+10     	; 0x1694 <DIO_u8SetPinValue+0x14a>
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	61 f0       	breq	.+24     	; 0x16aa <DIO_u8SetPinValue+0x160>
    1692:	5b c0       	rjmp	.+182    	; 0x174a <DIO_u8SetPinValue+0x200>
    1694:	2d 81       	ldd	r18, Y+5	; 0x05
    1696:	3e 81       	ldd	r19, Y+6	; 0x06
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	71 f1       	breq	.+92     	; 0x16fa <DIO_u8SetPinValue+0x1b0>
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	9e 81       	ldd	r25, Y+6	; 0x06
    16a2:	83 30       	cpi	r24, 0x03	; 3
    16a4:	91 05       	cpc	r25, r1
    16a6:	e9 f1       	breq	.+122    	; 0x1722 <DIO_u8SetPinValue+0x1d8>
    16a8:	50 c0       	rjmp	.+160    	; 0x174a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    16aa:	ab e3       	ldi	r26, 0x3B	; 59
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	eb e3       	ldi	r30, 0x3B	; 59
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_u8SetPinValue+0x17e>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_u8SetPinValue+0x17a>
    16cc:	84 2b       	or	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	44 c0       	rjmp	.+136    	; 0x175a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    16d2:	a8 e3       	ldi	r26, 0x38	; 56
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e8 e3       	ldi	r30, 0x38	; 56
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_u8SetPinValue+0x1a6>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <DIO_u8SetPinValue+0x1a2>
    16f4:	84 2b       	or	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	30 c0       	rjmp	.+96     	; 0x175a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    16fa:	a5 e3       	ldi	r26, 0x35	; 53
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e5 e3       	ldi	r30, 0x35	; 53
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_u8SetPinValue+0x1ce>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_u8SetPinValue+0x1ca>
    171c:	84 2b       	or	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	1c c0       	rjmp	.+56     	; 0x175a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    1722:	a2 e3       	ldi	r26, 0x32	; 50
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e2 e3       	ldi	r30, 0x32	; 50
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_u8SetPinValue+0x1f6>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_u8SetPinValue+0x1f2>
    1744:	84 2b       	or	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	08 c0       	rjmp	.+16     	; 0x175a <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	05 c0       	rjmp	.+10     	; 0x175a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    175a:	89 81       	ldd	r24, Y+1	; 0x01
}
    175c:	28 96       	adiw	r28, 0x08	; 8
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <DIO_u8ReadPinValue>:
uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	27 97       	sbiw	r28, 0x07	; 7
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	8a 83       	std	Y+2, r24	; 0x02
    1784:	6b 83       	std	Y+3, r22	; 0x03
    1786:	5d 83       	std	Y+5, r21	; 0x05
    1788:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    178a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value != NULL)
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	09 f4       	brne	.+2      	; 0x1796 <DIO_u8ReadPinValue+0x28>
    1794:	7b c0       	rjmp	.+246    	; 0x188c <DIO_u8ReadPinValue+0x11e>
	{
		if(Copy_u8Pin <=DIO_u8PIN7)
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	88 30       	cpi	r24, 0x08	; 8
    179a:	08 f0       	brcs	.+2      	; 0x179e <DIO_u8ReadPinValue+0x30>
    179c:	74 c0       	rjmp	.+232    	; 0x1886 <DIO_u8ReadPinValue+0x118>
		{
			switch(Copy_u8Port)
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	3f 83       	std	Y+7, r19	; 0x07
    17a6:	2e 83       	std	Y+6, r18	; 0x06
    17a8:	4e 81       	ldd	r20, Y+6	; 0x06
    17aa:	5f 81       	ldd	r21, Y+7	; 0x07
    17ac:	41 30       	cpi	r20, 0x01	; 1
    17ae:	51 05       	cpc	r21, r1
    17b0:	59 f1       	breq	.+86     	; 0x1808 <DIO_u8ReadPinValue+0x9a>
    17b2:	8e 81       	ldd	r24, Y+6	; 0x06
    17b4:	9f 81       	ldd	r25, Y+7	; 0x07
    17b6:	82 30       	cpi	r24, 0x02	; 2
    17b8:	91 05       	cpc	r25, r1
    17ba:	34 f4       	brge	.+12     	; 0x17c8 <DIO_u8ReadPinValue+0x5a>
    17bc:	2e 81       	ldd	r18, Y+6	; 0x06
    17be:	3f 81       	ldd	r19, Y+7	; 0x07
    17c0:	21 15       	cp	r18, r1
    17c2:	31 05       	cpc	r19, r1
    17c4:	69 f0       	breq	.+26     	; 0x17e0 <DIO_u8ReadPinValue+0x72>
    17c6:	5c c0       	rjmp	.+184    	; 0x1880 <DIO_u8ReadPinValue+0x112>
    17c8:	4e 81       	ldd	r20, Y+6	; 0x06
    17ca:	5f 81       	ldd	r21, Y+7	; 0x07
    17cc:	42 30       	cpi	r20, 0x02	; 2
    17ce:	51 05       	cpc	r21, r1
    17d0:	79 f1       	breq	.+94     	; 0x1830 <DIO_u8ReadPinValue+0xc2>
    17d2:	8e 81       	ldd	r24, Y+6	; 0x06
    17d4:	9f 81       	ldd	r25, Y+7	; 0x07
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	91 05       	cpc	r25, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <DIO_u8ReadPinValue+0x70>
    17dc:	3d c0       	rjmp	.+122    	; 0x1858 <DIO_u8ReadPinValue+0xea>
    17de:	50 c0       	rjmp	.+160    	; 0x1880 <DIO_u8ReadPinValue+0x112>
			{
			case DIO_u8PORTA :*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    17e0:	e9 e3       	ldi	r30, 0x39	; 57
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a9 01       	movw	r20, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_u8ReadPinValue+0x8a>
    17f4:	55 95       	asr	r21
    17f6:	47 95       	ror	r20
    17f8:	8a 95       	dec	r24
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <DIO_u8ReadPinValue+0x86>
    17fc:	ca 01       	movw	r24, r20
    17fe:	81 70       	andi	r24, 0x01	; 1
    1800:	ec 81       	ldd	r30, Y+4	; 0x04
    1802:	fd 81       	ldd	r31, Y+5	; 0x05
    1804:	80 83       	st	Z, r24
    1806:	44 c0       	rjmp	.+136    	; 0x1890 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTB :*Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1808:	e6 e3       	ldi	r30, 0x36	; 54
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a9 01       	movw	r20, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <DIO_u8ReadPinValue+0xb2>
    181c:	55 95       	asr	r21
    181e:	47 95       	ror	r20
    1820:	8a 95       	dec	r24
    1822:	e2 f7       	brpl	.-8      	; 0x181c <DIO_u8ReadPinValue+0xae>
    1824:	ca 01       	movw	r24, r20
    1826:	81 70       	andi	r24, 0x01	; 1
    1828:	ec 81       	ldd	r30, Y+4	; 0x04
    182a:	fd 81       	ldd	r31, Y+5	; 0x05
    182c:	80 83       	st	Z, r24
    182e:	30 c0       	rjmp	.+96     	; 0x1890 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTC :*Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1830:	e3 e3       	ldi	r30, 0x33	; 51
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a9 01       	movw	r20, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <DIO_u8ReadPinValue+0xda>
    1844:	55 95       	asr	r21
    1846:	47 95       	ror	r20
    1848:	8a 95       	dec	r24
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <DIO_u8ReadPinValue+0xd6>
    184c:	ca 01       	movw	r24, r20
    184e:	81 70       	andi	r24, 0x01	; 1
    1850:	ec 81       	ldd	r30, Y+4	; 0x04
    1852:	fd 81       	ldd	r31, Y+5	; 0x05
    1854:	80 83       	st	Z, r24
    1856:	1c c0       	rjmp	.+56     	; 0x1890 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTD :*Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1858:	e0 e3       	ldi	r30, 0x30	; 48
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	a9 01       	movw	r20, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <DIO_u8ReadPinValue+0x102>
    186c:	55 95       	asr	r21
    186e:	47 95       	ror	r20
    1870:	8a 95       	dec	r24
    1872:	e2 f7       	brpl	.-8      	; 0x186c <DIO_u8ReadPinValue+0xfe>
    1874:	ca 01       	movw	r24, r20
    1876:	81 70       	andi	r24, 0x01	; 1
    1878:	ec 81       	ldd	r30, Y+4	; 0x04
    187a:	fd 81       	ldd	r31, Y+5	; 0x05
    187c:	80 83       	st	Z, r24
    187e:	08 c0       	rjmp	.+16     	; 0x1890 <DIO_u8ReadPinValue+0x122>
			default : Local_u8ErrorState = NOK; 		 break;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <DIO_u8ReadPinValue+0x122>
			}
		}
		else
		{
			/*Pin number is invalid*/
			Local_u8ErrorState = NOK;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_u8ReadPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
}
    1892:	27 96       	adiw	r28, 0x07	; 7
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <DIO_u8SetPortDirection>:


uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction )
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <DIO_u8SetPortDirection+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <DIO_u8SetPortDirection+0x8>
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	8a 83       	std	Y+2, r24	; 0x02
    18b4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    18b6:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3d 83       	std	Y+5, r19	; 0x05
    18c0:	2c 83       	std	Y+4, r18	; 0x04
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	91 05       	cpc	r25, r1
    18ca:	d1 f0       	breq	.+52     	; 0x1900 <DIO_u8SetPortDirection+0x5c>
    18cc:	2c 81       	ldd	r18, Y+4	; 0x04
    18ce:	3d 81       	ldd	r19, Y+5	; 0x05
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <DIO_u8SetPortDirection+0x3c>
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	61 f0       	breq	.+24     	; 0x18f6 <DIO_u8SetPortDirection+0x52>
    18de:	1f c0       	rjmp	.+62     	; 0x191e <DIO_u8SetPortDirection+0x7a>
    18e0:	2c 81       	ldd	r18, Y+4	; 0x04
    18e2:	3d 81       	ldd	r19, Y+5	; 0x05
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	31 05       	cpc	r19, r1
    18e8:	81 f0       	breq	.+32     	; 0x190a <DIO_u8SetPortDirection+0x66>
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	9d 81       	ldd	r25, Y+5	; 0x05
    18ee:	83 30       	cpi	r24, 0x03	; 3
    18f0:	91 05       	cpc	r25, r1
    18f2:	81 f0       	breq	.+32     	; 0x1914 <DIO_u8SetPortDirection+0x70>
    18f4:	14 c0       	rjmp	.+40     	; 0x191e <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    18f6:	ea e3       	ldi	r30, 0x3A	; 58
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	80 83       	st	Z, r24
    18fe:	11 c0       	rjmp	.+34     	; 0x1922 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    1900:	e7 e3       	ldi	r30, 0x37	; 55
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	80 83       	st	Z, r24
    1908:	0c c0       	rjmp	.+24     	; 0x1922 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    190a:	e4 e3       	ldi	r30, 0x34	; 52
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	80 83       	st	Z, r24
    1912:	07 c0       	rjmp	.+14     	; 0x1922 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    1914:	e1 e3       	ldi	r30, 0x31	; 49
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	80 83       	st	Z, r24
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK; 		break;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1922:	89 81       	ldd	r24, Y+1	; 0x01
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value )
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	00 d0       	rcall	.+0      	; 0x193a <DIO_u8SetPortValue+0x6>
    193a:	00 d0       	rcall	.+0      	; 0x193c <DIO_u8SetPortValue+0x8>
    193c:	0f 92       	push	r0
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	8a 83       	std	Y+2, r24	; 0x02
    1944:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1946:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3d 83       	std	Y+5, r19	; 0x05
    1950:	2c 83       	std	Y+4, r18	; 0x04
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	9d 81       	ldd	r25, Y+5	; 0x05
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	91 05       	cpc	r25, r1
    195a:	d1 f0       	breq	.+52     	; 0x1990 <DIO_u8SetPortValue+0x5c>
    195c:	2c 81       	ldd	r18, Y+4	; 0x04
    195e:	3d 81       	ldd	r19, Y+5	; 0x05
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	2c f4       	brge	.+10     	; 0x1970 <DIO_u8SetPortValue+0x3c>
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	61 f0       	breq	.+24     	; 0x1986 <DIO_u8SetPortValue+0x52>
    196e:	1f c0       	rjmp	.+62     	; 0x19ae <DIO_u8SetPortValue+0x7a>
    1970:	2c 81       	ldd	r18, Y+4	; 0x04
    1972:	3d 81       	ldd	r19, Y+5	; 0x05
    1974:	22 30       	cpi	r18, 0x02	; 2
    1976:	31 05       	cpc	r19, r1
    1978:	81 f0       	breq	.+32     	; 0x199a <DIO_u8SetPortValue+0x66>
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	83 30       	cpi	r24, 0x03	; 3
    1980:	91 05       	cpc	r25, r1
    1982:	81 f0       	breq	.+32     	; 0x19a4 <DIO_u8SetPortValue+0x70>
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    1986:	eb e3       	ldi	r30, 0x3B	; 59
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	80 83       	st	Z, r24
    198e:	11 c0       	rjmp	.+34     	; 0x19b2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    1990:	e8 e3       	ldi	r30, 0x38	; 56
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	80 83       	st	Z, r24
    1998:	0c c0       	rjmp	.+24     	; 0x19b2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    199a:	e5 e3       	ldi	r30, 0x35	; 53
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	80 83       	st	Z, r24
    19a2:	07 c0       	rjmp	.+14     	; 0x19b2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    19a4:	e2 e3       	ldi	r30, 0x32	; 50
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	80 83       	st	Z, r24
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState = NOK; 	 break;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <DIO_u8TogglePinValue+0x6>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <DIO_u8TogglePinValue+0x8>
    19cc:	0f 92       	push	r0
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	8a 83       	std	Y+2, r24	; 0x02
    19d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    19d6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	88 30       	cpi	r24, 0x08	; 8
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <DIO_u8TogglePinValue+0x1c>
    19de:	72 c0       	rjmp	.+228    	; 0x1ac4 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	3d 83       	std	Y+5, r19	; 0x05
    19e8:	2c 83       	std	Y+4, r18	; 0x04
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	91 05       	cpc	r25, r1
    19f2:	49 f1       	breq	.+82     	; 0x1a46 <DIO_u8TogglePinValue+0x82>
    19f4:	2c 81       	ldd	r18, Y+4	; 0x04
    19f6:	3d 81       	ldd	r19, Y+5	; 0x05
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 05       	cpc	r19, r1
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <DIO_u8TogglePinValue+0x44>
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1a00:	9d 81       	ldd	r25, Y+5	; 0x05
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	61 f0       	breq	.+24     	; 0x1a1e <DIO_u8TogglePinValue+0x5a>
    1a06:	5b c0       	rjmp	.+182    	; 0x1abe <DIO_u8TogglePinValue+0xfa>
    1a08:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	71 f1       	breq	.+92     	; 0x1a6e <DIO_u8TogglePinValue+0xaa>
    1a12:	8c 81       	ldd	r24, Y+4	; 0x04
    1a14:	9d 81       	ldd	r25, Y+5	; 0x05
    1a16:	83 30       	cpi	r24, 0x03	; 3
    1a18:	91 05       	cpc	r25, r1
    1a1a:	e9 f1       	breq	.+122    	; 0x1a96 <DIO_u8TogglePinValue+0xd2>
    1a1c:	50 c0       	rjmp	.+160    	; 0x1abe <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin); break;
    1a1e:	ab e3       	ldi	r26, 0x3B	; 59
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	eb e3       	ldi	r30, 0x3B	; 59
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_u8TogglePinValue+0x78>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <DIO_u8TogglePinValue+0x74>
    1a40:	84 27       	eor	r24, r20
    1a42:	8c 93       	st	X, r24
    1a44:	41 c0       	rjmp	.+130    	; 0x1ac8 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin); break;
    1a46:	a8 e3       	ldi	r26, 0x38	; 56
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e8 e3       	ldi	r30, 0x38	; 56
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_u8TogglePinValue+0xa0>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_u8TogglePinValue+0x9c>
    1a68:	84 27       	eor	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	2d c0       	rjmp	.+90     	; 0x1ac8 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC : TOG_BIT(PORTC,Copy_u8Pin); break;
    1a6e:	a5 e3       	ldi	r26, 0x35	; 53
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e5 e3       	ldi	r30, 0x35	; 53
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 2e       	mov	r0, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <DIO_u8TogglePinValue+0xc8>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <DIO_u8TogglePinValue+0xc4>
    1a90:	84 27       	eor	r24, r20
    1a92:	8c 93       	st	X, r24
    1a94:	19 c0       	rjmp	.+50     	; 0x1ac8 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD : TOG_BIT(PORTD,Copy_u8Pin); break;
    1a96:	a2 e3       	ldi	r26, 0x32	; 50
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e2 e3       	ldi	r30, 0x32	; 50
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <DIO_u8TogglePinValue+0xf0>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <DIO_u8TogglePinValue+0xec>
    1ab8:	84 27       	eor	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	05 c0       	rjmp	.+10     	; 0x1ac8 <DIO_u8TogglePinValue+0x104>
		default : Local_u8ErrorState = NOK; 		 break;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <Relay_CW>:
#include "util/delay.h"

#ifndef H_BRIDGE_PROG_C
#define H_BRIDGE_PROG_C
void Relay_CW(void)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    1ae2:	82 e0       	ldi	r24, 0x02	; 2
    1ae4:	63 e0       	ldi	r22, 0x03	; 3
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_HIGH);
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	64 e0       	ldi	r22, 0x04	; 4
    1af0:	41 e0       	ldi	r20, 0x01	; 1
    1af2:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>



}
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <Relay_CCW>:
void Relay_CCW(void)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	2e 97       	sbiw	r28, 0x0e	; 14
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_LOW);
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	64 e0       	ldi	r22, 0x04	; 4
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	63 e0       	ldi	r22, 0x03	; 3
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	aa e7       	ldi	r26, 0x7A	; 122
    1b2a:	b4 e4       	ldi	r27, 0x44	; 68
    1b2c:	8b 87       	std	Y+11, r24	; 0x0b
    1b2e:	9c 87       	std	Y+12, r25	; 0x0c
    1b30:	ad 87       	std	Y+13, r26	; 0x0d
    1b32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4a e7       	ldi	r20, 0x7A	; 122
    1b42:	55 e4       	ldi	r21, 0x45	; 69
    1b44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8f 83       	std	Y+7, r24	; 0x07
    1b4e:	98 87       	std	Y+8, r25	; 0x08
    1b50:	a9 87       	std	Y+9, r26	; 0x09
    1b52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <Relay_CCW+0x7a>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	3f c0       	rjmp	.+126    	; 0x1bf4 <Relay_CCW+0xf8>
	else if (__tmp > 65535)
    1b76:	6f 81       	ldd	r22, Y+7	; 0x07
    1b78:	78 85       	ldd	r23, Y+8	; 0x08
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	57 e4       	ldi	r21, 0x47	; 71
    1b86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	4c f5       	brge	.+82     	; 0x1be0 <Relay_CCW+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e2       	ldi	r20, 0x20	; 32
    1b9c:	51 e4       	ldi	r21, 0x41	; 65
    1b9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	0f c0       	rjmp	.+30     	; 0x1bd6 <Relay_CCW+0xda>
    1bb8:	80 e9       	ldi	r24, 0x90	; 144
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <Relay_CCW+0xc8>
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
    1bca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	69 f7       	brne	.-38     	; 0x1bb8 <Relay_CCW+0xbc>
    1bde:	14 c0       	rjmp	.+40     	; 0x1c08 <Relay_CCW+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <Relay_CCW+0x104>
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_HIGH);
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	63 e0       	ldi	r22, 0x03	; 3
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>

}
    1c12:	2e 96       	adiw	r28, 0x0e	; 14
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <Relay_Stop>:
void Relay_Stop(void)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	63 e0       	ldi	r22, 0x03	; 3
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_LOW);
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	64 e0       	ldi	r22, 0x04	; 4
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
}
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <KPD_u8GetPressedKey>:
#include "KPD_prv.h"
#include "KPD_cfg.h"


uint8 KPD_u8GetPressedKey(void)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	a2 97       	sbiw	r28, 0x22	; 34
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61

	uint8 Local_u8ColIdx , Local_u8RowIdx, Local_u8PinState,Local_u8PressedKey = KPD_u8NOPERESSED_KEY_VAL;
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8RowArr[ROW_NUM]={KPD_u8ROW0_PIN,KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN};
    1c5e:	84 e0       	ldi	r24, 0x04	; 4
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	85 e0       	ldi	r24, 0x05	; 5
    1c64:	8e 83       	std	Y+6, r24	; 0x06
    1c66:	86 e0       	ldi	r24, 0x06	; 6
    1c68:	8f 83       	std	Y+7, r24	; 0x07
    1c6a:	87 e0       	ldi	r24, 0x07	; 7
    1c6c:	88 87       	std	Y+8, r24	; 0x08

	uint8 Local_u8ColArr[COL_NUM]={KPD_u8COL0_PIN,KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN};
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	89 87       	std	Y+9, r24	; 0x09
    1c72:	83 e0       	ldi	r24, 0x03	; 3
    1c74:	8a 87       	std	Y+10, r24	; 0x0a
    1c76:	84 e0       	ldi	r24, 0x04	; 4
    1c78:	8b 87       	std	Y+11, r24	; 0x0b
    1c7a:	85 e0       	ldi	r24, 0x05	; 5
    1c7c:	8c 87       	std	Y+12, r24	; 0x0c

	uint8 Local_au8KPDArr[ROW_NUM][COL_NUM]=KPD_au8_BUTTON_ARR;
    1c7e:	ce 01       	movw	r24, r28
    1c80:	0d 96       	adiw	r24, 0x0d	; 13
    1c82:	9f 8f       	std	Y+31, r25	; 0x1f
    1c84:	8e 8f       	std	Y+30, r24	; 0x1e
    1c86:	e7 ef       	ldi	r30, 0xF7	; 247
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	f9 a3       	std	Y+33, r31	; 0x21
    1c8c:	e8 a3       	std	Y+32, r30	; 0x20
    1c8e:	f0 e1       	ldi	r31, 0x10	; 16
    1c90:	fa a3       	std	Y+34, r31	; 0x22
    1c92:	e8 a1       	ldd	r30, Y+32	; 0x20
    1c94:	f9 a1       	ldd	r31, Y+33	; 0x21
    1c96:	00 80       	ld	r0, Z
    1c98:	88 a1       	ldd	r24, Y+32	; 0x20
    1c9a:	99 a1       	ldd	r25, Y+33	; 0x21
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	99 a3       	std	Y+33, r25	; 0x21
    1ca0:	88 a3       	std	Y+32, r24	; 0x20
    1ca2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1ca4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1ca6:	00 82       	st	Z, r0
    1ca8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1caa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	9f 8f       	std	Y+31, r25	; 0x1f
    1cb0:	8e 8f       	std	Y+30, r24	; 0x1e
    1cb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb4:	91 50       	subi	r25, 0x01	; 1
    1cb6:	9a a3       	std	Y+34, r25	; 0x22
    1cb8:	ea a1       	ldd	r30, Y+34	; 0x22
    1cba:	ee 23       	and	r30, r30
    1cbc:	51 f7       	brne	.-44     	; 0x1c92 <KPD_u8GetPressedKey+0x4c>

	//Activate the column pins
	for(Local_u8ColIdx = 0u ; Local_u8ColIdx < COL_NUM ; Local_u8ColIdx++ )
    1cbe:	1b 82       	std	Y+3, r1	; 0x03
    1cc0:	68 c0       	rjmp	.+208    	; 0x1d92 <KPD_u8GetPressedKey+0x14c>
	{
		//Activate the current column
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColIdx] , DIO_u8PIN_LOW);
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	ce 01       	movw	r24, r28
    1cca:	09 96       	adiw	r24, 0x09	; 9
    1ccc:	fc 01       	movw	r30, r24
    1cce:	e2 0f       	add	r30, r18
    1cd0:	f3 1f       	adc	r31, r19
    1cd2:	90 81       	ld	r25, Z
    1cd4:	83 e0       	ldi	r24, 0x03	; 3
    1cd6:	69 2f       	mov	r22, r25
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>

		//Read the row pins
		for(Local_u8RowIdx = 0u ; Local_u8RowIdx < ROW_NUM ; Local_u8RowIdx++ )
    1cde:	1a 82       	std	Y+2, r1	; 0x02
    1ce0:	43 c0       	rjmp	.+134    	; 0x1d68 <KPD_u8GetPressedKey+0x122>
		{
			//Read the current row
			DIO_u8ReadPinValue(KPD_u8ROW_PORT , Local_u8RowArr[Local_u8RowIdx] , &Local_u8PinState);
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	ce 01       	movw	r24, r28
    1cea:	05 96       	adiw	r24, 0x05	; 5
    1cec:	fc 01       	movw	r30, r24
    1cee:	e2 0f       	add	r30, r18
    1cf0:	f3 1f       	adc	r31, r19
    1cf2:	90 81       	ld	r25, Z
    1cf4:	9e 01       	movw	r18, r28
    1cf6:	2c 5f       	subi	r18, 0xFC	; 252
    1cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	69 2f       	mov	r22, r25
    1cfe:	a9 01       	movw	r20, r18
    1d00:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_u8ReadPinValue>

			if(Local_u8PinState == DIO_u8PIN_LOW)
    1d04:	8c 81       	ldd	r24, Y+4	; 0x04
    1d06:	88 23       	and	r24, r24
    1d08:	61 f5       	brne	.+88     	; 0x1d62 <KPD_u8GetPressedKey+0x11c>
			{
				Local_u8PressedKey = Local_au8KPDArr[Local_u8RowIdx][Local_u8ColIdx];
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	48 2f       	mov	r20, r24
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	22 0f       	add	r18, r18
    1d1c:	33 1f       	adc	r19, r19
    1d1e:	ce 01       	movw	r24, r28
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	82 0f       	add	r24, r18
    1d24:	93 1f       	adc	r25, r19
    1d26:	84 0f       	add	r24, r20
    1d28:	95 1f       	adc	r25, r21
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	3c 96       	adiw	r30, 0x0c	; 12
    1d2e:	80 81       	ld	r24, Z
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	11 c0       	rjmp	.+34     	; 0x1d56 <KPD_u8GetPressedKey+0x110>

				//polling with blocking( waiting ) until the key is released
				while(Local_u8PinState == DIO_u8PIN_LOW)
				{
					DIO_u8ReadPinValue(KPD_u8ROW_PORT , Local_u8RowArr[Local_u8RowIdx] , &Local_u8PinState);
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	05 96       	adiw	r24, 0x05	; 5
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e2 0f       	add	r30, r18
    1d42:	f3 1f       	adc	r31, r19
    1d44:	90 81       	ld	r25, Z
    1d46:	9e 01       	movw	r18, r28
    1d48:	2c 5f       	subi	r18, 0xFC	; 252
    1d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	69 2f       	mov	r22, r25
    1d50:	a9 01       	movw	r20, r18
    1d52:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_u8ReadPinValue>
			if(Local_u8PinState == DIO_u8PIN_LOW)
			{
				Local_u8PressedKey = Local_au8KPDArr[Local_u8RowIdx][Local_u8ColIdx];

				//polling with blocking( waiting ) until the key is released
				while(Local_u8PinState == DIO_u8PIN_LOW)
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	88 23       	and	r24, r24
    1d5a:	61 f3       	breq	.-40     	; 0x1d34 <KPD_u8GetPressedKey+0xee>
				{
					DIO_u8ReadPinValue(KPD_u8ROW_PORT , Local_u8RowArr[Local_u8RowIdx] , &Local_u8PinState);

				}
				return Local_u8PressedKey;
    1d5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d5e:	fd 8f       	std	Y+29, r31	; 0x1d
    1d60:	1e c0       	rjmp	.+60     	; 0x1d9e <KPD_u8GetPressedKey+0x158>
	{
		//Activate the current column
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColIdx] , DIO_u8PIN_LOW);

		//Read the row pins
		for(Local_u8RowIdx = 0u ; Local_u8RowIdx < ROW_NUM ; Local_u8RowIdx++ )
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	8f 5f       	subi	r24, 0xFF	; 255
    1d66:	8a 83       	std	Y+2, r24	; 0x02
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	84 30       	cpi	r24, 0x04	; 4
    1d6c:	08 f4       	brcc	.+2      	; 0x1d70 <KPD_u8GetPressedKey+0x12a>
    1d6e:	b9 cf       	rjmp	.-142    	; 0x1ce2 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;

			}
		}

		DIO_u8SetPinValue(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	ce 01       	movw	r24, r28
    1d78:	09 96       	adiw	r24, 0x09	; 9
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	e2 0f       	add	r30, r18
    1d7e:	f3 1f       	adc	r31, r19
    1d80:	90 81       	ld	r25, Z
    1d82:	83 e0       	ldi	r24, 0x03	; 3
    1d84:	69 2f       	mov	r22, r25
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	uint8 Local_u8ColArr[COL_NUM]={KPD_u8COL0_PIN,KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN};

	uint8 Local_au8KPDArr[ROW_NUM][COL_NUM]=KPD_au8_BUTTON_ARR;

	//Activate the column pins
	for(Local_u8ColIdx = 0u ; Local_u8ColIdx < COL_NUM ; Local_u8ColIdx++ )
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	8b 83       	std	Y+3, r24	; 0x03
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	84 30       	cpi	r24, 0x04	; 4
    1d96:	08 f4       	brcc	.+2      	; 0x1d9a <KPD_u8GetPressedKey+0x154>
    1d98:	94 cf       	rjmp	.-216    	; 0x1cc2 <KPD_u8GetPressedKey+0x7c>
		}

		DIO_u8SetPinValue(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ColIdx],DIO_u8PIN_HIGH);

	}
	return Local_u8PressedKey;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1da0:	a2 96       	adiw	r28, 0x22	; 34
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <PORT_voidInit>:
#include "PORT_cfg.h"
#include "PORT_interface.h"
#include "PORT_reg.h"

void PORT_voidInit(void)
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1dba:	ea e3       	ldi	r30, 0x3A	; 58
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1dc2:	e7 e3       	ldi	r30, 0x37	; 55
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    1dc8:	e4 e3       	ldi	r30, 0x34	; 52
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1dd0:	e1 e3       	ldi	r30, 0x31	; 49
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VAL;
    1dd8:	eb e3       	ldi	r30, 0x3B	; 59
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL;
    1dde:	e8 e3       	ldi	r30, 0x38	; 56
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 ef       	ldi	r24, 0xF0	; 240
    1de4:	80 83       	st	Z, r24
	PORTC = PORTC_INIT_VAL;
    1de6:	e5 e3       	ldi	r30, 0x35	; 53
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	8f ef       	ldi	r24, 0xFF	; 255
    1dec:	80 83       	st	Z, r24
	PORTD = PORTD_INIT_VAL;
    1dee:	e2 e3       	ldi	r30, 0x32	; 50
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	8f ef       	ldi	r24, 0xFF	; 255
    1df4:	80 83       	st	Z, r24
}
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <Stepper_u8RotateAngle>:
#include "KPD_interface.h"
#include "Stepper_cfg.h"
#include "Stepper_interface.h"

uint8 Stepper_u8RotateAngle(const SteperConfig_t* Copy_stpStepper , uint8 Copy_u8Direction , uint16 Copy_u8Angle )
{
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	ca 57       	subi	r28, 0x7A	; 122
    1e0a:	d0 40       	sbci	r29, 0x00	; 0
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	fe 01       	movw	r30, r28
    1e18:	ea 58       	subi	r30, 0x8A	; 138
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	91 83       	std	Z+1, r25	; 0x01
    1e1e:	80 83       	st	Z, r24
    1e20:	fe 01       	movw	r30, r28
    1e22:	e8 58       	subi	r30, 0x88	; 136
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	60 83       	st	Z, r22
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e7 58       	subi	r30, 0x87	; 135
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	51 83       	std	Z+1, r21	; 0x01
    1e30:	40 83       	st	Z, r20
	uint8 Local_u8ErrorState = OK ; // Local variable to store error state
    1e32:	fe 01       	movw	r30, r28
    1e34:	eb 58       	subi	r30, 0x8B	; 139
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	10 82       	st	Z, r1
	uint16 Local_u16Steps;
	uint16 Local_u16LoopCounter ;

	if(Copy_stpStepper != NULL)
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	ea 58       	subi	r30, 0x8A	; 138
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <Stepper_u8RotateAngle+0x4e>
    1e48:	6e c7       	rjmp	.+3804   	; 0x2d26 <Stepper_u8RotateAngle+0xf2a>
	{
		Local_u16Steps = (uint16)( (  ( (uint32)Copy_u8Angle ) * (2048UL)  ) /360UL );
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e7 58       	subi	r30, 0x87	; 135
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	cc 01       	movw	r24, r24
    1e56:	a0 e0       	ldi	r26, 0x00	; 0
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	07 2e       	mov	r0, r23
    1e5c:	7b e0       	ldi	r23, 0x0B	; 11
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	aa 1f       	adc	r26, r26
    1e64:	bb 1f       	adc	r27, r27
    1e66:	7a 95       	dec	r23
    1e68:	d1 f7       	brne	.-12     	; 0x1e5e <Stepper_u8RotateAngle+0x62>
    1e6a:	70 2d       	mov	r23, r0
    1e6c:	28 e6       	ldi	r18, 0x68	; 104
    1e6e:	31 e0       	ldi	r19, 0x01	; 1
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__udivmodsi4>
    1e7c:	da 01       	movw	r26, r20
    1e7e:	c9 01       	movw	r24, r18
    1e80:	fe 01       	movw	r30, r28
    1e82:	ed 58       	subi	r30, 0x8D	; 141
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24

		if(Copy_u8Direction == ROTAT_CCW)
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e8 58       	subi	r30, 0x88	; 136
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	82 30       	cpi	r24, 0x02	; 2
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <Stepper_u8RotateAngle+0x9c>
    1e96:	10 c4       	rjmp	.+2080   	; 0x26b8 <Stepper_u8RotateAngle+0x8bc>
		{
			// untiClockwise rotation:Blue > Pink  > Yellow > Orange
			for(Local_u16LoopCounter = 0 ; Local_u16LoopCounter < Local_u16Steps ; Local_u16LoopCounter++)
    1e98:	fe 01       	movw	r30, r28
    1e9a:	ef 58       	subi	r30, 0x8F	; 143
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	11 82       	std	Z+1, r1	; 0x01
    1ea0:	10 82       	st	Z, r1
    1ea2:	fa c3       	rjmp	.+2036   	; 0x2698 <Stepper_u8RotateAngle+0x89c>
			{
				if(Local_u16LoopCounter % 4 == 0 )
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ef 58       	subi	r30, 0x8F	; 143
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 81       	ld	r24, Z
    1eac:	91 81       	ldd	r25, Z+1	; 0x01
    1eae:	83 70       	andi	r24, 0x03	; 3
    1eb0:	90 70       	andi	r25, 0x00	; 0
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <Stepper_u8RotateAngle+0xbc>
    1eb6:	fd c0       	rjmp	.+506    	; 0x20b2 <Stepper_u8RotateAngle+0x2b6>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_LOW);
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ea 58       	subi	r30, 0x8A	; 138
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	01 90       	ld	r0, Z+
    1ec0:	f0 81       	ld	r31, Z
    1ec2:	e0 2d       	mov	r30, r0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	ea 58       	subi	r30, 0x8A	; 138
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	01 90       	ld	r0, Z+
    1ece:	f0 81       	ld	r31, Z
    1ed0:	e0 2d       	mov	r30, r0
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	69 2f       	mov	r22, r25
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_HIGH);
    1edc:	fe 01       	movw	r30, r28
    1ede:	ea 58       	subi	r30, 0x8A	; 138
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	01 90       	ld	r0, Z+
    1ee4:	f0 81       	ld	r31, Z
    1ee6:	e0 2d       	mov	r30, r0
    1ee8:	80 81       	ld	r24, Z
    1eea:	fe 01       	movw	r30, r28
    1eec:	ea 58       	subi	r30, 0x8A	; 138
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	01 90       	ld	r0, Z+
    1ef2:	f0 81       	ld	r31, Z
    1ef4:	e0 2d       	mov	r30, r0
    1ef6:	92 81       	ldd	r25, Z+2	; 0x02
    1ef8:	69 2f       	mov	r22, r25
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_HIGH);
    1f00:	fe 01       	movw	r30, r28
    1f02:	ea 58       	subi	r30, 0x8A	; 138
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	01 90       	ld	r0, Z+
    1f08:	f0 81       	ld	r31, Z
    1f0a:	e0 2d       	mov	r30, r0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ea 58       	subi	r30, 0x8A	; 138
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	01 90       	ld	r0, Z+
    1f16:	f0 81       	ld	r31, Z
    1f18:	e0 2d       	mov	r30, r0
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	69 2f       	mov	r22, r25
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_HIGH);
    1f24:	fe 01       	movw	r30, r28
    1f26:	ea 58       	subi	r30, 0x8A	; 138
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	01 90       	ld	r0, Z+
    1f2c:	f0 81       	ld	r31, Z
    1f2e:	e0 2d       	mov	r30, r0
    1f30:	80 81       	ld	r24, Z
    1f32:	fe 01       	movw	r30, r28
    1f34:	ea 58       	subi	r30, 0x8A	; 138
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	01 90       	ld	r0, Z+
    1f3a:	f0 81       	ld	r31, Z
    1f3c:	e0 2d       	mov	r30, r0
    1f3e:	94 81       	ldd	r25, Z+4	; 0x04
    1f40:	69 2f       	mov	r22, r25
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e3 59       	subi	r30, 0x93	; 147
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a0 ea       	ldi	r26, 0xA0	; 160
    1f54:	b0 e4       	ldi	r27, 0x40	; 64
    1f56:	80 83       	st	Z, r24
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	a2 83       	std	Z+2, r26	; 0x02
    1f5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	8e 01       	movw	r16, r28
    1f60:	07 59       	subi	r16, 0x97	; 151
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	e3 59       	subi	r30, 0x93	; 147
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	4a e7       	ldi	r20, 0x7A	; 122
    1f78:	55 e4       	ldi	r21, 0x45	; 69
    1f7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	f8 01       	movw	r30, r16
    1f84:	80 83       	st	Z, r24
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	a2 83       	std	Z+2, r26	; 0x02
    1f8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e7 59       	subi	r30, 0x97	; 151
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e8       	ldi	r20, 0x80	; 128
    1fa0:	5f e3       	ldi	r21, 0x3F	; 63
    1fa2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fa6:	88 23       	and	r24, r24
    1fa8:	44 f4       	brge	.+16     	; 0x1fba <Stepper_u8RotateAngle+0x1be>
		__ticks = 1;
    1faa:	fe 01       	movw	r30, r28
    1fac:	e9 59       	subi	r30, 0x99	; 153
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	80 83       	st	Z, r24
    1fb8:	64 c0       	rjmp	.+200    	; 0x2082 <Stepper_u8RotateAngle+0x286>
	else if (__tmp > 65535)
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e7 59       	subi	r30, 0x97	; 151
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	3f ef       	ldi	r19, 0xFF	; 255
    1fcc:	4f e7       	ldi	r20, 0x7F	; 127
    1fce:	57 e4       	ldi	r21, 0x47	; 71
    1fd0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd4:	18 16       	cp	r1, r24
    1fd6:	0c f0       	brlt	.+2      	; 0x1fda <Stepper_u8RotateAngle+0x1de>
    1fd8:	43 c0       	rjmp	.+134    	; 0x2060 <Stepper_u8RotateAngle+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e3 59       	subi	r30, 0x93	; 147
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	60 81       	ld	r22, Z
    1fe2:	71 81       	ldd	r23, Z+1	; 0x01
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	93 81       	ldd	r25, Z+3	; 0x03
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e2       	ldi	r20, 0x20	; 32
    1fee:	51 e4       	ldi	r21, 0x41	; 65
    1ff0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	8e 01       	movw	r16, r28
    1ffa:	09 59       	subi	r16, 0x99	; 153
    1ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	f8 01       	movw	r30, r16
    200c:	91 83       	std	Z+1, r25	; 0x01
    200e:	80 83       	st	Z, r24
    2010:	1f c0       	rjmp	.+62     	; 0x2050 <Stepper_u8RotateAngle+0x254>
    2012:	fe 01       	movw	r30, r28
    2014:	eb 59       	subi	r30, 0x9B	; 155
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 e9       	ldi	r24, 0x90	; 144
    201a:	91 e0       	ldi	r25, 0x01	; 1
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	80 83       	st	Z, r24
    2020:	fe 01       	movw	r30, r28
    2022:	eb 59       	subi	r30, 0x9B	; 155
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <Stepper_u8RotateAngle+0x22e>
    202e:	fe 01       	movw	r30, r28
    2030:	eb 59       	subi	r30, 0x9B	; 155
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2038:	de 01       	movw	r26, r28
    203a:	a9 59       	subi	r26, 0x99	; 153
    203c:	bf 4f       	sbci	r27, 0xFF	; 255
    203e:	fe 01       	movw	r30, r28
    2040:	e9 59       	subi	r30, 0x99	; 153
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	80 81       	ld	r24, Z
    2046:	91 81       	ldd	r25, Z+1	; 0x01
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	9c 93       	st	X, r25
    204e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	fe 01       	movw	r30, r28
    2052:	e9 59       	subi	r30, 0x99	; 153
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	d1 f6       	brne	.-76     	; 0x2012 <Stepper_u8RotateAngle+0x216>
    205e:	11 c3       	rjmp	.+1570   	; 0x2682 <Stepper_u8RotateAngle+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	8e 01       	movw	r16, r28
    2062:	09 59       	subi	r16, 0x99	; 153
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	fe 01       	movw	r30, r28
    2068:	e7 59       	subi	r30, 0x97	; 151
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	60 81       	ld	r22, Z
    206e:	71 81       	ldd	r23, Z+1	; 0x01
    2070:	82 81       	ldd	r24, Z+2	; 0x02
    2072:	93 81       	ldd	r25, Z+3	; 0x03
    2074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	f8 01       	movw	r30, r16
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	de 01       	movw	r26, r28
    2084:	ad 59       	subi	r26, 0x9D	; 157
    2086:	bf 4f       	sbci	r27, 0xFF	; 255
    2088:	fe 01       	movw	r30, r28
    208a:	e9 59       	subi	r30, 0x99	; 153
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	11 96       	adiw	r26, 0x01	; 1
    2094:	9c 93       	st	X, r25
    2096:	8e 93       	st	-X, r24
    2098:	fe 01       	movw	r30, r28
    209a:	ed 59       	subi	r30, 0x9D	; 157
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <Stepper_u8RotateAngle+0x2a6>
    20a6:	fe 01       	movw	r30, r28
    20a8:	ed 59       	subi	r30, 0x9D	; 157
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	91 83       	std	Z+1, r25	; 0x01
    20ae:	80 83       	st	Z, r24
    20b0:	e8 c2       	rjmp	.+1488   	; 0x2682 <Stepper_u8RotateAngle+0x886>
					_delay_ms(5);
				}
				else if(Local_u16LoopCounter % 4 == 1 )
    20b2:	fe 01       	movw	r30, r28
    20b4:	ef 58       	subi	r30, 0x8F	; 143
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01
    20bc:	83 70       	andi	r24, 0x03	; 3
    20be:	90 70       	andi	r25, 0x00	; 0
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	91 05       	cpc	r25, r1
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <Stepper_u8RotateAngle+0x2cc>
    20c6:	fd c0       	rjmp	.+506    	; 0x22c2 <Stepper_u8RotateAngle+0x4c6>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_HIGH);
    20c8:	fe 01       	movw	r30, r28
    20ca:	ea 58       	subi	r30, 0x8A	; 138
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	01 90       	ld	r0, Z+
    20d0:	f0 81       	ld	r31, Z
    20d2:	e0 2d       	mov	r30, r0
    20d4:	80 81       	ld	r24, Z
    20d6:	fe 01       	movw	r30, r28
    20d8:	ea 58       	subi	r30, 0x8A	; 138
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	01 90       	ld	r0, Z+
    20de:	f0 81       	ld	r31, Z
    20e0:	e0 2d       	mov	r30, r0
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	69 2f       	mov	r22, r25
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_LOW);
    20ec:	fe 01       	movw	r30, r28
    20ee:	ea 58       	subi	r30, 0x8A	; 138
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	01 90       	ld	r0, Z+
    20f4:	f0 81       	ld	r31, Z
    20f6:	e0 2d       	mov	r30, r0
    20f8:	80 81       	ld	r24, Z
    20fa:	fe 01       	movw	r30, r28
    20fc:	ea 58       	subi	r30, 0x8A	; 138
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	01 90       	ld	r0, Z+
    2102:	f0 81       	ld	r31, Z
    2104:	e0 2d       	mov	r30, r0
    2106:	92 81       	ldd	r25, Z+2	; 0x02
    2108:	69 2f       	mov	r22, r25
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_HIGH);
    2110:	fe 01       	movw	r30, r28
    2112:	ea 58       	subi	r30, 0x8A	; 138
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	01 90       	ld	r0, Z+
    2118:	f0 81       	ld	r31, Z
    211a:	e0 2d       	mov	r30, r0
    211c:	80 81       	ld	r24, Z
    211e:	fe 01       	movw	r30, r28
    2120:	ea 58       	subi	r30, 0x8A	; 138
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	01 90       	ld	r0, Z+
    2126:	f0 81       	ld	r31, Z
    2128:	e0 2d       	mov	r30, r0
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	69 2f       	mov	r22, r25
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_HIGH);
    2134:	fe 01       	movw	r30, r28
    2136:	ea 58       	subi	r30, 0x8A	; 138
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	01 90       	ld	r0, Z+
    213c:	f0 81       	ld	r31, Z
    213e:	e0 2d       	mov	r30, r0
    2140:	80 81       	ld	r24, Z
    2142:	fe 01       	movw	r30, r28
    2144:	ea 58       	subi	r30, 0x8A	; 138
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	01 90       	ld	r0, Z+
    214a:	f0 81       	ld	r31, Z
    214c:	e0 2d       	mov	r30, r0
    214e:	94 81       	ldd	r25, Z+4	; 0x04
    2150:	69 2f       	mov	r22, r25
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    2158:	fe 01       	movw	r30, r28
    215a:	e1 5a       	subi	r30, 0xA1	; 161
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a0 ea       	ldi	r26, 0xA0	; 160
    2164:	b0 e4       	ldi	r27, 0x40	; 64
    2166:	80 83       	st	Z, r24
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	a2 83       	std	Z+2, r26	; 0x02
    216c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216e:	8e 01       	movw	r16, r28
    2170:	05 5a       	subi	r16, 0xA5	; 165
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	fe 01       	movw	r30, r28
    2176:	e1 5a       	subi	r30, 0xA1	; 161
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	60 81       	ld	r22, Z
    217c:	71 81       	ldd	r23, Z+1	; 0x01
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	4a e7       	ldi	r20, 0x7A	; 122
    2188:	55 e4       	ldi	r21, 0x45	; 69
    218a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	f8 01       	movw	r30, r16
    2194:	80 83       	st	Z, r24
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	a2 83       	std	Z+2, r26	; 0x02
    219a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    219c:	fe 01       	movw	r30, r28
    219e:	e5 5a       	subi	r30, 0xA5	; 165
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	60 81       	ld	r22, Z
    21a4:	71 81       	ldd	r23, Z+1	; 0x01
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e8       	ldi	r20, 0x80	; 128
    21b0:	5f e3       	ldi	r21, 0x3F	; 63
    21b2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21b6:	88 23       	and	r24, r24
    21b8:	44 f4       	brge	.+16     	; 0x21ca <Stepper_u8RotateAngle+0x3ce>
		__ticks = 1;
    21ba:	fe 01       	movw	r30, r28
    21bc:	e7 5a       	subi	r30, 0xA7	; 167
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
    21c8:	64 c0       	rjmp	.+200    	; 0x2292 <Stepper_u8RotateAngle+0x496>
	else if (__tmp > 65535)
    21ca:	fe 01       	movw	r30, r28
    21cc:	e5 5a       	subi	r30, 0xA5	; 165
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	3f ef       	ldi	r19, 0xFF	; 255
    21dc:	4f e7       	ldi	r20, 0x7F	; 127
    21de:	57 e4       	ldi	r21, 0x47	; 71
    21e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21e4:	18 16       	cp	r1, r24
    21e6:	0c f0       	brlt	.+2      	; 0x21ea <Stepper_u8RotateAngle+0x3ee>
    21e8:	43 c0       	rjmp	.+134    	; 0x2270 <Stepper_u8RotateAngle+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ea:	fe 01       	movw	r30, r28
    21ec:	e1 5a       	subi	r30, 0xA1	; 161
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	60 81       	ld	r22, Z
    21f2:	71 81       	ldd	r23, Z+1	; 0x01
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	8e 01       	movw	r16, r28
    220a:	07 5a       	subi	r16, 0xA7	; 167
    220c:	1f 4f       	sbci	r17, 0xFF	; 255
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	f8 01       	movw	r30, r16
    221c:	91 83       	std	Z+1, r25	; 0x01
    221e:	80 83       	st	Z, r24
    2220:	1f c0       	rjmp	.+62     	; 0x2260 <Stepper_u8RotateAngle+0x464>
    2222:	fe 01       	movw	r30, r28
    2224:	e9 5a       	subi	r30, 0xA9	; 169
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	80 e9       	ldi	r24, 0x90	; 144
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	91 83       	std	Z+1, r25	; 0x01
    222e:	80 83       	st	Z, r24
    2230:	fe 01       	movw	r30, r28
    2232:	e9 5a       	subi	r30, 0xA9	; 169
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <Stepper_u8RotateAngle+0x43e>
    223e:	fe 01       	movw	r30, r28
    2240:	e9 5a       	subi	r30, 0xA9	; 169
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2248:	de 01       	movw	r26, r28
    224a:	a7 5a       	subi	r26, 0xA7	; 167
    224c:	bf 4f       	sbci	r27, 0xFF	; 255
    224e:	fe 01       	movw	r30, r28
    2250:	e7 5a       	subi	r30, 0xA7	; 167
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	11 96       	adiw	r26, 0x01	; 1
    225c:	9c 93       	st	X, r25
    225e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2260:	fe 01       	movw	r30, r28
    2262:	e7 5a       	subi	r30, 0xA7	; 167
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	d1 f6       	brne	.-76     	; 0x2222 <Stepper_u8RotateAngle+0x426>
    226e:	09 c2       	rjmp	.+1042   	; 0x2682 <Stepper_u8RotateAngle+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2270:	8e 01       	movw	r16, r28
    2272:	07 5a       	subi	r16, 0xA7	; 167
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
    2276:	fe 01       	movw	r30, r28
    2278:	e5 5a       	subi	r30, 0xA5	; 165
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	f8 01       	movw	r30, r16
    228e:	91 83       	std	Z+1, r25	; 0x01
    2290:	80 83       	st	Z, r24
    2292:	de 01       	movw	r26, r28
    2294:	ab 5a       	subi	r26, 0xAB	; 171
    2296:	bf 4f       	sbci	r27, 0xFF	; 255
    2298:	fe 01       	movw	r30, r28
    229a:	e7 5a       	subi	r30, 0xA7	; 167
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 81       	ld	r24, Z
    22a0:	91 81       	ldd	r25, Z+1	; 0x01
    22a2:	11 96       	adiw	r26, 0x01	; 1
    22a4:	9c 93       	st	X, r25
    22a6:	8e 93       	st	-X, r24
    22a8:	fe 01       	movw	r30, r28
    22aa:	eb 5a       	subi	r30, 0xAB	; 171
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <Stepper_u8RotateAngle+0x4b6>
    22b6:	fe 01       	movw	r30, r28
    22b8:	eb 5a       	subi	r30, 0xAB	; 171
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
    22c0:	e0 c1       	rjmp	.+960    	; 0x2682 <Stepper_u8RotateAngle+0x886>
					_delay_ms(5);

				}
				else if(Local_u16LoopCounter % 4 == 2 )
    22c2:	fe 01       	movw	r30, r28
    22c4:	ef 58       	subi	r30, 0x8F	; 143
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	83 70       	andi	r24, 0x03	; 3
    22ce:	90 70       	andi	r25, 0x00	; 0
    22d0:	82 30       	cpi	r24, 0x02	; 2
    22d2:	91 05       	cpc	r25, r1
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <Stepper_u8RotateAngle+0x4dc>
    22d6:	fd c0       	rjmp	.+506    	; 0x24d2 <Stepper_u8RotateAngle+0x6d6>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_HIGH);
    22d8:	fe 01       	movw	r30, r28
    22da:	ea 58       	subi	r30, 0x8A	; 138
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	01 90       	ld	r0, Z+
    22e0:	f0 81       	ld	r31, Z
    22e2:	e0 2d       	mov	r30, r0
    22e4:	80 81       	ld	r24, Z
    22e6:	fe 01       	movw	r30, r28
    22e8:	ea 58       	subi	r30, 0x8A	; 138
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	01 90       	ld	r0, Z+
    22ee:	f0 81       	ld	r31, Z
    22f0:	e0 2d       	mov	r30, r0
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
    22f4:	69 2f       	mov	r22, r25
    22f6:	41 e0       	ldi	r20, 0x01	; 1
    22f8:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_HIGH);
    22fc:	fe 01       	movw	r30, r28
    22fe:	ea 58       	subi	r30, 0x8A	; 138
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	01 90       	ld	r0, Z+
    2304:	f0 81       	ld	r31, Z
    2306:	e0 2d       	mov	r30, r0
    2308:	80 81       	ld	r24, Z
    230a:	fe 01       	movw	r30, r28
    230c:	ea 58       	subi	r30, 0x8A	; 138
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	01 90       	ld	r0, Z+
    2312:	f0 81       	ld	r31, Z
    2314:	e0 2d       	mov	r30, r0
    2316:	92 81       	ldd	r25, Z+2	; 0x02
    2318:	69 2f       	mov	r22, r25
    231a:	41 e0       	ldi	r20, 0x01	; 1
    231c:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_LOW);
    2320:	fe 01       	movw	r30, r28
    2322:	ea 58       	subi	r30, 0x8A	; 138
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	01 90       	ld	r0, Z+
    2328:	f0 81       	ld	r31, Z
    232a:	e0 2d       	mov	r30, r0
    232c:	80 81       	ld	r24, Z
    232e:	fe 01       	movw	r30, r28
    2330:	ea 58       	subi	r30, 0x8A	; 138
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	01 90       	ld	r0, Z+
    2336:	f0 81       	ld	r31, Z
    2338:	e0 2d       	mov	r30, r0
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	69 2f       	mov	r22, r25
    233e:	40 e0       	ldi	r20, 0x00	; 0
    2340:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_HIGH);
    2344:	fe 01       	movw	r30, r28
    2346:	ea 58       	subi	r30, 0x8A	; 138
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	01 90       	ld	r0, Z+
    234c:	f0 81       	ld	r31, Z
    234e:	e0 2d       	mov	r30, r0
    2350:	80 81       	ld	r24, Z
    2352:	fe 01       	movw	r30, r28
    2354:	ea 58       	subi	r30, 0x8A	; 138
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	01 90       	ld	r0, Z+
    235a:	f0 81       	ld	r31, Z
    235c:	e0 2d       	mov	r30, r0
    235e:	94 81       	ldd	r25, Z+4	; 0x04
    2360:	69 2f       	mov	r22, r25
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    2368:	fe 01       	movw	r30, r28
    236a:	ef 5a       	subi	r30, 0xAF	; 175
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 ea       	ldi	r26, 0xA0	; 160
    2374:	b0 e4       	ldi	r27, 0x40	; 64
    2376:	80 83       	st	Z, r24
    2378:	91 83       	std	Z+1, r25	; 0x01
    237a:	a2 83       	std	Z+2, r26	; 0x02
    237c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	8e 01       	movw	r16, r28
    2380:	03 5b       	subi	r16, 0xB3	; 179
    2382:	1f 4f       	sbci	r17, 0xFF	; 255
    2384:	fe 01       	movw	r30, r28
    2386:	ef 5a       	subi	r30, 0xAF	; 175
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	60 81       	ld	r22, Z
    238c:	71 81       	ldd	r23, Z+1	; 0x01
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	93 81       	ldd	r25, Z+3	; 0x03
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a e7       	ldi	r20, 0x7A	; 122
    2398:	55 e4       	ldi	r21, 0x45	; 69
    239a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	f8 01       	movw	r30, r16
    23a4:	80 83       	st	Z, r24
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	a2 83       	std	Z+2, r26	; 0x02
    23aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ac:	fe 01       	movw	r30, r28
    23ae:	e3 5b       	subi	r30, 0xB3	; 179
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	60 81       	ld	r22, Z
    23b4:	71 81       	ldd	r23, Z+1	; 0x01
    23b6:	82 81       	ldd	r24, Z+2	; 0x02
    23b8:	93 81       	ldd	r25, Z+3	; 0x03
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e8       	ldi	r20, 0x80	; 128
    23c0:	5f e3       	ldi	r21, 0x3F	; 63
    23c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	44 f4       	brge	.+16     	; 0x23da <Stepper_u8RotateAngle+0x5de>
		__ticks = 1;
    23ca:	fe 01       	movw	r30, r28
    23cc:	e5 5b       	subi	r30, 0xB5	; 181
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	91 83       	std	Z+1, r25	; 0x01
    23d6:	80 83       	st	Z, r24
    23d8:	64 c0       	rjmp	.+200    	; 0x24a2 <Stepper_u8RotateAngle+0x6a6>
	else if (__tmp > 65535)
    23da:	fe 01       	movw	r30, r28
    23dc:	e3 5b       	subi	r30, 0xB3	; 179
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	60 81       	ld	r22, Z
    23e2:	71 81       	ldd	r23, Z+1	; 0x01
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	93 81       	ldd	r25, Z+3	; 0x03
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	3f ef       	ldi	r19, 0xFF	; 255
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	57 e4       	ldi	r21, 0x47	; 71
    23f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23f4:	18 16       	cp	r1, r24
    23f6:	0c f0       	brlt	.+2      	; 0x23fa <Stepper_u8RotateAngle+0x5fe>
    23f8:	43 c0       	rjmp	.+134    	; 0x2480 <Stepper_u8RotateAngle+0x684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fa:	fe 01       	movw	r30, r28
    23fc:	ef 5a       	subi	r30, 0xAF	; 175
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	60 81       	ld	r22, Z
    2402:	71 81       	ldd	r23, Z+1	; 0x01
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	93 81       	ldd	r25, Z+3	; 0x03
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e2       	ldi	r20, 0x20	; 32
    240e:	51 e4       	ldi	r21, 0x41	; 65
    2410:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	8e 01       	movw	r16, r28
    241a:	05 5b       	subi	r16, 0xB5	; 181
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	f8 01       	movw	r30, r16
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	80 83       	st	Z, r24
    2430:	1f c0       	rjmp	.+62     	; 0x2470 <Stepper_u8RotateAngle+0x674>
    2432:	fe 01       	movw	r30, r28
    2434:	e7 5b       	subi	r30, 0xB7	; 183
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 e9       	ldi	r24, 0x90	; 144
    243a:	91 e0       	ldi	r25, 0x01	; 1
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	80 83       	st	Z, r24
    2440:	fe 01       	movw	r30, r28
    2442:	e7 5b       	subi	r30, 0xB7	; 183
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 81       	ld	r24, Z
    2448:	91 81       	ldd	r25, Z+1	; 0x01
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <Stepper_u8RotateAngle+0x64e>
    244e:	fe 01       	movw	r30, r28
    2450:	e7 5b       	subi	r30, 0xB7	; 183
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2458:	de 01       	movw	r26, r28
    245a:	a5 5b       	subi	r26, 0xB5	; 181
    245c:	bf 4f       	sbci	r27, 0xFF	; 255
    245e:	fe 01       	movw	r30, r28
    2460:	e5 5b       	subi	r30, 0xB5	; 181
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	11 96       	adiw	r26, 0x01	; 1
    246c:	9c 93       	st	X, r25
    246e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2470:	fe 01       	movw	r30, r28
    2472:	e5 5b       	subi	r30, 0xB5	; 181
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 81       	ld	r24, Z
    2478:	91 81       	ldd	r25, Z+1	; 0x01
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	d1 f6       	brne	.-76     	; 0x2432 <Stepper_u8RotateAngle+0x636>
    247e:	01 c1       	rjmp	.+514    	; 0x2682 <Stepper_u8RotateAngle+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2480:	8e 01       	movw	r16, r28
    2482:	05 5b       	subi	r16, 0xB5	; 181
    2484:	1f 4f       	sbci	r17, 0xFF	; 255
    2486:	fe 01       	movw	r30, r28
    2488:	e3 5b       	subi	r30, 0xB3	; 179
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	f8 01       	movw	r30, r16
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	80 83       	st	Z, r24
    24a2:	de 01       	movw	r26, r28
    24a4:	a9 5b       	subi	r26, 0xB9	; 185
    24a6:	bf 4f       	sbci	r27, 0xFF	; 255
    24a8:	fe 01       	movw	r30, r28
    24aa:	e5 5b       	subi	r30, 0xB5	; 181
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	80 81       	ld	r24, Z
    24b0:	91 81       	ldd	r25, Z+1	; 0x01
    24b2:	11 96       	adiw	r26, 0x01	; 1
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
    24b8:	fe 01       	movw	r30, r28
    24ba:	e9 5b       	subi	r30, 0xB9	; 185
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <Stepper_u8RotateAngle+0x6c6>
    24c6:	fe 01       	movw	r30, r28
    24c8:	e9 5b       	subi	r30, 0xB9	; 185
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	80 83       	st	Z, r24
    24d0:	d8 c0       	rjmp	.+432    	; 0x2682 <Stepper_u8RotateAngle+0x886>
					_delay_ms(5);
				}
				else if(Local_u16LoopCounter % 4 == 3  )
    24d2:	fe 01       	movw	r30, r28
    24d4:	ef 58       	subi	r30, 0x8F	; 143
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 81       	ld	r24, Z
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	83 70       	andi	r24, 0x03	; 3
    24de:	90 70       	andi	r25, 0x00	; 0
    24e0:	83 30       	cpi	r24, 0x03	; 3
    24e2:	91 05       	cpc	r25, r1
    24e4:	09 f0       	breq	.+2      	; 0x24e8 <Stepper_u8RotateAngle+0x6ec>
    24e6:	cd c0       	rjmp	.+410    	; 0x2682 <Stepper_u8RotateAngle+0x886>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_HIGH);
    24e8:	fe 01       	movw	r30, r28
    24ea:	ea 58       	subi	r30, 0x8A	; 138
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	01 90       	ld	r0, Z+
    24f0:	f0 81       	ld	r31, Z
    24f2:	e0 2d       	mov	r30, r0
    24f4:	80 81       	ld	r24, Z
    24f6:	fe 01       	movw	r30, r28
    24f8:	ea 58       	subi	r30, 0x8A	; 138
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	01 90       	ld	r0, Z+
    24fe:	f0 81       	ld	r31, Z
    2500:	e0 2d       	mov	r30, r0
    2502:	91 81       	ldd	r25, Z+1	; 0x01
    2504:	69 2f       	mov	r22, r25
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_HIGH);
    250c:	fe 01       	movw	r30, r28
    250e:	ea 58       	subi	r30, 0x8A	; 138
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	01 90       	ld	r0, Z+
    2514:	f0 81       	ld	r31, Z
    2516:	e0 2d       	mov	r30, r0
    2518:	80 81       	ld	r24, Z
    251a:	fe 01       	movw	r30, r28
    251c:	ea 58       	subi	r30, 0x8A	; 138
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	01 90       	ld	r0, Z+
    2522:	f0 81       	ld	r31, Z
    2524:	e0 2d       	mov	r30, r0
    2526:	92 81       	ldd	r25, Z+2	; 0x02
    2528:	69 2f       	mov	r22, r25
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_HIGH);
    2530:	fe 01       	movw	r30, r28
    2532:	ea 58       	subi	r30, 0x8A	; 138
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	01 90       	ld	r0, Z+
    2538:	f0 81       	ld	r31, Z
    253a:	e0 2d       	mov	r30, r0
    253c:	80 81       	ld	r24, Z
    253e:	fe 01       	movw	r30, r28
    2540:	ea 58       	subi	r30, 0x8A	; 138
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	01 90       	ld	r0, Z+
    2546:	f0 81       	ld	r31, Z
    2548:	e0 2d       	mov	r30, r0
    254a:	93 81       	ldd	r25, Z+3	; 0x03
    254c:	69 2f       	mov	r22, r25
    254e:	41 e0       	ldi	r20, 0x01	; 1
    2550:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_LOW);
    2554:	fe 01       	movw	r30, r28
    2556:	ea 58       	subi	r30, 0x8A	; 138
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	01 90       	ld	r0, Z+
    255c:	f0 81       	ld	r31, Z
    255e:	e0 2d       	mov	r30, r0
    2560:	80 81       	ld	r24, Z
    2562:	fe 01       	movw	r30, r28
    2564:	ea 58       	subi	r30, 0x8A	; 138
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	01 90       	ld	r0, Z+
    256a:	f0 81       	ld	r31, Z
    256c:	e0 2d       	mov	r30, r0
    256e:	94 81       	ldd	r25, Z+4	; 0x04
    2570:	69 2f       	mov	r22, r25
    2572:	40 e0       	ldi	r20, 0x00	; 0
    2574:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    2578:	fe 01       	movw	r30, r28
    257a:	ed 5b       	subi	r30, 0xBD	; 189
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	a0 ea       	ldi	r26, 0xA0	; 160
    2584:	b0 e4       	ldi	r27, 0x40	; 64
    2586:	80 83       	st	Z, r24
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	a2 83       	std	Z+2, r26	; 0x02
    258c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258e:	8e 01       	movw	r16, r28
    2590:	01 5c       	subi	r16, 0xC1	; 193
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	ed 5b       	subi	r30, 0xBD	; 189
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4a e7       	ldi	r20, 0x7A	; 122
    25a8:	55 e4       	ldi	r21, 0x45	; 69
    25aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	f8 01       	movw	r30, r16
    25b4:	80 83       	st	Z, r24
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	a2 83       	std	Z+2, r26	; 0x02
    25ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25bc:	fe 01       	movw	r30, r28
    25be:	ff 96       	adiw	r30, 0x3f	; 63
    25c0:	60 81       	ld	r22, Z
    25c2:	71 81       	ldd	r23, Z+1	; 0x01
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	93 81       	ldd	r25, Z+3	; 0x03
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e8       	ldi	r20, 0x80	; 128
    25ce:	5f e3       	ldi	r21, 0x3F	; 63
    25d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25d4:	88 23       	and	r24, r24
    25d6:	2c f4       	brge	.+10     	; 0x25e2 <Stepper_u8RotateAngle+0x7e6>
		__ticks = 1;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	9e af       	std	Y+62, r25	; 0x3e
    25de:	8d af       	std	Y+61, r24	; 0x3d
    25e0:	46 c0       	rjmp	.+140    	; 0x266e <Stepper_u8RotateAngle+0x872>
	else if (__tmp > 65535)
    25e2:	fe 01       	movw	r30, r28
    25e4:	ff 96       	adiw	r30, 0x3f	; 63
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	57 e4       	ldi	r21, 0x47	; 71
    25f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	64 f5       	brge	.+88     	; 0x2656 <Stepper_u8RotateAngle+0x85a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fe:	fe 01       	movw	r30, r28
    2600:	ed 5b       	subi	r30, 0xBD	; 189
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	60 81       	ld	r22, Z
    2606:	71 81       	ldd	r23, Z+1	; 0x01
    2608:	82 81       	ldd	r24, Z+2	; 0x02
    260a:	93 81       	ldd	r25, Z+3	; 0x03
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e2       	ldi	r20, 0x20	; 32
    2612:	51 e4       	ldi	r21, 0x41	; 65
    2614:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9e af       	std	Y+62, r25	; 0x3e
    262a:	8d af       	std	Y+61, r24	; 0x3d
    262c:	0f c0       	rjmp	.+30     	; 0x264c <Stepper_u8RotateAngle+0x850>
    262e:	80 e9       	ldi	r24, 0x90	; 144
    2630:	91 e0       	ldi	r25, 0x01	; 1
    2632:	9c af       	std	Y+60, r25	; 0x3c
    2634:	8b af       	std	Y+59, r24	; 0x3b
    2636:	8b ad       	ldd	r24, Y+59	; 0x3b
    2638:	9c ad       	ldd	r25, Y+60	; 0x3c
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <Stepper_u8RotateAngle+0x83e>
    263e:	9c af       	std	Y+60, r25	; 0x3c
    2640:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2642:	8d ad       	ldd	r24, Y+61	; 0x3d
    2644:	9e ad       	ldd	r25, Y+62	; 0x3e
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	9e af       	std	Y+62, r25	; 0x3e
    264a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264c:	8d ad       	ldd	r24, Y+61	; 0x3d
    264e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	69 f7       	brne	.-38     	; 0x262e <Stepper_u8RotateAngle+0x832>
    2654:	16 c0       	rjmp	.+44     	; 0x2682 <Stepper_u8RotateAngle+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2656:	fe 01       	movw	r30, r28
    2658:	ff 96       	adiw	r30, 0x3f	; 63
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9e af       	std	Y+62, r25	; 0x3e
    266c:	8d af       	std	Y+61, r24	; 0x3d
    266e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2670:	9e ad       	ldd	r25, Y+62	; 0x3e
    2672:	9a af       	std	Y+58, r25	; 0x3a
    2674:	89 af       	std	Y+57, r24	; 0x39
    2676:	89 ad       	ldd	r24, Y+57	; 0x39
    2678:	9a ad       	ldd	r25, Y+58	; 0x3a
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <Stepper_u8RotateAngle+0x87e>
    267e:	9a af       	std	Y+58, r25	; 0x3a
    2680:	89 af       	std	Y+57, r24	; 0x39
		Local_u16Steps = (uint16)( (  ( (uint32)Copy_u8Angle ) * (2048UL)  ) /360UL );

		if(Copy_u8Direction == ROTAT_CCW)
		{
			// untiClockwise rotation:Blue > Pink  > Yellow > Orange
			for(Local_u16LoopCounter = 0 ; Local_u16LoopCounter < Local_u16Steps ; Local_u16LoopCounter++)
    2682:	de 01       	movw	r26, r28
    2684:	af 58       	subi	r26, 0x8F	; 143
    2686:	bf 4f       	sbci	r27, 0xFF	; 255
    2688:	fe 01       	movw	r30, r28
    268a:	ef 58       	subi	r30, 0x8F	; 143
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	80 81       	ld	r24, Z
    2690:	91 81       	ldd	r25, Z+1	; 0x01
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	8d 93       	st	X+, r24
    2696:	9c 93       	st	X, r25
    2698:	fe 01       	movw	r30, r28
    269a:	ef 58       	subi	r30, 0x8F	; 143
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	de 01       	movw	r26, r28
    26a0:	ad 58       	subi	r26, 0x8D	; 141
    26a2:	bf 4f       	sbci	r27, 0xFF	; 255
    26a4:	20 81       	ld	r18, Z
    26a6:	31 81       	ldd	r19, Z+1	; 0x01
    26a8:	8d 91       	ld	r24, X+
    26aa:	9c 91       	ld	r25, X
    26ac:	11 97       	sbiw	r26, 0x01	; 1
    26ae:	28 17       	cp	r18, r24
    26b0:	39 07       	cpc	r19, r25
    26b2:	08 f4       	brcc	.+2      	; 0x26b6 <Stepper_u8RotateAngle+0x8ba>
    26b4:	f7 cb       	rjmp	.-2066   	; 0x1ea4 <Stepper_u8RotateAngle+0xa8>
    26b6:	3c c3       	rjmp	.+1656   	; 0x2d30 <Stepper_u8RotateAngle+0xf34>
		}

		else if(ROTAT_CW)
		{
			// Clockwise rotation:Blue > Pink  > Yellow > Orange
			for(Local_u16LoopCounter = 0 ; Local_u16LoopCounter < Local_u16Steps ; Local_u16LoopCounter++)
    26b8:	fe 01       	movw	r30, r28
    26ba:	ef 58       	subi	r30, 0x8F	; 143
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	11 82       	std	Z+1, r1	; 0x01
    26c0:	10 82       	st	Z, r1
    26c2:	21 c3       	rjmp	.+1602   	; 0x2d06 <Stepper_u8RotateAngle+0xf0a>
			{
				if(Local_u16LoopCounter % 4 == 0 )
    26c4:	fe 01       	movw	r30, r28
    26c6:	ef 58       	subi	r30, 0x8F	; 143
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	83 70       	andi	r24, 0x03	; 3
    26d0:	90 70       	andi	r25, 0x00	; 0
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	09 f0       	breq	.+2      	; 0x26d8 <Stepper_u8RotateAngle+0x8dc>
    26d6:	bb c0       	rjmp	.+374    	; 0x284e <Stepper_u8RotateAngle+0xa52>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_HIGH);
    26d8:	fe 01       	movw	r30, r28
    26da:	ea 58       	subi	r30, 0x8A	; 138
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	01 90       	ld	r0, Z+
    26e0:	f0 81       	ld	r31, Z
    26e2:	e0 2d       	mov	r30, r0
    26e4:	80 81       	ld	r24, Z
    26e6:	fe 01       	movw	r30, r28
    26e8:	ea 58       	subi	r30, 0x8A	; 138
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	01 90       	ld	r0, Z+
    26ee:	f0 81       	ld	r31, Z
    26f0:	e0 2d       	mov	r30, r0
    26f2:	91 81       	ldd	r25, Z+1	; 0x01
    26f4:	69 2f       	mov	r22, r25
    26f6:	41 e0       	ldi	r20, 0x01	; 1
    26f8:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_HIGH);
    26fc:	fe 01       	movw	r30, r28
    26fe:	ea 58       	subi	r30, 0x8A	; 138
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	01 90       	ld	r0, Z+
    2704:	f0 81       	ld	r31, Z
    2706:	e0 2d       	mov	r30, r0
    2708:	80 81       	ld	r24, Z
    270a:	fe 01       	movw	r30, r28
    270c:	ea 58       	subi	r30, 0x8A	; 138
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	01 90       	ld	r0, Z+
    2712:	f0 81       	ld	r31, Z
    2714:	e0 2d       	mov	r30, r0
    2716:	92 81       	ldd	r25, Z+2	; 0x02
    2718:	69 2f       	mov	r22, r25
    271a:	41 e0       	ldi	r20, 0x01	; 1
    271c:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_HIGH);
    2720:	fe 01       	movw	r30, r28
    2722:	ea 58       	subi	r30, 0x8A	; 138
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	01 90       	ld	r0, Z+
    2728:	f0 81       	ld	r31, Z
    272a:	e0 2d       	mov	r30, r0
    272c:	80 81       	ld	r24, Z
    272e:	fe 01       	movw	r30, r28
    2730:	ea 58       	subi	r30, 0x8A	; 138
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	01 90       	ld	r0, Z+
    2736:	f0 81       	ld	r31, Z
    2738:	e0 2d       	mov	r30, r0
    273a:	93 81       	ldd	r25, Z+3	; 0x03
    273c:	69 2f       	mov	r22, r25
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_LOW);
    2744:	fe 01       	movw	r30, r28
    2746:	ea 58       	subi	r30, 0x8A	; 138
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	01 90       	ld	r0, Z+
    274c:	f0 81       	ld	r31, Z
    274e:	e0 2d       	mov	r30, r0
    2750:	80 81       	ld	r24, Z
    2752:	fe 01       	movw	r30, r28
    2754:	ea 58       	subi	r30, 0x8A	; 138
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	01 90       	ld	r0, Z+
    275a:	f0 81       	ld	r31, Z
    275c:	e0 2d       	mov	r30, r0
    275e:	94 81       	ldd	r25, Z+4	; 0x04
    2760:	69 2f       	mov	r22, r25
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	a0 ea       	ldi	r26, 0xA0	; 160
    276e:	b0 e4       	ldi	r27, 0x40	; 64
    2770:	8d ab       	std	Y+53, r24	; 0x35
    2772:	9e ab       	std	Y+54, r25	; 0x36
    2774:	af ab       	std	Y+55, r26	; 0x37
    2776:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	6d a9       	ldd	r22, Y+53	; 0x35
    277a:	7e a9       	ldd	r23, Y+54	; 0x36
    277c:	8f a9       	ldd	r24, Y+55	; 0x37
    277e:	98 ad       	ldd	r25, Y+56	; 0x38
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a e7       	ldi	r20, 0x7A	; 122
    2786:	55 e4       	ldi	r21, 0x45	; 69
    2788:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	89 ab       	std	Y+49, r24	; 0x31
    2792:	9a ab       	std	Y+50, r25	; 0x32
    2794:	ab ab       	std	Y+51, r26	; 0x33
    2796:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2798:	69 a9       	ldd	r22, Y+49	; 0x31
    279a:	7a a9       	ldd	r23, Y+50	; 0x32
    279c:	8b a9       	ldd	r24, Y+51	; 0x33
    279e:	9c a9       	ldd	r25, Y+52	; 0x34
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	2c f4       	brge	.+10     	; 0x27ba <Stepper_u8RotateAngle+0x9be>
		__ticks = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	98 ab       	std	Y+48, r25	; 0x30
    27b6:	8f a7       	std	Y+47, r24	; 0x2f
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <Stepper_u8RotateAngle+0xa3c>
	else if (__tmp > 65535)
    27ba:	69 a9       	ldd	r22, Y+49	; 0x31
    27bc:	7a a9       	ldd	r23, Y+50	; 0x32
    27be:	8b a9       	ldd	r24, Y+51	; 0x33
    27c0:	9c a9       	ldd	r25, Y+52	; 0x34
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	4f e7       	ldi	r20, 0x7F	; 127
    27c8:	57 e4       	ldi	r21, 0x47	; 71
    27ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27ce:	18 16       	cp	r1, r24
    27d0:	4c f5       	brge	.+82     	; 0x2824 <Stepper_u8RotateAngle+0xa28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	6d a9       	ldd	r22, Y+53	; 0x35
    27d4:	7e a9       	ldd	r23, Y+54	; 0x36
    27d6:	8f a9       	ldd	r24, Y+55	; 0x37
    27d8:	98 ad       	ldd	r25, Y+56	; 0x38
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	98 ab       	std	Y+48, r25	; 0x30
    27f8:	8f a7       	std	Y+47, r24	; 0x2f
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <Stepper_u8RotateAngle+0xa1e>
    27fc:	80 e9       	ldi	r24, 0x90	; 144
    27fe:	91 e0       	ldi	r25, 0x01	; 1
    2800:	9e a7       	std	Y+46, r25	; 0x2e
    2802:	8d a7       	std	Y+45, r24	; 0x2d
    2804:	8d a5       	ldd	r24, Y+45	; 0x2d
    2806:	9e a5       	ldd	r25, Y+46	; 0x2e
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <Stepper_u8RotateAngle+0xa0c>
    280c:	9e a7       	std	Y+46, r25	; 0x2e
    280e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	8f a5       	ldd	r24, Y+47	; 0x2f
    2812:	98 a9       	ldd	r25, Y+48	; 0x30
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	98 ab       	std	Y+48, r25	; 0x30
    2818:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	8f a5       	ldd	r24, Y+47	; 0x2f
    281c:	98 a9       	ldd	r25, Y+48	; 0x30
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	69 f7       	brne	.-38     	; 0x27fc <Stepper_u8RotateAngle+0xa00>
    2822:	66 c2       	rjmp	.+1228   	; 0x2cf0 <Stepper_u8RotateAngle+0xef4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	69 a9       	ldd	r22, Y+49	; 0x31
    2826:	7a a9       	ldd	r23, Y+50	; 0x32
    2828:	8b a9       	ldd	r24, Y+51	; 0x33
    282a:	9c a9       	ldd	r25, Y+52	; 0x34
    282c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	98 ab       	std	Y+48, r25	; 0x30
    2836:	8f a7       	std	Y+47, r24	; 0x2f
    2838:	8f a5       	ldd	r24, Y+47	; 0x2f
    283a:	98 a9       	ldd	r25, Y+48	; 0x30
    283c:	9c a7       	std	Y+44, r25	; 0x2c
    283e:	8b a7       	std	Y+43, r24	; 0x2b
    2840:	8b a5       	ldd	r24, Y+43	; 0x2b
    2842:	9c a5       	ldd	r25, Y+44	; 0x2c
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <Stepper_u8RotateAngle+0xa48>
    2848:	9c a7       	std	Y+44, r25	; 0x2c
    284a:	8b a7       	std	Y+43, r24	; 0x2b
    284c:	51 c2       	rjmp	.+1186   	; 0x2cf0 <Stepper_u8RotateAngle+0xef4>
					_delay_ms(5);
				}
				else if(Local_u16LoopCounter % 4 == 1 )
    284e:	fe 01       	movw	r30, r28
    2850:	ef 58       	subi	r30, 0x8F	; 143
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 81       	ld	r24, Z
    2856:	91 81       	ldd	r25, Z+1	; 0x01
    2858:	83 70       	andi	r24, 0x03	; 3
    285a:	90 70       	andi	r25, 0x00	; 0
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	91 05       	cpc	r25, r1
    2860:	09 f0       	breq	.+2      	; 0x2864 <Stepper_u8RotateAngle+0xa68>
    2862:	bb c0       	rjmp	.+374    	; 0x29da <Stepper_u8RotateAngle+0xbde>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PORT_HIGH);
    2864:	fe 01       	movw	r30, r28
    2866:	ea 58       	subi	r30, 0x8A	; 138
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	01 90       	ld	r0, Z+
    286c:	f0 81       	ld	r31, Z
    286e:	e0 2d       	mov	r30, r0
    2870:	80 81       	ld	r24, Z
    2872:	fe 01       	movw	r30, r28
    2874:	ea 58       	subi	r30, 0x8A	; 138
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	01 90       	ld	r0, Z+
    287a:	f0 81       	ld	r31, Z
    287c:	e0 2d       	mov	r30, r0
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	69 2f       	mov	r22, r25
    2882:	4f ef       	ldi	r20, 0xFF	; 255
    2884:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PORT_HIGH);
    2888:	fe 01       	movw	r30, r28
    288a:	ea 58       	subi	r30, 0x8A	; 138
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	01 90       	ld	r0, Z+
    2890:	f0 81       	ld	r31, Z
    2892:	e0 2d       	mov	r30, r0
    2894:	80 81       	ld	r24, Z
    2896:	fe 01       	movw	r30, r28
    2898:	ea 58       	subi	r30, 0x8A	; 138
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	01 90       	ld	r0, Z+
    289e:	f0 81       	ld	r31, Z
    28a0:	e0 2d       	mov	r30, r0
    28a2:	92 81       	ldd	r25, Z+2	; 0x02
    28a4:	69 2f       	mov	r22, r25
    28a6:	4f ef       	ldi	r20, 0xFF	; 255
    28a8:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_LOW);
    28ac:	fe 01       	movw	r30, r28
    28ae:	ea 58       	subi	r30, 0x8A	; 138
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	01 90       	ld	r0, Z+
    28b4:	f0 81       	ld	r31, Z
    28b6:	e0 2d       	mov	r30, r0
    28b8:	80 81       	ld	r24, Z
    28ba:	fe 01       	movw	r30, r28
    28bc:	ea 58       	subi	r30, 0x8A	; 138
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	01 90       	ld	r0, Z+
    28c2:	f0 81       	ld	r31, Z
    28c4:	e0 2d       	mov	r30, r0
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	69 2f       	mov	r22, r25
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PORT_HIGH);
    28d0:	fe 01       	movw	r30, r28
    28d2:	ea 58       	subi	r30, 0x8A	; 138
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	01 90       	ld	r0, Z+
    28d8:	f0 81       	ld	r31, Z
    28da:	e0 2d       	mov	r30, r0
    28dc:	80 81       	ld	r24, Z
    28de:	fe 01       	movw	r30, r28
    28e0:	ea 58       	subi	r30, 0x8A	; 138
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	01 90       	ld	r0, Z+
    28e6:	f0 81       	ld	r31, Z
    28e8:	e0 2d       	mov	r30, r0
    28ea:	94 81       	ldd	r25, Z+4	; 0x04
    28ec:	69 2f       	mov	r22, r25
    28ee:	4f ef       	ldi	r20, 0xFF	; 255
    28f0:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a0 ea       	ldi	r26, 0xA0	; 160
    28fa:	b0 e4       	ldi	r27, 0x40	; 64
    28fc:	8f a3       	std	Y+39, r24	; 0x27
    28fe:	98 a7       	std	Y+40, r25	; 0x28
    2900:	a9 a7       	std	Y+41, r26	; 0x29
    2902:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2904:	6f a1       	ldd	r22, Y+39	; 0x27
    2906:	78 a5       	ldd	r23, Y+40	; 0x28
    2908:	89 a5       	ldd	r24, Y+41	; 0x29
    290a:	9a a5       	ldd	r25, Y+42	; 0x2a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	4a e7       	ldi	r20, 0x7A	; 122
    2912:	55 e4       	ldi	r21, 0x45	; 69
    2914:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	8b a3       	std	Y+35, r24	; 0x23
    291e:	9c a3       	std	Y+36, r25	; 0x24
    2920:	ad a3       	std	Y+37, r26	; 0x25
    2922:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2924:	6b a1       	ldd	r22, Y+35	; 0x23
    2926:	7c a1       	ldd	r23, Y+36	; 0x24
    2928:	8d a1       	ldd	r24, Y+37	; 0x25
    292a:	9e a1       	ldd	r25, Y+38	; 0x26
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e8       	ldi	r20, 0x80	; 128
    2932:	5f e3       	ldi	r21, 0x3F	; 63
    2934:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2938:	88 23       	and	r24, r24
    293a:	2c f4       	brge	.+10     	; 0x2946 <Stepper_u8RotateAngle+0xb4a>
		__ticks = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9a a3       	std	Y+34, r25	; 0x22
    2942:	89 a3       	std	Y+33, r24	; 0x21
    2944:	3f c0       	rjmp	.+126    	; 0x29c4 <Stepper_u8RotateAngle+0xbc8>
	else if (__tmp > 65535)
    2946:	6b a1       	ldd	r22, Y+35	; 0x23
    2948:	7c a1       	ldd	r23, Y+36	; 0x24
    294a:	8d a1       	ldd	r24, Y+37	; 0x25
    294c:	9e a1       	ldd	r25, Y+38	; 0x26
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	3f ef       	ldi	r19, 0xFF	; 255
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	57 e4       	ldi	r21, 0x47	; 71
    2956:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	4c f5       	brge	.+82     	; 0x29b0 <Stepper_u8RotateAngle+0xbb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295e:	6f a1       	ldd	r22, Y+39	; 0x27
    2960:	78 a5       	ldd	r23, Y+40	; 0x28
    2962:	89 a5       	ldd	r24, Y+41	; 0x29
    2964:	9a a5       	ldd	r25, Y+42	; 0x2a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	51 e4       	ldi	r21, 0x41	; 65
    296e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9a a3       	std	Y+34, r25	; 0x22
    2984:	89 a3       	std	Y+33, r24	; 0x21
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <Stepper_u8RotateAngle+0xbaa>
    2988:	80 e9       	ldi	r24, 0x90	; 144
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	98 a3       	std	Y+32, r25	; 0x20
    298e:	8f 8f       	std	Y+31, r24	; 0x1f
    2990:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2992:	98 a1       	ldd	r25, Y+32	; 0x20
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <Stepper_u8RotateAngle+0xb98>
    2998:	98 a3       	std	Y+32, r25	; 0x20
    299a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	89 a1       	ldd	r24, Y+33	; 0x21
    299e:	9a a1       	ldd	r25, Y+34	; 0x22
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	9a a3       	std	Y+34, r25	; 0x22
    29a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	89 a1       	ldd	r24, Y+33	; 0x21
    29a8:	9a a1       	ldd	r25, Y+34	; 0x22
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	69 f7       	brne	.-38     	; 0x2988 <Stepper_u8RotateAngle+0xb8c>
    29ae:	a0 c1       	rjmp	.+832    	; 0x2cf0 <Stepper_u8RotateAngle+0xef4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b0:	6b a1       	ldd	r22, Y+35	; 0x23
    29b2:	7c a1       	ldd	r23, Y+36	; 0x24
    29b4:	8d a1       	ldd	r24, Y+37	; 0x25
    29b6:	9e a1       	ldd	r25, Y+38	; 0x26
    29b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9a a3       	std	Y+34, r25	; 0x22
    29c2:	89 a3       	std	Y+33, r24	; 0x21
    29c4:	89 a1       	ldd	r24, Y+33	; 0x21
    29c6:	9a a1       	ldd	r25, Y+34	; 0x22
    29c8:	9e 8f       	std	Y+30, r25	; 0x1e
    29ca:	8d 8f       	std	Y+29, r24	; 0x1d
    29cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <Stepper_u8RotateAngle+0xbd4>
    29d4:	9e 8f       	std	Y+30, r25	; 0x1e
    29d6:	8d 8f       	std	Y+29, r24	; 0x1d
    29d8:	8b c1       	rjmp	.+790    	; 0x2cf0 <Stepper_u8RotateAngle+0xef4>
					_delay_ms(5);

				}
				else if(Local_u16LoopCounter % 4 == 2 )
    29da:	fe 01       	movw	r30, r28
    29dc:	ef 58       	subi	r30, 0x8F	; 143
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	83 70       	andi	r24, 0x03	; 3
    29e6:	90 70       	andi	r25, 0x00	; 0
    29e8:	82 30       	cpi	r24, 0x02	; 2
    29ea:	91 05       	cpc	r25, r1
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <Stepper_u8RotateAngle+0xbf4>
    29ee:	bb c0       	rjmp	.+374    	; 0x2b66 <Stepper_u8RotateAngle+0xd6a>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PORT_HIGH);
    29f0:	fe 01       	movw	r30, r28
    29f2:	ea 58       	subi	r30, 0x8A	; 138
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	01 90       	ld	r0, Z+
    29f8:	f0 81       	ld	r31, Z
    29fa:	e0 2d       	mov	r30, r0
    29fc:	80 81       	ld	r24, Z
    29fe:	fe 01       	movw	r30, r28
    2a00:	ea 58       	subi	r30, 0x8A	; 138
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	01 90       	ld	r0, Z+
    2a06:	f0 81       	ld	r31, Z
    2a08:	e0 2d       	mov	r30, r0
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	69 2f       	mov	r22, r25
    2a0e:	4f ef       	ldi	r20, 0xFF	; 255
    2a10:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_LOW);
    2a14:	fe 01       	movw	r30, r28
    2a16:	ea 58       	subi	r30, 0x8A	; 138
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	01 90       	ld	r0, Z+
    2a1c:	f0 81       	ld	r31, Z
    2a1e:	e0 2d       	mov	r30, r0
    2a20:	80 81       	ld	r24, Z
    2a22:	fe 01       	movw	r30, r28
    2a24:	ea 58       	subi	r30, 0x8A	; 138
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	01 90       	ld	r0, Z+
    2a2a:	f0 81       	ld	r31, Z
    2a2c:	e0 2d       	mov	r30, r0
    2a2e:	92 81       	ldd	r25, Z+2	; 0x02
    2a30:	69 2f       	mov	r22, r25
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PORT_HIGH);
    2a38:	fe 01       	movw	r30, r28
    2a3a:	ea 58       	subi	r30, 0x8A	; 138
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	01 90       	ld	r0, Z+
    2a40:	f0 81       	ld	r31, Z
    2a42:	e0 2d       	mov	r30, r0
    2a44:	80 81       	ld	r24, Z
    2a46:	fe 01       	movw	r30, r28
    2a48:	ea 58       	subi	r30, 0x8A	; 138
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	01 90       	ld	r0, Z+
    2a4e:	f0 81       	ld	r31, Z
    2a50:	e0 2d       	mov	r30, r0
    2a52:	93 81       	ldd	r25, Z+3	; 0x03
    2a54:	69 2f       	mov	r22, r25
    2a56:	4f ef       	ldi	r20, 0xFF	; 255
    2a58:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PORT_HIGH);
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	ea 58       	subi	r30, 0x8A	; 138
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	01 90       	ld	r0, Z+
    2a64:	f0 81       	ld	r31, Z
    2a66:	e0 2d       	mov	r30, r0
    2a68:	80 81       	ld	r24, Z
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	ea 58       	subi	r30, 0x8A	; 138
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	01 90       	ld	r0, Z+
    2a72:	f0 81       	ld	r31, Z
    2a74:	e0 2d       	mov	r30, r0
    2a76:	94 81       	ldd	r25, Z+4	; 0x04
    2a78:	69 2f       	mov	r22, r25
    2a7a:	4f ef       	ldi	r20, 0xFF	; 255
    2a7c:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	a0 ea       	ldi	r26, 0xA0	; 160
    2a86:	b0 e4       	ldi	r27, 0x40	; 64
    2a88:	89 8f       	std	Y+25, r24	; 0x19
    2a8a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a8c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a90:	69 8d       	ldd	r22, Y+25	; 0x19
    2a92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	4a e7       	ldi	r20, 0x7A	; 122
    2a9e:	55 e4       	ldi	r21, 0x45	; 69
    2aa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	8d 8b       	std	Y+21, r24	; 0x15
    2aaa:	9e 8b       	std	Y+22, r25	; 0x16
    2aac:	af 8b       	std	Y+23, r26	; 0x17
    2aae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e8       	ldi	r20, 0x80	; 128
    2abe:	5f e3       	ldi	r21, 0x3F	; 63
    2ac0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ac4:	88 23       	and	r24, r24
    2ac6:	2c f4       	brge	.+10     	; 0x2ad2 <Stepper_u8RotateAngle+0xcd6>
		__ticks = 1;
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	9c 8b       	std	Y+20, r25	; 0x14
    2ace:	8b 8b       	std	Y+19, r24	; 0x13
    2ad0:	3f c0       	rjmp	.+126    	; 0x2b50 <Stepper_u8RotateAngle+0xd54>
	else if (__tmp > 65535)
    2ad2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad8:	98 8d       	ldd	r25, Y+24	; 0x18
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	3f ef       	ldi	r19, 0xFF	; 255
    2ade:	4f e7       	ldi	r20, 0x7F	; 127
    2ae0:	57 e4       	ldi	r21, 0x47	; 71
    2ae2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ae6:	18 16       	cp	r1, r24
    2ae8:	4c f5       	brge	.+82     	; 0x2b3c <Stepper_u8RotateAngle+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aea:	69 8d       	ldd	r22, Y+25	; 0x19
    2aec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e2       	ldi	r20, 0x20	; 32
    2af8:	51 e4       	ldi	r21, 0x41	; 65
    2afa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	bc 01       	movw	r22, r24
    2b04:	cd 01       	movw	r24, r26
    2b06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	9c 8b       	std	Y+20, r25	; 0x14
    2b10:	8b 8b       	std	Y+19, r24	; 0x13
    2b12:	0f c0       	rjmp	.+30     	; 0x2b32 <Stepper_u8RotateAngle+0xd36>
    2b14:	80 e9       	ldi	r24, 0x90	; 144
    2b16:	91 e0       	ldi	r25, 0x01	; 1
    2b18:	9a 8b       	std	Y+18, r25	; 0x12
    2b1a:	89 8b       	std	Y+17, r24	; 0x11
    2b1c:	89 89       	ldd	r24, Y+17	; 0x11
    2b1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	f1 f7       	brne	.-4      	; 0x2b20 <Stepper_u8RotateAngle+0xd24>
    2b24:	9a 8b       	std	Y+18, r25	; 0x12
    2b26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b28:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	9c 8b       	std	Y+20, r25	; 0x14
    2b30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b32:	8b 89       	ldd	r24, Y+19	; 0x13
    2b34:	9c 89       	ldd	r25, Y+20	; 0x14
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	69 f7       	brne	.-38     	; 0x2b14 <Stepper_u8RotateAngle+0xd18>
    2b3a:	da c0       	rjmp	.+436    	; 0x2cf0 <Stepper_u8RotateAngle+0xef4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b40:	8f 89       	ldd	r24, Y+23	; 0x17
    2b42:	98 8d       	ldd	r25, Y+24	; 0x18
    2b44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	9c 8b       	std	Y+20, r25	; 0x14
    2b4e:	8b 8b       	std	Y+19, r24	; 0x13
    2b50:	8b 89       	ldd	r24, Y+19	; 0x13
    2b52:	9c 89       	ldd	r25, Y+20	; 0x14
    2b54:	98 8b       	std	Y+16, r25	; 0x10
    2b56:	8f 87       	std	Y+15, r24	; 0x0f
    2b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b5a:	98 89       	ldd	r25, Y+16	; 0x10
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <Stepper_u8RotateAngle+0xd60>
    2b60:	98 8b       	std	Y+16, r25	; 0x10
    2b62:	8f 87       	std	Y+15, r24	; 0x0f
    2b64:	c5 c0       	rjmp	.+394    	; 0x2cf0 <Stepper_u8RotateAngle+0xef4>
					_delay_ms(5);
				}
				else if(Local_u16LoopCounter % 4 == 3  )
    2b66:	fe 01       	movw	r30, r28
    2b68:	ef 58       	subi	r30, 0x8F	; 143
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	83 70       	andi	r24, 0x03	; 3
    2b72:	90 70       	andi	r25, 0x00	; 0
    2b74:	83 30       	cpi	r24, 0x03	; 3
    2b76:	91 05       	cpc	r25, r1
    2b78:	09 f0       	breq	.+2      	; 0x2b7c <Stepper_u8RotateAngle+0xd80>
    2b7a:	ba c0       	rjmp	.+372    	; 0x2cf0 <Stepper_u8RotateAngle+0xef4>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_LOW);
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ea 58       	subi	r30, 0x8A	; 138
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	01 90       	ld	r0, Z+
    2b84:	f0 81       	ld	r31, Z
    2b86:	e0 2d       	mov	r30, r0
    2b88:	80 81       	ld	r24, Z
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	ea 58       	subi	r30, 0x8A	; 138
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	01 90       	ld	r0, Z+
    2b92:	f0 81       	ld	r31, Z
    2b94:	e0 2d       	mov	r30, r0
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	69 2f       	mov	r22, r25
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PORT_HIGH);
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	ea 58       	subi	r30, 0x8A	; 138
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	01 90       	ld	r0, Z+
    2ba8:	f0 81       	ld	r31, Z
    2baa:	e0 2d       	mov	r30, r0
    2bac:	80 81       	ld	r24, Z
    2bae:	fe 01       	movw	r30, r28
    2bb0:	ea 58       	subi	r30, 0x8A	; 138
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	01 90       	ld	r0, Z+
    2bb6:	f0 81       	ld	r31, Z
    2bb8:	e0 2d       	mov	r30, r0
    2bba:	92 81       	ldd	r25, Z+2	; 0x02
    2bbc:	69 2f       	mov	r22, r25
    2bbe:	4f ef       	ldi	r20, 0xFF	; 255
    2bc0:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PORT_HIGH);
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	ea 58       	subi	r30, 0x8A	; 138
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	01 90       	ld	r0, Z+
    2bcc:	f0 81       	ld	r31, Z
    2bce:	e0 2d       	mov	r30, r0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	ea 58       	subi	r30, 0x8A	; 138
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	01 90       	ld	r0, Z+
    2bda:	f0 81       	ld	r31, Z
    2bdc:	e0 2d       	mov	r30, r0
    2bde:	93 81       	ldd	r25, Z+3	; 0x03
    2be0:	69 2f       	mov	r22, r25
    2be2:	4f ef       	ldi	r20, 0xFF	; 255
    2be4:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PORT_HIGH);
    2be8:	fe 01       	movw	r30, r28
    2bea:	ea 58       	subi	r30, 0x8A	; 138
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	01 90       	ld	r0, Z+
    2bf0:	f0 81       	ld	r31, Z
    2bf2:	e0 2d       	mov	r30, r0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ea 58       	subi	r30, 0x8A	; 138
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	01 90       	ld	r0, Z+
    2bfe:	f0 81       	ld	r31, Z
    2c00:	e0 2d       	mov	r30, r0
    2c02:	94 81       	ldd	r25, Z+4	; 0x04
    2c04:	69 2f       	mov	r22, r25
    2c06:	4f ef       	ldi	r20, 0xFF	; 255
    2c08:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	a0 ea       	ldi	r26, 0xA0	; 160
    2c12:	b0 e4       	ldi	r27, 0x40	; 64
    2c14:	8b 87       	std	Y+11, r24	; 0x0b
    2c16:	9c 87       	std	Y+12, r25	; 0x0c
    2c18:	ad 87       	std	Y+13, r26	; 0x0d
    2c1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	4a e7       	ldi	r20, 0x7A	; 122
    2c2a:	55 e4       	ldi	r21, 0x45	; 69
    2c2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	8f 83       	std	Y+7, r24	; 0x07
    2c36:	98 87       	std	Y+8, r25	; 0x08
    2c38:	a9 87       	std	Y+9, r26	; 0x09
    2c3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3e:	78 85       	ldd	r23, Y+8	; 0x08
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e8       	ldi	r20, 0x80	; 128
    2c4a:	5f e3       	ldi	r21, 0x3F	; 63
    2c4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c50:	88 23       	and	r24, r24
    2c52:	2c f4       	brge	.+10     	; 0x2c5e <Stepper_u8RotateAngle+0xe62>
		__ticks = 1;
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	9e 83       	std	Y+6, r25	; 0x06
    2c5a:	8d 83       	std	Y+5, r24	; 0x05
    2c5c:	3f c0       	rjmp	.+126    	; 0x2cdc <Stepper_u8RotateAngle+0xee0>
	else if (__tmp > 65535)
    2c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c60:	78 85       	ldd	r23, Y+8	; 0x08
    2c62:	89 85       	ldd	r24, Y+9	; 0x09
    2c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	3f ef       	ldi	r19, 0xFF	; 255
    2c6a:	4f e7       	ldi	r20, 0x7F	; 127
    2c6c:	57 e4       	ldi	r21, 0x47	; 71
    2c6e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c72:	18 16       	cp	r1, r24
    2c74:	4c f5       	brge	.+82     	; 0x2cc8 <Stepper_u8RotateAngle+0xecc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e2       	ldi	r20, 0x20	; 32
    2c84:	51 e4       	ldi	r21, 0x41	; 65
    2c86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	bc 01       	movw	r22, r24
    2c90:	cd 01       	movw	r24, r26
    2c92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
    2c9e:	0f c0       	rjmp	.+30     	; 0x2cbe <Stepper_u8RotateAngle+0xec2>
    2ca0:	80 e9       	ldi	r24, 0x90	; 144
    2ca2:	91 e0       	ldi	r25, 0x01	; 1
    2ca4:	9c 83       	std	Y+4, r25	; 0x04
    2ca6:	8b 83       	std	Y+3, r24	; 0x03
    2ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    2caa:	9c 81       	ldd	r25, Y+4	; 0x04
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	f1 f7       	brne	.-4      	; 0x2cac <Stepper_u8RotateAngle+0xeb0>
    2cb0:	9c 83       	std	Y+4, r25	; 0x04
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	9e 83       	std	Y+6, r25	; 0x06
    2cbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	69 f7       	brne	.-38     	; 0x2ca0 <Stepper_u8RotateAngle+0xea4>
    2cc6:	14 c0       	rjmp	.+40     	; 0x2cf0 <Stepper_u8RotateAngle+0xef4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cca:	78 85       	ldd	r23, Y+8	; 0x08
    2ccc:	89 85       	ldd	r24, Y+9	; 0x09
    2cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	9a 83       	std	Y+2, r25	; 0x02
    2ce2:	89 83       	std	Y+1, r24	; 0x01
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <Stepper_u8RotateAngle+0xeec>
    2cec:	9a 83       	std	Y+2, r25	; 0x02
    2cee:	89 83       	std	Y+1, r24	; 0x01
		}

		else if(ROTAT_CW)
		{
			// Clockwise rotation:Blue > Pink  > Yellow > Orange
			for(Local_u16LoopCounter = 0 ; Local_u16LoopCounter < Local_u16Steps ; Local_u16LoopCounter++)
    2cf0:	de 01       	movw	r26, r28
    2cf2:	af 58       	subi	r26, 0x8F	; 143
    2cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	ef 58       	subi	r30, 0x8F	; 143
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	80 81       	ld	r24, Z
    2cfe:	91 81       	ldd	r25, Z+1	; 0x01
    2d00:	01 96       	adiw	r24, 0x01	; 1
    2d02:	8d 93       	st	X+, r24
    2d04:	9c 93       	st	X, r25
    2d06:	fe 01       	movw	r30, r28
    2d08:	ef 58       	subi	r30, 0x8F	; 143
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	de 01       	movw	r26, r28
    2d0e:	ad 58       	subi	r26, 0x8D	; 141
    2d10:	bf 4f       	sbci	r27, 0xFF	; 255
    2d12:	20 81       	ld	r18, Z
    2d14:	31 81       	ldd	r19, Z+1	; 0x01
    2d16:	8d 91       	ld	r24, X+
    2d18:	9c 91       	ld	r25, X
    2d1a:	11 97       	sbiw	r26, 0x01	; 1
    2d1c:	28 17       	cp	r18, r24
    2d1e:	39 07       	cpc	r19, r25
    2d20:	08 f4       	brcc	.+2      	; 0x2d24 <Stepper_u8RotateAngle+0xf28>
    2d22:	d0 cc       	rjmp	.-1632   	; 0x26c4 <Stepper_u8RotateAngle+0x8c8>
    2d24:	05 c0       	rjmp	.+10     	; 0x2d30 <Stepper_u8RotateAngle+0xf34>


	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR ;// Set error state to NULL pointer error
    2d26:	fe 01       	movw	r30, r28
    2d28:	eb 58       	subi	r30, 0x8B	; 139
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	80 83       	st	Z, r24
	}
	return Local_u8ErrorState ;// Return the error state
    2d30:	fe 01       	movw	r30, r28
    2d32:	eb 58       	subi	r30, 0x8B	; 139
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_LOW);
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_LOW);
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_LOW);
	_delay_ms(5);
	//	stepper_motor_stop(&ST_Motor1);
}
    2d38:	c6 58       	subi	r28, 0x86	; 134
    2d3a:	df 4f       	sbci	r29, 0xFF	; 255
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	08 95       	ret

00002d50 <stepper_motor_stop>:

void stepper_motor_stop(const SteperConfig_t* Copy_stpStepper)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	60 97       	sbiw	r28, 0x10	; 16
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	98 8b       	std	Y+16, r25	; 0x10
    2d66:	8f 87       	std	Y+15, r24	; 0x0f

	// Stepper Motor OFF
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_LOW);
    2d68:	ef 85       	ldd	r30, Y+15	; 0x0f
    2d6a:	f8 89       	ldd	r31, Y+16	; 0x10
    2d6c:	80 81       	ld	r24, Z
    2d6e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2d70:	f8 89       	ldd	r31, Y+16	; 0x10
    2d72:	91 81       	ldd	r25, Z+1	; 0x01
    2d74:	69 2f       	mov	r22, r25
    2d76:	40 e0       	ldi	r20, 0x00	; 0
    2d78:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_LOW);
    2d7c:	ef 85       	ldd	r30, Y+15	; 0x0f
    2d7e:	f8 89       	ldd	r31, Y+16	; 0x10
    2d80:	80 81       	ld	r24, Z
    2d82:	ef 85       	ldd	r30, Y+15	; 0x0f
    2d84:	f8 89       	ldd	r31, Y+16	; 0x10
    2d86:	92 81       	ldd	r25, Z+2	; 0x02
    2d88:	69 2f       	mov	r22, r25
    2d8a:	40 e0       	ldi	r20, 0x00	; 0
    2d8c:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_LOW);
    2d90:	ef 85       	ldd	r30, Y+15	; 0x0f
    2d92:	f8 89       	ldd	r31, Y+16	; 0x10
    2d94:	80 81       	ld	r24, Z
    2d96:	ef 85       	ldd	r30, Y+15	; 0x0f
    2d98:	f8 89       	ldd	r31, Y+16	; 0x10
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	69 2f       	mov	r22, r25
    2d9e:	40 e0       	ldi	r20, 0x00	; 0
    2da0:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_LOW);
    2da4:	ef 85       	ldd	r30, Y+15	; 0x0f
    2da6:	f8 89       	ldd	r31, Y+16	; 0x10
    2da8:	80 81       	ld	r24, Z
    2daa:	ef 85       	ldd	r30, Y+15	; 0x0f
    2dac:	f8 89       	ldd	r31, Y+16	; 0x10
    2dae:	94 81       	ldd	r25, Z+4	; 0x04
    2db0:	69 2f       	mov	r22, r25
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	0e 94 a5 0a 	call	0x154a	; 0x154a <DIO_u8SetPinValue>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	a0 ea       	ldi	r26, 0xA0	; 160
    2dbe:	b0 e4       	ldi	r27, 0x40	; 64
    2dc0:	8b 87       	std	Y+11, r24	; 0x0b
    2dc2:	9c 87       	std	Y+12, r25	; 0x0c
    2dc4:	ad 87       	std	Y+13, r26	; 0x0d
    2dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	4a e7       	ldi	r20, 0x7A	; 122
    2dd6:	55 e4       	ldi	r21, 0x45	; 69
    2dd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8f 83       	std	Y+7, r24	; 0x07
    2de2:	98 87       	std	Y+8, r25	; 0x08
    2de4:	a9 87       	std	Y+9, r26	; 0x09
    2de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	40 e8       	ldi	r20, 0x80	; 128
    2df6:	5f e3       	ldi	r21, 0x3F	; 63
    2df8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2dfc:	88 23       	and	r24, r24
    2dfe:	2c f4       	brge	.+10     	; 0x2e0a <stepper_motor_stop+0xba>
		__ticks = 1;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	3f c0       	rjmp	.+126    	; 0x2e88 <stepper_motor_stop+0x138>
	else if (__tmp > 65535)
    2e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0c:	78 85       	ldd	r23, Y+8	; 0x08
    2e0e:	89 85       	ldd	r24, Y+9	; 0x09
    2e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	57 e4       	ldi	r21, 0x47	; 71
    2e1a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	4c f5       	brge	.+82     	; 0x2e74 <stepper_motor_stop+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e2       	ldi	r20, 0x20	; 32
    2e30:	51 e4       	ldi	r21, 0x41	; 65
    2e32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9e 83       	std	Y+6, r25	; 0x06
    2e48:	8d 83       	std	Y+5, r24	; 0x05
    2e4a:	0f c0       	rjmp	.+30     	; 0x2e6a <stepper_motor_stop+0x11a>
    2e4c:	80 e9       	ldi	r24, 0x90	; 144
    2e4e:	91 e0       	ldi	r25, 0x01	; 1
    2e50:	9c 83       	std	Y+4, r25	; 0x04
    2e52:	8b 83       	std	Y+3, r24	; 0x03
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <stepper_motor_stop+0x108>
    2e5c:	9c 83       	std	Y+4, r25	; 0x04
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e60:	8d 81       	ldd	r24, Y+5	; 0x05
    2e62:	9e 81       	ldd	r25, Y+6	; 0x06
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	69 f7       	brne	.-38     	; 0x2e4c <stepper_motor_stop+0xfc>
    2e72:	14 c0       	rjmp	.+40     	; 0x2e9c <stepper_motor_stop+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e74:	6f 81       	ldd	r22, Y+7	; 0x07
    2e76:	78 85       	ldd	r23, Y+8	; 0x08
    2e78:	89 85       	ldd	r24, Y+9	; 0x09
    2e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	9a 83       	std	Y+2, r25	; 0x02
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	9a 81       	ldd	r25, Y+2	; 0x02
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <stepper_motor_stop+0x144>
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);



}
    2e9c:	60 96       	adiw	r28, 0x10	; 16
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <Hamoksha>:
		0b00000001,0};



void Hamoksha(void)
{
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	2f 97       	sbiw	r28, 0x0f	; 15
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidGoToXY(0,0);
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidGoToXY>
	//CLCD_u8SendString("Welcome to Motor DashBoard ");
	//_delay_ms(20000);
	for(uint8 i=0;i<16;i++)
    2eca:	1f 86       	std	Y+15, r1	; 0x0f
    2ecc:	8c c0       	rjmp	.+280    	; 0x2fe6 <Hamoksha+0x138>
	{
		CLCD_u8SendString("Welcome to Motor ");
    2ece:	80 e6       	ldi	r24, 0x60	; 96
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
		CLCD_u8SendSpecialCharacter(0,Local_u8Hamoksha,i,1);
    2ed6:	20 ee       	ldi	r18, 0xE0	; 224
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	b9 01       	movw	r22, r18
    2ede:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ee0:	21 e0       	ldi	r18, 0x01	; 1
    2ee2:	0e 94 08 08 	call	0x1010	; 0x1010 <CLCD_u8SendSpecialCharacter>
		CLCD_u8SendSpecialCharacter(0,Local_u8HamokshaRUN,i,1);
    2ee6:	29 ee       	ldi	r18, 0xE9	; 233
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	b9 01       	movw	r22, r18
    2eee:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ef0:	21 e0       	ldi	r18, 0x01	; 1
    2ef2:	0e 94 08 08 	call	0x1010	; 0x1010 <CLCD_u8SendSpecialCharacter>
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	a8 ec       	ldi	r26, 0xC8	; 200
    2efc:	b2 e4       	ldi	r27, 0x42	; 66
    2efe:	8b 87       	std	Y+11, r24	; 0x0b
    2f00:	9c 87       	std	Y+12, r25	; 0x0c
    2f02:	ad 87       	std	Y+13, r26	; 0x0d
    2f04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	4a e7       	ldi	r20, 0x7A	; 122
    2f14:	55 e4       	ldi	r21, 0x45	; 69
    2f16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	8f 83       	std	Y+7, r24	; 0x07
    2f20:	98 87       	std	Y+8, r25	; 0x08
    2f22:	a9 87       	std	Y+9, r26	; 0x09
    2f24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f26:	6f 81       	ldd	r22, Y+7	; 0x07
    2f28:	78 85       	ldd	r23, Y+8	; 0x08
    2f2a:	89 85       	ldd	r24, Y+9	; 0x09
    2f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e8       	ldi	r20, 0x80	; 128
    2f34:	5f e3       	ldi	r21, 0x3F	; 63
    2f36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f3a:	88 23       	and	r24, r24
    2f3c:	2c f4       	brge	.+10     	; 0x2f48 <Hamoksha+0x9a>
		__ticks = 1;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	9e 83       	std	Y+6, r25	; 0x06
    2f44:	8d 83       	std	Y+5, r24	; 0x05
    2f46:	3f c0       	rjmp	.+126    	; 0x2fc6 <Hamoksha+0x118>
	else if (__tmp > 65535)
    2f48:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4a:	78 85       	ldd	r23, Y+8	; 0x08
    2f4c:	89 85       	ldd	r24, Y+9	; 0x09
    2f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	3f ef       	ldi	r19, 0xFF	; 255
    2f54:	4f e7       	ldi	r20, 0x7F	; 127
    2f56:	57 e4       	ldi	r21, 0x47	; 71
    2f58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f5c:	18 16       	cp	r1, r24
    2f5e:	4c f5       	brge	.+82     	; 0x2fb2 <Hamoksha+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e2       	ldi	r20, 0x20	; 32
    2f6e:	51 e4       	ldi	r21, 0x41	; 65
    2f70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	bc 01       	movw	r22, r24
    2f7a:	cd 01       	movw	r24, r26
    2f7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	9e 83       	std	Y+6, r25	; 0x06
    2f86:	8d 83       	std	Y+5, r24	; 0x05
    2f88:	0f c0       	rjmp	.+30     	; 0x2fa8 <Hamoksha+0xfa>
    2f8a:	80 e9       	ldi	r24, 0x90	; 144
    2f8c:	91 e0       	ldi	r25, 0x01	; 1
    2f8e:	9c 83       	std	Y+4, r25	; 0x04
    2f90:	8b 83       	std	Y+3, r24	; 0x03
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	9c 81       	ldd	r25, Y+4	; 0x04
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <Hamoksha+0xe8>
    2f9a:	9c 83       	std	Y+4, r25	; 0x04
    2f9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	9e 83       	std	Y+6, r25	; 0x06
    2fa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	69 f7       	brne	.-38     	; 0x2f8a <Hamoksha+0xdc>
    2fb0:	14 c0       	rjmp	.+40     	; 0x2fda <Hamoksha+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb4:	78 85       	ldd	r23, Y+8	; 0x08
    2fb6:	89 85       	ldd	r24, Y+9	; 0x09
    2fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	9e 83       	std	Y+6, r25	; 0x06
    2fc4:	8d 83       	std	Y+5, r24	; 0x05
    2fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fca:	9a 83       	std	Y+2, r25	; 0x02
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <Hamoksha+0x124>
    2fd6:	9a 83       	std	Y+2, r25	; 0x02
    2fd8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		CLCD_voidSendCmd(1);
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
void Hamoksha(void)
{
	CLCD_voidGoToXY(0,0);
	//CLCD_u8SendString("Welcome to Motor DashBoard ");
	//_delay_ms(20000);
	for(uint8 i=0;i<16;i++)
    2fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fe2:	8f 5f       	subi	r24, 0xFF	; 255
    2fe4:	8f 87       	std	Y+15, r24	; 0x0f
    2fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fe8:	80 31       	cpi	r24, 0x10	; 16
    2fea:	08 f4       	brcc	.+2      	; 0x2fee <Hamoksha+0x140>
    2fec:	70 cf       	rjmp	.-288    	; 0x2ece <Hamoksha+0x20>
		_delay_ms(100);
		CLCD_voidSendCmd(1);

	}

}
    2fee:	2f 96       	adiw	r28, 0x0f	; 15
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	de bf       	out	0x3e, r29	; 62
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	cd bf       	out	0x3d, r28	; 61
    2ffa:	cf 91       	pop	r28
    2ffc:	df 91       	pop	r29
    2ffe:	08 95       	ret

00003000 <main>:
		.ORANGE_PIN =DIO_u8PIN3
};


void main(void)
{
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	ce 55       	subi	r28, 0x5E	; 94
    300e:	d0 40       	sbci	r29, 0x00	; 0
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	cd bf       	out	0x3d, r28	; 61


	uint8 Localu8KeyPadKey;
	PORT_voidInit();
    301a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <PORT_voidInit>
	CLCD_voidInit();
    301e:	0e 94 90 06 	call	0xd20	; 0xd20 <CLCD_voidInit>
	CLCD_voidGoToXY(0,0);
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidGoToXY>
	CLCD_u8SendString("Dashboard Motor");
    302a:	82 e7       	ldi	r24, 0x72	; 114
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    3032:	fe 01       	movw	r30, r28
    3034:	ef 5a       	subi	r30, 0xAF	; 175
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	aa ef       	ldi	r26, 0xFA	; 250
    303e:	b4 e4       	ldi	r27, 0x44	; 68
    3040:	80 83       	st	Z, r24
    3042:	91 83       	std	Z+1, r25	; 0x01
    3044:	a2 83       	std	Z+2, r26	; 0x02
    3046:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	8e 01       	movw	r16, r28
    304a:	03 5b       	subi	r16, 0xB3	; 179
    304c:	1f 4f       	sbci	r17, 0xFF	; 255
    304e:	fe 01       	movw	r30, r28
    3050:	ef 5a       	subi	r30, 0xAF	; 175
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	60 81       	ld	r22, Z
    3056:	71 81       	ldd	r23, Z+1	; 0x01
    3058:	82 81       	ldd	r24, Z+2	; 0x02
    305a:	93 81       	ldd	r25, Z+3	; 0x03
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	4a e7       	ldi	r20, 0x7A	; 122
    3062:	55 e4       	ldi	r21, 0x45	; 69
    3064:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	f8 01       	movw	r30, r16
    306e:	80 83       	st	Z, r24
    3070:	91 83       	std	Z+1, r25	; 0x01
    3072:	a2 83       	std	Z+2, r26	; 0x02
    3074:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3076:	fe 01       	movw	r30, r28
    3078:	e3 5b       	subi	r30, 0xB3	; 179
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	60 81       	ld	r22, Z
    307e:	71 81       	ldd	r23, Z+1	; 0x01
    3080:	82 81       	ldd	r24, Z+2	; 0x02
    3082:	93 81       	ldd	r25, Z+3	; 0x03
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e8       	ldi	r20, 0x80	; 128
    308a:	5f e3       	ldi	r21, 0x3F	; 63
    308c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3090:	88 23       	and	r24, r24
    3092:	44 f4       	brge	.+16     	; 0x30a4 <main+0xa4>
		__ticks = 1;
    3094:	fe 01       	movw	r30, r28
    3096:	e5 5b       	subi	r30, 0xB5	; 181
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	91 83       	std	Z+1, r25	; 0x01
    30a0:	80 83       	st	Z, r24
    30a2:	64 c0       	rjmp	.+200    	; 0x316c <main+0x16c>
	else if (__tmp > 65535)
    30a4:	fe 01       	movw	r30, r28
    30a6:	e3 5b       	subi	r30, 0xB3	; 179
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	60 81       	ld	r22, Z
    30ac:	71 81       	ldd	r23, Z+1	; 0x01
    30ae:	82 81       	ldd	r24, Z+2	; 0x02
    30b0:	93 81       	ldd	r25, Z+3	; 0x03
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	3f ef       	ldi	r19, 0xFF	; 255
    30b6:	4f e7       	ldi	r20, 0x7F	; 127
    30b8:	57 e4       	ldi	r21, 0x47	; 71
    30ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    30be:	18 16       	cp	r1, r24
    30c0:	0c f0       	brlt	.+2      	; 0x30c4 <main+0xc4>
    30c2:	43 c0       	rjmp	.+134    	; 0x314a <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c4:	fe 01       	movw	r30, r28
    30c6:	ef 5a       	subi	r30, 0xAF	; 175
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	60 81       	ld	r22, Z
    30cc:	71 81       	ldd	r23, Z+1	; 0x01
    30ce:	82 81       	ldd	r24, Z+2	; 0x02
    30d0:	93 81       	ldd	r25, Z+3	; 0x03
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e2       	ldi	r20, 0x20	; 32
    30d8:	51 e4       	ldi	r21, 0x41	; 65
    30da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	8e 01       	movw	r16, r28
    30e4:	05 5b       	subi	r16, 0xB5	; 181
    30e6:	1f 4f       	sbci	r17, 0xFF	; 255
    30e8:	bc 01       	movw	r22, r24
    30ea:	cd 01       	movw	r24, r26
    30ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	f8 01       	movw	r30, r16
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	80 83       	st	Z, r24
    30fa:	1f c0       	rjmp	.+62     	; 0x313a <main+0x13a>
    30fc:	fe 01       	movw	r30, r28
    30fe:	e7 5b       	subi	r30, 0xB7	; 183
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	80 e9       	ldi	r24, 0x90	; 144
    3104:	91 e0       	ldi	r25, 0x01	; 1
    3106:	91 83       	std	Z+1, r25	; 0x01
    3108:	80 83       	st	Z, r24
    310a:	fe 01       	movw	r30, r28
    310c:	e7 5b       	subi	r30, 0xB7	; 183
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	80 81       	ld	r24, Z
    3112:	91 81       	ldd	r25, Z+1	; 0x01
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <main+0x114>
    3118:	fe 01       	movw	r30, r28
    311a:	e7 5b       	subi	r30, 0xB7	; 183
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	91 83       	std	Z+1, r25	; 0x01
    3120:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3122:	de 01       	movw	r26, r28
    3124:	a5 5b       	subi	r26, 0xB5	; 181
    3126:	bf 4f       	sbci	r27, 0xFF	; 255
    3128:	fe 01       	movw	r30, r28
    312a:	e5 5b       	subi	r30, 0xB5	; 181
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	80 81       	ld	r24, Z
    3130:	91 81       	ldd	r25, Z+1	; 0x01
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	11 96       	adiw	r26, 0x01	; 1
    3136:	9c 93       	st	X, r25
    3138:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313a:	fe 01       	movw	r30, r28
    313c:	e5 5b       	subi	r30, 0xB5	; 181
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	80 81       	ld	r24, Z
    3142:	91 81       	ldd	r25, Z+1	; 0x01
    3144:	00 97       	sbiw	r24, 0x00	; 0
    3146:	d1 f6       	brne	.-76     	; 0x30fc <main+0xfc>
    3148:	27 c0       	rjmp	.+78     	; 0x3198 <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314a:	8e 01       	movw	r16, r28
    314c:	05 5b       	subi	r16, 0xB5	; 181
    314e:	1f 4f       	sbci	r17, 0xFF	; 255
    3150:	fe 01       	movw	r30, r28
    3152:	e3 5b       	subi	r30, 0xB3	; 179
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	60 81       	ld	r22, Z
    3158:	71 81       	ldd	r23, Z+1	; 0x01
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	93 81       	ldd	r25, Z+3	; 0x03
    315e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	f8 01       	movw	r30, r16
    3168:	91 83       	std	Z+1, r25	; 0x01
    316a:	80 83       	st	Z, r24
    316c:	de 01       	movw	r26, r28
    316e:	a9 5b       	subi	r26, 0xB9	; 185
    3170:	bf 4f       	sbci	r27, 0xFF	; 255
    3172:	fe 01       	movw	r30, r28
    3174:	e5 5b       	subi	r30, 0xB5	; 181
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 81       	ld	r24, Z
    317a:	91 81       	ldd	r25, Z+1	; 0x01
    317c:	8d 93       	st	X+, r24
    317e:	9c 93       	st	X, r25
    3180:	fe 01       	movw	r30, r28
    3182:	e9 5b       	subi	r30, 0xB9	; 185
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	80 81       	ld	r24, Z
    3188:	91 81       	ldd	r25, Z+1	; 0x01
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	f1 f7       	brne	.-4      	; 0x318a <main+0x18a>
    318e:	fe 01       	movw	r30, r28
    3190:	e9 5b       	subi	r30, 0xB9	; 185
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	91 83       	std	Z+1, r25	; 0x01
    3196:	80 83       	st	Z, r24
	_delay_ms(2000);
	CLCD_voidSendCmd(1);
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
	Hamoksha();
    319e:	0e 94 57 17 	call	0x2eae	; 0x2eae <Hamoksha>
	CLCD_voidSendCmd(1);
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
	uint8 Local_u8Reading2;
	uint8 Local_u8Reading3;
	 */
	while(1)
	{
		CLCD_voidGoToXY(0,0);
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	60 e0       	ldi	r22, 0x00	; 0
    31ac:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidGoToXY>
		CLCD_u8SendString("1-DC Motor.");
    31b0:	82 e8       	ldi	r24, 0x82	; 130
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
		CLCD_voidGoToXY(0,1);
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	61 e0       	ldi	r22, 0x01	; 1
    31bc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidGoToXY>
		CLCD_u8SendString("2-stepper Motor.");
    31c0:	8e e8       	ldi	r24, 0x8E	; 142
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    31c8:	fe 01       	movw	r30, r28
    31ca:	ed 5b       	subi	r30, 0xBD	; 189
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	aa e7       	ldi	r26, 0x7A	; 122
    31d4:	b4 e4       	ldi	r27, 0x44	; 68
    31d6:	80 83       	st	Z, r24
    31d8:	91 83       	std	Z+1, r25	; 0x01
    31da:	a2 83       	std	Z+2, r26	; 0x02
    31dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31de:	8e 01       	movw	r16, r28
    31e0:	01 5c       	subi	r16, 0xC1	; 193
    31e2:	1f 4f       	sbci	r17, 0xFF	; 255
    31e4:	fe 01       	movw	r30, r28
    31e6:	ed 5b       	subi	r30, 0xBD	; 189
    31e8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ea:	60 81       	ld	r22, Z
    31ec:	71 81       	ldd	r23, Z+1	; 0x01
    31ee:	82 81       	ldd	r24, Z+2	; 0x02
    31f0:	93 81       	ldd	r25, Z+3	; 0x03
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	4a e7       	ldi	r20, 0x7A	; 122
    31f8:	55 e4       	ldi	r21, 0x45	; 69
    31fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	f8 01       	movw	r30, r16
    3204:	80 83       	st	Z, r24
    3206:	91 83       	std	Z+1, r25	; 0x01
    3208:	a2 83       	std	Z+2, r26	; 0x02
    320a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    320c:	fe 01       	movw	r30, r28
    320e:	ff 96       	adiw	r30, 0x3f	; 63
    3210:	60 81       	ld	r22, Z
    3212:	71 81       	ldd	r23, Z+1	; 0x01
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e8       	ldi	r20, 0x80	; 128
    321e:	5f e3       	ldi	r21, 0x3F	; 63
    3220:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3224:	88 23       	and	r24, r24
    3226:	2c f4       	brge	.+10     	; 0x3232 <main+0x232>
		__ticks = 1;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	9e af       	std	Y+62, r25	; 0x3e
    322e:	8d af       	std	Y+61, r24	; 0x3d
    3230:	46 c0       	rjmp	.+140    	; 0x32be <main+0x2be>
	else if (__tmp > 65535)
    3232:	fe 01       	movw	r30, r28
    3234:	ff 96       	adiw	r30, 0x3f	; 63
    3236:	60 81       	ld	r22, Z
    3238:	71 81       	ldd	r23, Z+1	; 0x01
    323a:	82 81       	ldd	r24, Z+2	; 0x02
    323c:	93 81       	ldd	r25, Z+3	; 0x03
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	3f ef       	ldi	r19, 0xFF	; 255
    3242:	4f e7       	ldi	r20, 0x7F	; 127
    3244:	57 e4       	ldi	r21, 0x47	; 71
    3246:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    324a:	18 16       	cp	r1, r24
    324c:	64 f5       	brge	.+88     	; 0x32a6 <main+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324e:	fe 01       	movw	r30, r28
    3250:	ed 5b       	subi	r30, 0xBD	; 189
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	60 81       	ld	r22, Z
    3256:	71 81       	ldd	r23, Z+1	; 0x01
    3258:	82 81       	ldd	r24, Z+2	; 0x02
    325a:	93 81       	ldd	r25, Z+3	; 0x03
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e2       	ldi	r20, 0x20	; 32
    3262:	51 e4       	ldi	r21, 0x41	; 65
    3264:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	9e af       	std	Y+62, r25	; 0x3e
    327a:	8d af       	std	Y+61, r24	; 0x3d
    327c:	0f c0       	rjmp	.+30     	; 0x329c <main+0x29c>
    327e:	80 e9       	ldi	r24, 0x90	; 144
    3280:	91 e0       	ldi	r25, 0x01	; 1
    3282:	9c af       	std	Y+60, r25	; 0x3c
    3284:	8b af       	std	Y+59, r24	; 0x3b
    3286:	8b ad       	ldd	r24, Y+59	; 0x3b
    3288:	9c ad       	ldd	r25, Y+60	; 0x3c
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <main+0x28a>
    328e:	9c af       	std	Y+60, r25	; 0x3c
    3290:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3292:	8d ad       	ldd	r24, Y+61	; 0x3d
    3294:	9e ad       	ldd	r25, Y+62	; 0x3e
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	9e af       	std	Y+62, r25	; 0x3e
    329a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329c:	8d ad       	ldd	r24, Y+61	; 0x3d
    329e:	9e ad       	ldd	r25, Y+62	; 0x3e
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	69 f7       	brne	.-38     	; 0x327e <main+0x27e>
    32a4:	16 c0       	rjmp	.+44     	; 0x32d2 <main+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a6:	fe 01       	movw	r30, r28
    32a8:	ff 96       	adiw	r30, 0x3f	; 63
    32aa:	60 81       	ld	r22, Z
    32ac:	71 81       	ldd	r23, Z+1	; 0x01
    32ae:	82 81       	ldd	r24, Z+2	; 0x02
    32b0:	93 81       	ldd	r25, Z+3	; 0x03
    32b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	9e af       	std	Y+62, r25	; 0x3e
    32bc:	8d af       	std	Y+61, r24	; 0x3d
    32be:	8d ad       	ldd	r24, Y+61	; 0x3d
    32c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    32c2:	9a af       	std	Y+58, r25	; 0x3a
    32c4:	89 af       	std	Y+57, r24	; 0x39
    32c6:	89 ad       	ldd	r24, Y+57	; 0x39
    32c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	f1 f7       	brne	.-4      	; 0x32ca <main+0x2ca>
    32ce:	9a af       	std	Y+58, r25	; 0x3a
    32d0:	89 af       	std	Y+57, r24	; 0x39
		DIO_u8ReadPinValue(	DIO_u8PORTD,DIO_u8PIN4,&Local_u8Reading3);
		 */
		do
		{

			Localu8KeyPadKey= KPD_u8GetPressedKey();
    32d2:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <KPD_u8GetPressedKey>
    32d6:	fe 01       	movw	r30, r28
    32d8:	e2 5a       	subi	r30, 0xA2	; 162
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	80 83       	st	Z, r24

		}
		while(Localu8KeyPadKey == 0xff);
    32de:	fe 01       	movw	r30, r28
    32e0:	e2 5a       	subi	r30, 0xA2	; 162
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	80 81       	ld	r24, Z
    32e6:	8f 3f       	cpi	r24, 0xFF	; 255
    32e8:	a1 f3       	breq	.-24     	; 0x32d2 <main+0x2d2>
		uint8 Key= Localu8KeyPadKey;
    32ea:	de 01       	movw	r26, r28
    32ec:	a3 5a       	subi	r26, 0xA3	; 163
    32ee:	bf 4f       	sbci	r27, 0xFF	; 255
    32f0:	fe 01       	movw	r30, r28
    32f2:	e2 5a       	subi	r30, 0xA2	; 162
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	80 81       	ld	r24, Z
    32f8:	8c 93       	st	X, r24
		if(Key>=1&&Key<=2)
    32fa:	fe 01       	movw	r30, r28
    32fc:	e3 5a       	subi	r30, 0xA3	; 163
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	80 81       	ld	r24, Z
    3302:	88 23       	and	r24, r24
    3304:	09 f4       	brne	.+2      	; 0x3308 <main+0x308>
    3306:	50 cf       	rjmp	.-352    	; 0x31a8 <main+0x1a8>
    3308:	fe 01       	movw	r30, r28
    330a:	e3 5a       	subi	r30, 0xA3	; 163
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 81       	ld	r24, Z
    3310:	83 30       	cpi	r24, 0x03	; 3
    3312:	08 f0       	brcs	.+2      	; 0x3316 <main+0x316>
    3314:	49 cf       	rjmp	.-366    	; 0x31a8 <main+0x1a8>
		{
			if(Key==1)
    3316:	fe 01       	movw	r30, r28
    3318:	e3 5a       	subi	r30, 0xA3	; 163
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 81       	ld	r24, Z
    331e:	81 30       	cpi	r24, 0x01	; 1
    3320:	09 f0       	breq	.+2      	; 0x3324 <main+0x324>
    3322:	9e c1       	rjmp	.+828    	; 0x3660 <main+0x660>
			{
				CLCD_voidSendCmd(1);
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
				CLCD_voidGoToXY(0,0);
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	60 e0       	ldi	r22, 0x00	; 0
    332e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidGoToXY>
				CLCD_u8SendString(" DC Motor ");
    3332:	8f e9       	ldi	r24, 0x9F	; 159
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
				CLCD_voidGoToXY(0,1);
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	61 e0       	ldi	r22, 0x01	; 1
    333e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidGoToXY>
				CLCD_u8SendString("1-RCW");
    3342:	8a ea       	ldi	r24, 0xAA	; 170
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
				CLCD_u8SendString(" 2-RCCW.");
    334a:	80 eb       	ldi	r24, 0xB0	; 176
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	a8 ec       	ldi	r26, 0xC8	; 200
    3358:	b2 e4       	ldi	r27, 0x42	; 66
    335a:	8d ab       	std	Y+53, r24	; 0x35
    335c:	9e ab       	std	Y+54, r25	; 0x36
    335e:	af ab       	std	Y+55, r26	; 0x37
    3360:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3362:	6d a9       	ldd	r22, Y+53	; 0x35
    3364:	7e a9       	ldd	r23, Y+54	; 0x36
    3366:	8f a9       	ldd	r24, Y+55	; 0x37
    3368:	98 ad       	ldd	r25, Y+56	; 0x38
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	4a e7       	ldi	r20, 0x7A	; 122
    3370:	55 e4       	ldi	r21, 0x45	; 69
    3372:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	89 ab       	std	Y+49, r24	; 0x31
    337c:	9a ab       	std	Y+50, r25	; 0x32
    337e:	ab ab       	std	Y+51, r26	; 0x33
    3380:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3382:	69 a9       	ldd	r22, Y+49	; 0x31
    3384:	7a a9       	ldd	r23, Y+50	; 0x32
    3386:	8b a9       	ldd	r24, Y+51	; 0x33
    3388:	9c a9       	ldd	r25, Y+52	; 0x34
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	40 e8       	ldi	r20, 0x80	; 128
    3390:	5f e3       	ldi	r21, 0x3F	; 63
    3392:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3396:	88 23       	and	r24, r24
    3398:	2c f4       	brge	.+10     	; 0x33a4 <main+0x3a4>
		__ticks = 1;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	98 ab       	std	Y+48, r25	; 0x30
    33a0:	8f a7       	std	Y+47, r24	; 0x2f
    33a2:	3f c0       	rjmp	.+126    	; 0x3422 <main+0x422>
	else if (__tmp > 65535)
    33a4:	69 a9       	ldd	r22, Y+49	; 0x31
    33a6:	7a a9       	ldd	r23, Y+50	; 0x32
    33a8:	8b a9       	ldd	r24, Y+51	; 0x33
    33aa:	9c a9       	ldd	r25, Y+52	; 0x34
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	3f ef       	ldi	r19, 0xFF	; 255
    33b0:	4f e7       	ldi	r20, 0x7F	; 127
    33b2:	57 e4       	ldi	r21, 0x47	; 71
    33b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    33b8:	18 16       	cp	r1, r24
    33ba:	4c f5       	brge	.+82     	; 0x340e <main+0x40e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33bc:	6d a9       	ldd	r22, Y+53	; 0x35
    33be:	7e a9       	ldd	r23, Y+54	; 0x36
    33c0:	8f a9       	ldd	r24, Y+55	; 0x37
    33c2:	98 ad       	ldd	r25, Y+56	; 0x38
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	40 e2       	ldi	r20, 0x20	; 32
    33ca:	51 e4       	ldi	r21, 0x41	; 65
    33cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	bc 01       	movw	r22, r24
    33d6:	cd 01       	movw	r24, r26
    33d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	98 ab       	std	Y+48, r25	; 0x30
    33e2:	8f a7       	std	Y+47, r24	; 0x2f
    33e4:	0f c0       	rjmp	.+30     	; 0x3404 <main+0x404>
    33e6:	80 e9       	ldi	r24, 0x90	; 144
    33e8:	91 e0       	ldi	r25, 0x01	; 1
    33ea:	9e a7       	std	Y+46, r25	; 0x2e
    33ec:	8d a7       	std	Y+45, r24	; 0x2d
    33ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    33f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	f1 f7       	brne	.-4      	; 0x33f2 <main+0x3f2>
    33f6:	9e a7       	std	Y+46, r25	; 0x2e
    33f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    33fc:	98 a9       	ldd	r25, Y+48	; 0x30
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	98 ab       	std	Y+48, r25	; 0x30
    3402:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3404:	8f a5       	ldd	r24, Y+47	; 0x2f
    3406:	98 a9       	ldd	r25, Y+48	; 0x30
    3408:	00 97       	sbiw	r24, 0x00	; 0
    340a:	69 f7       	brne	.-38     	; 0x33e6 <main+0x3e6>
    340c:	14 c0       	rjmp	.+40     	; 0x3436 <main+0x436>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340e:	69 a9       	ldd	r22, Y+49	; 0x31
    3410:	7a a9       	ldd	r23, Y+50	; 0x32
    3412:	8b a9       	ldd	r24, Y+51	; 0x33
    3414:	9c a9       	ldd	r25, Y+52	; 0x34
    3416:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	98 ab       	std	Y+48, r25	; 0x30
    3420:	8f a7       	std	Y+47, r24	; 0x2f
    3422:	8f a5       	ldd	r24, Y+47	; 0x2f
    3424:	98 a9       	ldd	r25, Y+48	; 0x30
    3426:	9c a7       	std	Y+44, r25	; 0x2c
    3428:	8b a7       	std	Y+43, r24	; 0x2b
    342a:	8b a5       	ldd	r24, Y+43	; 0x2b
    342c:	9c a5       	ldd	r25, Y+44	; 0x2c
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	f1 f7       	brne	.-4      	; 0x342e <main+0x42e>
    3432:	9c a7       	std	Y+44, r25	; 0x2c
    3434:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(100);
				do
				{
					Localu8KeyPadKey= KPD_u8GetPressedKey();
    3436:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <KPD_u8GetPressedKey>
    343a:	fe 01       	movw	r30, r28
    343c:	e2 5a       	subi	r30, 0xA2	; 162
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	80 83       	st	Z, r24
				}
				while(Localu8KeyPadKey == 0xff);
    3442:	fe 01       	movw	r30, r28
    3444:	e2 5a       	subi	r30, 0xA2	; 162
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	80 81       	ld	r24, Z
    344a:	8f 3f       	cpi	r24, 0xFF	; 255
    344c:	a1 f3       	breq	.-24     	; 0x3436 <main+0x436>
				uint8 DC_KEY =Localu8KeyPadKey;
    344e:	de 01       	movw	r26, r28
    3450:	a4 5a       	subi	r26, 0xA4	; 164
    3452:	bf 4f       	sbci	r27, 0xFF	; 255
    3454:	fe 01       	movw	r30, r28
    3456:	e2 5a       	subi	r30, 0xA2	; 162
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	80 81       	ld	r24, Z
    345c:	8c 93       	st	X, r24
				if(DC_KEY==1)
    345e:	fe 01       	movw	r30, r28
    3460:	e4 5a       	subi	r30, 0xA4	; 164
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	81 30       	cpi	r24, 0x01	; 1
    3468:	09 f0       	breq	.+2      	; 0x346c <main+0x46c>
    346a:	7a c0       	rjmp	.+244    	; 0x3560 <main+0x560>
				{
					CLCD_voidSendCmd(1);
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
					DcMotor_CW();
    3472:	0e 94 53 08 	call	0x10a6	; 0x10a6 <DcMotor_CW>
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e4       	ldi	r25, 0x40	; 64
    347a:	ac e1       	ldi	r26, 0x1C	; 28
    347c:	b5 e4       	ldi	r27, 0x45	; 69
    347e:	8f a3       	std	Y+39, r24	; 0x27
    3480:	98 a7       	std	Y+40, r25	; 0x28
    3482:	a9 a7       	std	Y+41, r26	; 0x29
    3484:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3486:	6f a1       	ldd	r22, Y+39	; 0x27
    3488:	78 a5       	ldd	r23, Y+40	; 0x28
    348a:	89 a5       	ldd	r24, Y+41	; 0x29
    348c:	9a a5       	ldd	r25, Y+42	; 0x2a
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	4a e7       	ldi	r20, 0x7A	; 122
    3494:	55 e4       	ldi	r21, 0x45	; 69
    3496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	8b a3       	std	Y+35, r24	; 0x23
    34a0:	9c a3       	std	Y+36, r25	; 0x24
    34a2:	ad a3       	std	Y+37, r26	; 0x25
    34a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34a6:	6b a1       	ldd	r22, Y+35	; 0x23
    34a8:	7c a1       	ldd	r23, Y+36	; 0x24
    34aa:	8d a1       	ldd	r24, Y+37	; 0x25
    34ac:	9e a1       	ldd	r25, Y+38	; 0x26
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e8       	ldi	r20, 0x80	; 128
    34b4:	5f e3       	ldi	r21, 0x3F	; 63
    34b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    34ba:	88 23       	and	r24, r24
    34bc:	2c f4       	brge	.+10     	; 0x34c8 <main+0x4c8>
		__ticks = 1;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	9a a3       	std	Y+34, r25	; 0x22
    34c4:	89 a3       	std	Y+33, r24	; 0x21
    34c6:	3f c0       	rjmp	.+126    	; 0x3546 <main+0x546>
	else if (__tmp > 65535)
    34c8:	6b a1       	ldd	r22, Y+35	; 0x23
    34ca:	7c a1       	ldd	r23, Y+36	; 0x24
    34cc:	8d a1       	ldd	r24, Y+37	; 0x25
    34ce:	9e a1       	ldd	r25, Y+38	; 0x26
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	3f ef       	ldi	r19, 0xFF	; 255
    34d4:	4f e7       	ldi	r20, 0x7F	; 127
    34d6:	57 e4       	ldi	r21, 0x47	; 71
    34d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    34dc:	18 16       	cp	r1, r24
    34de:	4c f5       	brge	.+82     	; 0x3532 <main+0x532>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e0:	6f a1       	ldd	r22, Y+39	; 0x27
    34e2:	78 a5       	ldd	r23, Y+40	; 0x28
    34e4:	89 a5       	ldd	r24, Y+41	; 0x29
    34e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	40 e2       	ldi	r20, 0x20	; 32
    34ee:	51 e4       	ldi	r21, 0x41	; 65
    34f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	9a a3       	std	Y+34, r25	; 0x22
    3506:	89 a3       	std	Y+33, r24	; 0x21
    3508:	0f c0       	rjmp	.+30     	; 0x3528 <main+0x528>
    350a:	80 e9       	ldi	r24, 0x90	; 144
    350c:	91 e0       	ldi	r25, 0x01	; 1
    350e:	98 a3       	std	Y+32, r25	; 0x20
    3510:	8f 8f       	std	Y+31, r24	; 0x1f
    3512:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3514:	98 a1       	ldd	r25, Y+32	; 0x20
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <main+0x516>
    351a:	98 a3       	std	Y+32, r25	; 0x20
    351c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351e:	89 a1       	ldd	r24, Y+33	; 0x21
    3520:	9a a1       	ldd	r25, Y+34	; 0x22
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	9a a3       	std	Y+34, r25	; 0x22
    3526:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3528:	89 a1       	ldd	r24, Y+33	; 0x21
    352a:	9a a1       	ldd	r25, Y+34	; 0x22
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	69 f7       	brne	.-38     	; 0x350a <main+0x50a>
    3530:	14 c0       	rjmp	.+40     	; 0x355a <main+0x55a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3532:	6b a1       	ldd	r22, Y+35	; 0x23
    3534:	7c a1       	ldd	r23, Y+36	; 0x24
    3536:	8d a1       	ldd	r24, Y+37	; 0x25
    3538:	9e a1       	ldd	r25, Y+38	; 0x26
    353a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	9a a3       	std	Y+34, r25	; 0x22
    3544:	89 a3       	std	Y+33, r24	; 0x21
    3546:	89 a1       	ldd	r24, Y+33	; 0x21
    3548:	9a a1       	ldd	r25, Y+34	; 0x22
    354a:	9e 8f       	std	Y+30, r25	; 0x1e
    354c:	8d 8f       	std	Y+29, r24	; 0x1d
    354e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3550:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <main+0x552>
    3556:	9e 8f       	std	Y+30, r25	; 0x1e
    3558:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(2500);
					DcMotor_Stop();
    355a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DcMotor_Stop>
    355e:	80 c0       	rjmp	.+256    	; 0x3660 <main+0x660>

				}

				else if(DC_KEY==2)
    3560:	fe 01       	movw	r30, r28
    3562:	e4 5a       	subi	r30, 0xA4	; 164
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	80 81       	ld	r24, Z
    3568:	82 30       	cpi	r24, 0x02	; 2
    356a:	09 f0       	breq	.+2      	; 0x356e <main+0x56e>
    356c:	79 c0       	rjmp	.+242    	; 0x3660 <main+0x660>
				{
					CLCD_voidSendCmd(1);
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
					DcMotor_CCW();
    3574:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DcMotor_CCW>
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	90 e4       	ldi	r25, 0x40	; 64
    357c:	ac e1       	ldi	r26, 0x1C	; 28
    357e:	b5 e4       	ldi	r27, 0x45	; 69
    3580:	89 8f       	std	Y+25, r24	; 0x19
    3582:	9a 8f       	std	Y+26, r25	; 0x1a
    3584:	ab 8f       	std	Y+27, r26	; 0x1b
    3586:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3588:	69 8d       	ldd	r22, Y+25	; 0x19
    358a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    358c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    358e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	4a e7       	ldi	r20, 0x7A	; 122
    3596:	55 e4       	ldi	r21, 0x45	; 69
    3598:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	8d 8b       	std	Y+21, r24	; 0x15
    35a2:	9e 8b       	std	Y+22, r25	; 0x16
    35a4:	af 8b       	std	Y+23, r26	; 0x17
    35a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35a8:	6d 89       	ldd	r22, Y+21	; 0x15
    35aa:	7e 89       	ldd	r23, Y+22	; 0x16
    35ac:	8f 89       	ldd	r24, Y+23	; 0x17
    35ae:	98 8d       	ldd	r25, Y+24	; 0x18
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	40 e8       	ldi	r20, 0x80	; 128
    35b6:	5f e3       	ldi	r21, 0x3F	; 63
    35b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    35bc:	88 23       	and	r24, r24
    35be:	2c f4       	brge	.+10     	; 0x35ca <main+0x5ca>
		__ticks = 1;
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	9c 8b       	std	Y+20, r25	; 0x14
    35c6:	8b 8b       	std	Y+19, r24	; 0x13
    35c8:	3f c0       	rjmp	.+126    	; 0x3648 <main+0x648>
	else if (__tmp > 65535)
    35ca:	6d 89       	ldd	r22, Y+21	; 0x15
    35cc:	7e 89       	ldd	r23, Y+22	; 0x16
    35ce:	8f 89       	ldd	r24, Y+23	; 0x17
    35d0:	98 8d       	ldd	r25, Y+24	; 0x18
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	3f ef       	ldi	r19, 0xFF	; 255
    35d6:	4f e7       	ldi	r20, 0x7F	; 127
    35d8:	57 e4       	ldi	r21, 0x47	; 71
    35da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    35de:	18 16       	cp	r1, r24
    35e0:	4c f5       	brge	.+82     	; 0x3634 <main+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35e2:	69 8d       	ldd	r22, Y+25	; 0x19
    35e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	40 e2       	ldi	r20, 0x20	; 32
    35f0:	51 e4       	ldi	r21, 0x41	; 65
    35f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	bc 01       	movw	r22, r24
    35fc:	cd 01       	movw	r24, r26
    35fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	9c 8b       	std	Y+20, r25	; 0x14
    3608:	8b 8b       	std	Y+19, r24	; 0x13
    360a:	0f c0       	rjmp	.+30     	; 0x362a <main+0x62a>
    360c:	80 e9       	ldi	r24, 0x90	; 144
    360e:	91 e0       	ldi	r25, 0x01	; 1
    3610:	9a 8b       	std	Y+18, r25	; 0x12
    3612:	89 8b       	std	Y+17, r24	; 0x11
    3614:	89 89       	ldd	r24, Y+17	; 0x11
    3616:	9a 89       	ldd	r25, Y+18	; 0x12
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	f1 f7       	brne	.-4      	; 0x3618 <main+0x618>
    361c:	9a 8b       	std	Y+18, r25	; 0x12
    361e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3620:	8b 89       	ldd	r24, Y+19	; 0x13
    3622:	9c 89       	ldd	r25, Y+20	; 0x14
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	9c 8b       	std	Y+20, r25	; 0x14
    3628:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    362a:	8b 89       	ldd	r24, Y+19	; 0x13
    362c:	9c 89       	ldd	r25, Y+20	; 0x14
    362e:	00 97       	sbiw	r24, 0x00	; 0
    3630:	69 f7       	brne	.-38     	; 0x360c <main+0x60c>
    3632:	14 c0       	rjmp	.+40     	; 0x365c <main+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3634:	6d 89       	ldd	r22, Y+21	; 0x15
    3636:	7e 89       	ldd	r23, Y+22	; 0x16
    3638:	8f 89       	ldd	r24, Y+23	; 0x17
    363a:	98 8d       	ldd	r25, Y+24	; 0x18
    363c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	9c 8b       	std	Y+20, r25	; 0x14
    3646:	8b 8b       	std	Y+19, r24	; 0x13
    3648:	8b 89       	ldd	r24, Y+19	; 0x13
    364a:	9c 89       	ldd	r25, Y+20	; 0x14
    364c:	98 8b       	std	Y+16, r25	; 0x10
    364e:	8f 87       	std	Y+15, r24	; 0x0f
    3650:	8f 85       	ldd	r24, Y+15	; 0x0f
    3652:	98 89       	ldd	r25, Y+16	; 0x10
    3654:	01 97       	sbiw	r24, 0x01	; 1
    3656:	f1 f7       	brne	.-4      	; 0x3654 <main+0x654>
    3658:	98 8b       	std	Y+16, r25	; 0x10
    365a:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(2500);
					DcMotor_Stop();
    365c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DcMotor_Stop>
				}
			}
			if(Key==2)
    3660:	fe 01       	movw	r30, r28
    3662:	e3 5a       	subi	r30, 0xA3	; 163
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	80 81       	ld	r24, Z
    3668:	82 30       	cpi	r24, 0x02	; 2
    366a:	09 f0       	breq	.+2      	; 0x366e <main+0x66e>
    366c:	9d cd       	rjmp	.-1222   	; 0x31a8 <main+0x1a8>
			{
				CLCD_voidSendCmd(1);
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
				//sint8 input[10] = {0};
				sint16 Local_u8Angle;
				uint8 Local_u8ST_Direction;
				CLCD_u8SendString(" Stepper Motor ");
    3674:	89 eb       	ldi	r24, 0xB9	; 185
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
				CLCD_voidGoToXY(0,1);
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	61 e0       	ldi	r22, 0x01	; 1
    3680:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidGoToXY>
				CLCD_u8SendString("1-RCW");
    3684:	8a ea       	ldi	r24, 0xAA	; 170
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
				CLCD_u8SendString(" 2-RCCW");
    368c:	89 ec       	ldi	r24, 0xC9	; 201
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	a8 ec       	ldi	r26, 0xC8	; 200
    369a:	b2 e4       	ldi	r27, 0x42	; 66
    369c:	8b 87       	std	Y+11, r24	; 0x0b
    369e:	9c 87       	std	Y+12, r25	; 0x0c
    36a0:	ad 87       	std	Y+13, r26	; 0x0d
    36a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	4a e7       	ldi	r20, 0x7A	; 122
    36b2:	55 e4       	ldi	r21, 0x45	; 69
    36b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	8f 83       	std	Y+7, r24	; 0x07
    36be:	98 87       	std	Y+8, r25	; 0x08
    36c0:	a9 87       	std	Y+9, r26	; 0x09
    36c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36c4:	6f 81       	ldd	r22, Y+7	; 0x07
    36c6:	78 85       	ldd	r23, Y+8	; 0x08
    36c8:	89 85       	ldd	r24, Y+9	; 0x09
    36ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	40 e8       	ldi	r20, 0x80	; 128
    36d2:	5f e3       	ldi	r21, 0x3F	; 63
    36d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    36d8:	88 23       	and	r24, r24
    36da:	2c f4       	brge	.+10     	; 0x36e6 <main+0x6e6>
		__ticks = 1;
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	9e 83       	std	Y+6, r25	; 0x06
    36e2:	8d 83       	std	Y+5, r24	; 0x05
    36e4:	3f c0       	rjmp	.+126    	; 0x3764 <main+0x764>
	else if (__tmp > 65535)
    36e6:	6f 81       	ldd	r22, Y+7	; 0x07
    36e8:	78 85       	ldd	r23, Y+8	; 0x08
    36ea:	89 85       	ldd	r24, Y+9	; 0x09
    36ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	3f ef       	ldi	r19, 0xFF	; 255
    36f2:	4f e7       	ldi	r20, 0x7F	; 127
    36f4:	57 e4       	ldi	r21, 0x47	; 71
    36f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    36fa:	18 16       	cp	r1, r24
    36fc:	4c f5       	brge	.+82     	; 0x3750 <main+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3700:	7c 85       	ldd	r23, Y+12	; 0x0c
    3702:	8d 85       	ldd	r24, Y+13	; 0x0d
    3704:	9e 85       	ldd	r25, Y+14	; 0x0e
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	40 e2       	ldi	r20, 0x20	; 32
    370c:	51 e4       	ldi	r21, 0x41	; 65
    370e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	bc 01       	movw	r22, r24
    3718:	cd 01       	movw	r24, r26
    371a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	9e 83       	std	Y+6, r25	; 0x06
    3724:	8d 83       	std	Y+5, r24	; 0x05
    3726:	0f c0       	rjmp	.+30     	; 0x3746 <main+0x746>
    3728:	80 e9       	ldi	r24, 0x90	; 144
    372a:	91 e0       	ldi	r25, 0x01	; 1
    372c:	9c 83       	std	Y+4, r25	; 0x04
    372e:	8b 83       	std	Y+3, r24	; 0x03
    3730:	8b 81       	ldd	r24, Y+3	; 0x03
    3732:	9c 81       	ldd	r25, Y+4	; 0x04
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <main+0x734>
    3738:	9c 83       	std	Y+4, r25	; 0x04
    373a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373c:	8d 81       	ldd	r24, Y+5	; 0x05
    373e:	9e 81       	ldd	r25, Y+6	; 0x06
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	9e 83       	std	Y+6, r25	; 0x06
    3744:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3746:	8d 81       	ldd	r24, Y+5	; 0x05
    3748:	9e 81       	ldd	r25, Y+6	; 0x06
    374a:	00 97       	sbiw	r24, 0x00	; 0
    374c:	69 f7       	brne	.-38     	; 0x3728 <main+0x728>
    374e:	14 c0       	rjmp	.+40     	; 0x3778 <main+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3750:	6f 81       	ldd	r22, Y+7	; 0x07
    3752:	78 85       	ldd	r23, Y+8	; 0x08
    3754:	89 85       	ldd	r24, Y+9	; 0x09
    3756:	9a 85       	ldd	r25, Y+10	; 0x0a
    3758:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	9e 83       	std	Y+6, r25	; 0x06
    3762:	8d 83       	std	Y+5, r24	; 0x05
    3764:	8d 81       	ldd	r24, Y+5	; 0x05
    3766:	9e 81       	ldd	r25, Y+6	; 0x06
    3768:	9a 83       	std	Y+2, r25	; 0x02
    376a:	89 83       	std	Y+1, r24	; 0x01
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	9a 81       	ldd	r25, Y+2	; 0x02
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	f1 f7       	brne	.-4      	; 0x3770 <main+0x770>
    3774:	9a 83       	std	Y+2, r25	; 0x02
    3776:	89 83       	std	Y+1, r24	; 0x01
				//Localu8KeyPadKey=0xff;
				_delay_ms(100);
				do
				{
					Localu8KeyPadKey= KPD_u8GetPressedKey();
    3778:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <KPD_u8GetPressedKey>
    377c:	fe 01       	movw	r30, r28
    377e:	e2 5a       	subi	r30, 0xA2	; 162
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	80 83       	st	Z, r24
				}
				while(Localu8KeyPadKey == 0xff);
    3784:	fe 01       	movw	r30, r28
    3786:	e2 5a       	subi	r30, 0xA2	; 162
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	80 81       	ld	r24, Z
    378c:	8f 3f       	cpi	r24, 0xFF	; 255
    378e:	a1 f3       	breq	.-24     	; 0x3778 <main+0x778>
				uint8 STOPPER_KEY =Localu8KeyPadKey;
    3790:	de 01       	movw	r26, r28
    3792:	a8 5a       	subi	r26, 0xA8	; 168
    3794:	bf 4f       	sbci	r27, 0xFF	; 255
    3796:	fe 01       	movw	r30, r28
    3798:	e2 5a       	subi	r30, 0xA2	; 162
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	80 81       	ld	r24, Z
    379e:	8c 93       	st	X, r24
				if(STOPPER_KEY==1)
    37a0:	fe 01       	movw	r30, r28
    37a2:	e8 5a       	subi	r30, 0xA8	; 168
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	80 81       	ld	r24, Z
    37a8:	81 30       	cpi	r24, 0x01	; 1
    37aa:	31 f4       	brne	.+12     	; 0x37b8 <main+0x7b8>
				{
					Local_u8ST_Direction = ROTAT_CW ;
    37ac:	fe 01       	movw	r30, r28
    37ae:	e7 5a       	subi	r30, 0xA7	; 167
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	80 83       	st	Z, r24
    37b6:	0b c0       	rjmp	.+22     	; 0x37ce <main+0x7ce>

				}
				else if(STOPPER_KEY==2)
    37b8:	fe 01       	movw	r30, r28
    37ba:	e8 5a       	subi	r30, 0xA8	; 168
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	80 81       	ld	r24, Z
    37c0:	82 30       	cpi	r24, 0x02	; 2
    37c2:	29 f4       	brne	.+10     	; 0x37ce <main+0x7ce>
				{
					Local_u8ST_Direction = ROTAT_CCW ;
    37c4:	fe 01       	movw	r30, r28
    37c6:	e7 5a       	subi	r30, 0xA7	; 167
    37c8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ca:	82 e0       	ldi	r24, 0x02	; 2
    37cc:	80 83       	st	Z, r24

				}
				//scanning the angle
				CLCD_voidSendCmd(1);
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
				CLCD_voidGoToXY(0,0);
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	60 e0       	ldi	r22, 0x00	; 0
    37d8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidGoToXY>
				CLCD_u8SendString("Angle:");
    37dc:	81 ed       	ldi	r24, 0xD1	; 209
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>

				uint8 flag=0;
    37e4:	fe 01       	movw	r30, r28
    37e6:	e9 5a       	subi	r30, 0xA9	; 169
    37e8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ea:	10 82       	st	Z, r1
    37ec:	55 c0       	rjmp	.+170    	; 0x3898 <main+0x898>
				{
					//Localu8KeyPadKey =0xff ;
					//_delay_ms(90);
					do
					{
						Localu8KeyPadKey = KPD_u8GetPressedKey() ;
    37ee:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <KPD_u8GetPressedKey>
    37f2:	fe 01       	movw	r30, r28
    37f4:	e2 5a       	subi	r30, 0xA2	; 162
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	80 83       	st	Z, r24
					}while(Localu8KeyPadKey == 0xff);
    37fa:	fe 01       	movw	r30, r28
    37fc:	e2 5a       	subi	r30, 0xA2	; 162
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	80 81       	ld	r24, Z
    3802:	8f 3f       	cpi	r24, 0xFF	; 255
    3804:	a1 f3       	breq	.-24     	; 0x37ee <main+0x7ee>
					uint16 Local_num = Localu8KeyPadKey;
    3806:	de 01       	movw	r26, r28
    3808:	ab 5a       	subi	r26, 0xAB	; 171
    380a:	bf 4f       	sbci	r27, 0xFF	; 255
    380c:	fe 01       	movw	r30, r28
    380e:	e2 5a       	subi	r30, 0xA2	; 162
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	80 81       	ld	r24, Z
    3814:	88 2f       	mov	r24, r24
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	11 96       	adiw	r26, 0x01	; 1
    381a:	9c 93       	st	X, r25
    381c:	8e 93       	st	-X, r24
					if(Local_num =='=')
    381e:	fe 01       	movw	r30, r28
    3820:	eb 5a       	subi	r30, 0xAB	; 171
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	80 81       	ld	r24, Z
    3826:	91 81       	ldd	r25, Z+1	; 0x01
    3828:	8d 33       	cpi	r24, 0x3D	; 61
    382a:	91 05       	cpc	r25, r1
    382c:	31 f4       	brne	.+12     	; 0x383a <main+0x83a>
					{

						flag=1;
    382e:	fe 01       	movw	r30, r28
    3830:	e9 5a       	subi	r30, 0xA9	; 169
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	80 83       	st	Z, r24
    3838:	2f c0       	rjmp	.+94     	; 0x3898 <main+0x898>
					}
					else if((Local_num >=0) && (Local_num <=9))
    383a:	fe 01       	movw	r30, r28
    383c:	eb 5a       	subi	r30, 0xAB	; 171
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	80 81       	ld	r24, Z
    3842:	91 81       	ldd	r25, Z+1	; 0x01
    3844:	8a 30       	cpi	r24, 0x0A	; 10
    3846:	91 05       	cpc	r25, r1
    3848:	38 f5       	brcc	.+78     	; 0x3898 <main+0x898>
					{
						CLCD_voidSendNumber(Local_num);
    384a:	fe 01       	movw	r30, r28
    384c:	eb 5a       	subi	r30, 0xAB	; 171
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	80 81       	ld	r24, Z
    3852:	91 81       	ldd	r25, Z+1	; 0x01
    3854:	cc 01       	movw	r24, r24
    3856:	a0 e0       	ldi	r26, 0x00	; 0
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 5d 07 	call	0xeba	; 0xeba <CLCD_voidSendNumber>
						Local_u8Angle = Local_u8Angle*(uint16)10 + (uint16)Local_num;
    3862:	fe 01       	movw	r30, r28
    3864:	e6 5a       	subi	r30, 0xA6	; 166
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	80 81       	ld	r24, Z
    386a:	91 81       	ldd	r25, Z+1	; 0x01
    386c:	9c 01       	movw	r18, r24
    386e:	22 0f       	add	r18, r18
    3870:	33 1f       	adc	r19, r19
    3872:	c9 01       	movw	r24, r18
    3874:	88 0f       	add	r24, r24
    3876:	99 1f       	adc	r25, r25
    3878:	88 0f       	add	r24, r24
    387a:	99 1f       	adc	r25, r25
    387c:	28 0f       	add	r18, r24
    387e:	39 1f       	adc	r19, r25
    3880:	fe 01       	movw	r30, r28
    3882:	eb 5a       	subi	r30, 0xAB	; 171
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	80 81       	ld	r24, Z
    3888:	91 81       	ldd	r25, Z+1	; 0x01
    388a:	82 0f       	add	r24, r18
    388c:	93 1f       	adc	r25, r19
    388e:	fe 01       	movw	r30, r28
    3890:	e6 5a       	subi	r30, 0xA6	; 166
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	80 83       	st	Z, r24
				CLCD_voidSendCmd(1);
				CLCD_voidGoToXY(0,0);
				CLCD_u8SendString("Angle:");

				uint8 flag=0;
				while(flag == 0)
    3898:	fe 01       	movw	r30, r28
    389a:	e9 5a       	subi	r30, 0xA9	; 169
    389c:	ff 4f       	sbci	r31, 0xFF	; 255
    389e:	80 81       	ld	r24, Z
    38a0:	88 23       	and	r24, r24
    38a2:	09 f4       	brne	.+2      	; 0x38a6 <main+0x8a6>
    38a4:	a4 cf       	rjmp	.-184    	; 0x37ee <main+0x7ee>

						//Localu8KeyPadKey = 0xff;
					}

				}
				CLCD_voidSendCmd(1);
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
				Stepper_u8RotateAngle(&ST_Motor1,Local_u8ST_Direction,Local_u8Angle);
    38ac:	fe 01       	movw	r30, r28
    38ae:	e6 5a       	subi	r30, 0xA6	; 166
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	20 81       	ld	r18, Z
    38b4:	31 81       	ldd	r19, Z+1	; 0x01
    38b6:	82 ef       	ldi	r24, 0xF2	; 242
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	fe 01       	movw	r30, r28
    38bc:	e7 5a       	subi	r30, 0xA7	; 167
    38be:	ff 4f       	sbci	r31, 0xFF	; 255
    38c0:	60 81       	ld	r22, Z
    38c2:	a9 01       	movw	r20, r18
    38c4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Stepper_u8RotateAngle>
				CLCD_voidSendCmd(1);
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
    38ce:	6c cc       	rjmp	.-1832   	; 0x31a8 <main+0x1a8>

000038d0 <__udivmodsi4>:
    38d0:	a1 e2       	ldi	r26, 0x21	; 33
    38d2:	1a 2e       	mov	r1, r26
    38d4:	aa 1b       	sub	r26, r26
    38d6:	bb 1b       	sub	r27, r27
    38d8:	fd 01       	movw	r30, r26
    38da:	0d c0       	rjmp	.+26     	; 0x38f6 <__udivmodsi4_ep>

000038dc <__udivmodsi4_loop>:
    38dc:	aa 1f       	adc	r26, r26
    38de:	bb 1f       	adc	r27, r27
    38e0:	ee 1f       	adc	r30, r30
    38e2:	ff 1f       	adc	r31, r31
    38e4:	a2 17       	cp	r26, r18
    38e6:	b3 07       	cpc	r27, r19
    38e8:	e4 07       	cpc	r30, r20
    38ea:	f5 07       	cpc	r31, r21
    38ec:	20 f0       	brcs	.+8      	; 0x38f6 <__udivmodsi4_ep>
    38ee:	a2 1b       	sub	r26, r18
    38f0:	b3 0b       	sbc	r27, r19
    38f2:	e4 0b       	sbc	r30, r20
    38f4:	f5 0b       	sbc	r31, r21

000038f6 <__udivmodsi4_ep>:
    38f6:	66 1f       	adc	r22, r22
    38f8:	77 1f       	adc	r23, r23
    38fa:	88 1f       	adc	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	1a 94       	dec	r1
    3900:	69 f7       	brne	.-38     	; 0x38dc <__udivmodsi4_loop>
    3902:	60 95       	com	r22
    3904:	70 95       	com	r23
    3906:	80 95       	com	r24
    3908:	90 95       	com	r25
    390a:	9b 01       	movw	r18, r22
    390c:	ac 01       	movw	r20, r24
    390e:	bd 01       	movw	r22, r26
    3910:	cf 01       	movw	r24, r30
    3912:	08 95       	ret

00003914 <__divmodsi4>:
    3914:	97 fb       	bst	r25, 7
    3916:	09 2e       	mov	r0, r25
    3918:	05 26       	eor	r0, r21
    391a:	0e d0       	rcall	.+28     	; 0x3938 <__divmodsi4_neg1>
    391c:	57 fd       	sbrc	r21, 7
    391e:	04 d0       	rcall	.+8      	; 0x3928 <__divmodsi4_neg2>
    3920:	d7 df       	rcall	.-82     	; 0x38d0 <__udivmodsi4>
    3922:	0a d0       	rcall	.+20     	; 0x3938 <__divmodsi4_neg1>
    3924:	00 1c       	adc	r0, r0
    3926:	38 f4       	brcc	.+14     	; 0x3936 <__divmodsi4_exit>

00003928 <__divmodsi4_neg2>:
    3928:	50 95       	com	r21
    392a:	40 95       	com	r20
    392c:	30 95       	com	r19
    392e:	21 95       	neg	r18
    3930:	3f 4f       	sbci	r19, 0xFF	; 255
    3932:	4f 4f       	sbci	r20, 0xFF	; 255
    3934:	5f 4f       	sbci	r21, 0xFF	; 255

00003936 <__divmodsi4_exit>:
    3936:	08 95       	ret

00003938 <__divmodsi4_neg1>:
    3938:	f6 f7       	brtc	.-4      	; 0x3936 <__divmodsi4_exit>
    393a:	90 95       	com	r25
    393c:	80 95       	com	r24
    393e:	70 95       	com	r23
    3940:	61 95       	neg	r22
    3942:	7f 4f       	sbci	r23, 0xFF	; 255
    3944:	8f 4f       	sbci	r24, 0xFF	; 255
    3946:	9f 4f       	sbci	r25, 0xFF	; 255
    3948:	08 95       	ret

0000394a <__prologue_saves__>:
    394a:	2f 92       	push	r2
    394c:	3f 92       	push	r3
    394e:	4f 92       	push	r4
    3950:	5f 92       	push	r5
    3952:	6f 92       	push	r6
    3954:	7f 92       	push	r7
    3956:	8f 92       	push	r8
    3958:	9f 92       	push	r9
    395a:	af 92       	push	r10
    395c:	bf 92       	push	r11
    395e:	cf 92       	push	r12
    3960:	df 92       	push	r13
    3962:	ef 92       	push	r14
    3964:	ff 92       	push	r15
    3966:	0f 93       	push	r16
    3968:	1f 93       	push	r17
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	ca 1b       	sub	r28, r26
    3974:	db 0b       	sbc	r29, r27
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	09 94       	ijmp

00003982 <__epilogue_restores__>:
    3982:	2a 88       	ldd	r2, Y+18	; 0x12
    3984:	39 88       	ldd	r3, Y+17	; 0x11
    3986:	48 88       	ldd	r4, Y+16	; 0x10
    3988:	5f 84       	ldd	r5, Y+15	; 0x0f
    398a:	6e 84       	ldd	r6, Y+14	; 0x0e
    398c:	7d 84       	ldd	r7, Y+13	; 0x0d
    398e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3990:	9b 84       	ldd	r9, Y+11	; 0x0b
    3992:	aa 84       	ldd	r10, Y+10	; 0x0a
    3994:	b9 84       	ldd	r11, Y+9	; 0x09
    3996:	c8 84       	ldd	r12, Y+8	; 0x08
    3998:	df 80       	ldd	r13, Y+7	; 0x07
    399a:	ee 80       	ldd	r14, Y+6	; 0x06
    399c:	fd 80       	ldd	r15, Y+5	; 0x05
    399e:	0c 81       	ldd	r16, Y+4	; 0x04
    39a0:	1b 81       	ldd	r17, Y+3	; 0x03
    39a2:	aa 81       	ldd	r26, Y+2	; 0x02
    39a4:	b9 81       	ldd	r27, Y+1	; 0x01
    39a6:	ce 0f       	add	r28, r30
    39a8:	d1 1d       	adc	r29, r1
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	f8 94       	cli
    39ae:	de bf       	out	0x3e, r29	; 62
    39b0:	0f be       	out	0x3f, r0	; 63
    39b2:	cd bf       	out	0x3d, r28	; 61
    39b4:	ed 01       	movw	r28, r26
    39b6:	08 95       	ret

000039b8 <_exit>:
    39b8:	f8 94       	cli

000039ba <__stop_program>:
    39ba:	ff cf       	rjmp	.-2      	; 0x39ba <__stop_program>
