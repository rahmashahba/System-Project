
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000352e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000352e  000035c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  000035da  2**0
                  ALLOC
  3 .stab         00002e38  00000000  00000000  000035dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010c5  00000000  00000000  00006414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000074d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007619  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007789  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000093d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b06c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b459  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_1>
       8:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__vector_2>
       c:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <main>
      8a:	0c 94 95 1a 	jmp	0x352a	; 0x352a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <voidSetHalfDataPort>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"

#if CLCD_u8BIT_MODE == FOUR_BIT
static void voidSetHalfDataPort(uint8 Copy_u8Data)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D4_PIN, GET_BIT(Copy_u8Data,0));
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	98 2f       	mov	r25, r24
     b56:	91 70       	andi	r25, 0x01	; 1
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	49 2f       	mov	r20, r25
     b5e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D5_PIN, GET_BIT(Copy_u8Data,1));
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	86 95       	lsr	r24
     b66:	98 2f       	mov	r25, r24
     b68:	91 70       	andi	r25, 0x01	; 1
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	64 e0       	ldi	r22, 0x04	; 4
     b6e:	49 2f       	mov	r20, r25
     b70:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D6_PIN, GET_BIT(Copy_u8Data,2));
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	86 95       	lsr	r24
     b78:	86 95       	lsr	r24
     b7a:	98 2f       	mov	r25, r24
     b7c:	91 70       	andi	r25, 0x01	; 1
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	65 e0       	ldi	r22, 0x05	; 5
     b82:	49 2f       	mov	r20, r25
     b84:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D7_PIN, GET_BIT(Copy_u8Data,3));
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	86 95       	lsr	r24
     b8c:	86 95       	lsr	r24
     b8e:	86 95       	lsr	r24
     b90:	98 2f       	mov	r25, r24
     b92:	91 70       	andi	r25, 0x01	; 1
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	66 e0       	ldi	r22, 0x06	; 6
     b98:	49 2f       	mov	r20, r25
     b9a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
}
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <voidSendEnablePulse>:
#endif

static void voidSendEnablePulse(void)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	2e 97       	sbiw	r28, 0x0e	; 14
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN, DIO_u8PIN_HIGH);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	62 e0       	ldi	r22, 0x02	; 2
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e4       	ldi	r27, 0x40	; 64
     bcc:	8b 87       	std	Y+11, r24	; 0x0b
     bce:	9c 87       	std	Y+12, r25	; 0x0c
     bd0:	ad 87       	std	Y+13, r26	; 0x0d
     bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bda:	9e 85       	ldd	r25, Y+14	; 0x0e
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	4a e7       	ldi	r20, 0x7A	; 122
     be2:	55 e4       	ldi	r21, 0x45	; 69
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	8f 83       	std	Y+7, r24	; 0x07
     bee:	98 87       	std	Y+8, r25	; 0x08
     bf0:	a9 87       	std	Y+9, r26	; 0x09
     bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bf4:	6f 81       	ldd	r22, Y+7	; 0x07
     bf6:	78 85       	ldd	r23, Y+8	; 0x08
     bf8:	89 85       	ldd	r24, Y+9	; 0x09
     bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	5f e3       	ldi	r21, 0x3F	; 63
     c04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c08:	88 23       	and	r24, r24
     c0a:	2c f4       	brge	.+10     	; 0xc16 <voidSendEnablePulse+0x70>
		__ticks = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	3f c0       	rjmp	.+126    	; 0xc94 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     c16:	6f 81       	ldd	r22, Y+7	; 0x07
     c18:	78 85       	ldd	r23, Y+8	; 0x08
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	4f e7       	ldi	r20, 0x7F	; 127
     c24:	57 e4       	ldi	r21, 0x47	; 71
     c26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	4c f5       	brge	.+82     	; 0xc80 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c30:	7c 85       	ldd	r23, Y+12	; 0x0c
     c32:	8d 85       	ldd	r24, Y+13	; 0x0d
     c34:	9e 85       	ldd	r25, Y+14	; 0x0e
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e2       	ldi	r20, 0x20	; 32
     c3c:	51 e4       	ldi	r21, 0x41	; 65
     c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <voidSendEnablePulse+0xd0>
     c58:	80 e9       	ldi	r24, 0x90	; 144
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	9c 83       	std	Y+4, r25	; 0x04
     c5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <voidSendEnablePulse+0xbe>
     c68:	9c 83       	std	Y+4, r25	; 0x04
     c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	69 f7       	brne	.-38     	; 0xc58 <voidSendEnablePulse+0xb2>
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c80:	6f 81       	ldd	r22, Y+7	; 0x07
     c82:	78 85       	ldd	r23, Y+8	; 0x08
     c84:	89 85       	ldd	r24, Y+9	; 0x09
     c86:	9a 85       	ldd	r25, Y+10	; 0x0a
     c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	9e 83       	std	Y+6, r25	; 0x06
     c92:	8d 83       	std	Y+5, r24	; 0x05
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <voidSendEnablePulse+0xfa>
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN, DIO_u8PIN_LOW);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
}
     cb2:	2e 96       	adiw	r28, 0x0e	; 14
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_LOW);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Cmd);
	voidSendEnablePulse();

#elif CLCD_u8BIT_MODE == FOUR_BIT
	/*Send the 4 Most significant bits of the command first*/
	voidSetHalfDataPort(Copy_u8Cmd >> 4);
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	82 95       	swap	r24
     cde:	8f 70       	andi	r24, 0x0F	; 15
     ce0:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     ce4:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Cmd);
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     cee:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>

#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif

}
     cf2:	0f 90       	pop	r0
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	0f 92       	push	r0
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_HIGH);
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Data);
	voidSendEnablePulse();

#elif CLCD_u8BIT_MODE == FOUR_BIT
	/*Send the 4 Most significant bits of the data first*/
	voidSetHalfDataPort(Copy_u8Data >> 4);
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	82 95       	swap	r24
     d14:	8f 70       	andi	r24, 0x0F	; 15
     d16:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d1a:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Data);
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d24:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>

#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif
}
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	2e 97       	sbiw	r28, 0x0e	; 14
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 e2       	ldi	r26, 0x20	; 32
     d4a:	b2 e4       	ldi	r27, 0x42	; 66
     d4c:	8b 87       	std	Y+11, r24	; 0x0b
     d4e:	9c 87       	std	Y+12, r25	; 0x0c
     d50:	ad 87       	std	Y+13, r26	; 0x0d
     d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d54:	6b 85       	ldd	r22, Y+11	; 0x0b
     d56:	7c 85       	ldd	r23, Y+12	; 0x0c
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4a e7       	ldi	r20, 0x7A	; 122
     d62:	55 e4       	ldi	r21, 0x45	; 69
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8f 83       	std	Y+7, r24	; 0x07
     d6e:	98 87       	std	Y+8, r25	; 0x08
     d70:	a9 87       	std	Y+9, r26	; 0x09
     d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d74:	6f 81       	ldd	r22, Y+7	; 0x07
     d76:	78 85       	ldd	r23, Y+8	; 0x08
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	2c f4       	brge	.+10     	; 0xd96 <CLCD_voidInit+0x66>
		__ticks = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
     d94:	3f c0       	rjmp	.+126    	; 0xe14 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d96:	6f 81       	ldd	r22, Y+7	; 0x07
     d98:	78 85       	ldd	r23, Y+8	; 0x08
     d9a:	89 85       	ldd	r24, Y+9	; 0x09
     d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     daa:	18 16       	cp	r1, r24
     dac:	4c f5       	brge	.+82     	; 0xe00 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	bc 01       	movw	r22, r24
     dc8:	cd 01       	movw	r24, r26
     dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	9e 83       	std	Y+6, r25	; 0x06
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <CLCD_voidInit+0xc6>
     dd8:	80 e9       	ldi	r24, 0x90	; 144
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	9c 83       	std	Y+4, r25	; 0x04
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <CLCD_voidInit+0xb4>
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	69 f7       	brne	.-38     	; 0xdd8 <CLCD_voidInit+0xa8>
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <CLCD_voidInit+0xf0>
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, Font size: 5x7*/
#if CLCD_u8BIT_MODE == EIGHT_BIT
	CLCD_voidSendCmd(0b00111000);

#elif  CLCD_u8BIT_MODE == FOUR_BIT
	voidSetHalfDataPort(0b0010);
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e2e:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(0b0010);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e38:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(0b1000);
     e3c:	88 e0       	ldi	r24, 0x08	; 8
     e3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e42:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>

#endif

	/*Display on off control : Display on, cursor off, blink cursor off*/
	CLCD_voidSendCmd(0b00001100);
     e46:	8c e0       	ldi	r24, 0x0C	; 12
     e48:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

	/*Clear display*/
	CLCD_voidSendCmd(1);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

}
     e52:	2e 96       	adiw	r28, 0x0e	; 14
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_pchString)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <CLCD_u8SendString+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <CLCD_u8SendString+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9c 83       	std	Y+4, r25	; 0x04
     e72:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
     e74:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pchString != NULL)
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	e1 f0       	breq	.+56     	; 0xeb6 <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Iterator=0u;
     e7e:	19 82       	std	Y+1, r1	; 0x01
     e80:	0e c0       	rjmp	.+28     	; 0xe9e <CLCD_u8SendString+0x3a>
		while(Copy_pchString[Local_u8Iterator] != '\0')
		{
			CLCD_voidSendData(Copy_pchString[Local_u8Iterator]);
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	9c 81       	ldd	r25, Y+4	; 0x04
     e8c:	fc 01       	movw	r30, r24
     e8e:	e2 0f       	add	r30, r18
     e90:	f3 1f       	adc	r31, r19
     e92:	80 81       	ld	r24, Z
     e94:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
			Local_u8Iterator++;
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState = OK;
	if(Copy_pchString != NULL)
	{
		uint8 Local_u8Iterator=0u;
		while(Copy_pchString[Local_u8Iterator] != '\0')
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	fc 01       	movw	r30, r24
     eaa:	e2 0f       	add	r30, r18
     eac:	f3 1f       	adc	r31, r19
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	39 f7       	brne	.-50     	; 0xe82 <CLCD_u8SendString+0x1e>
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <CLCD_u8SendString+0x56>
			Local_u8Iterator++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	61 97       	sbiw	r28, 0x11	; 17
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	6e 87       	std	Y+14, r22	; 0x0e
     ee0:	7f 87       	std	Y+15, r23	; 0x0f
     ee2:	88 8b       	std	Y+16, r24	; 0x10
     ee4:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chNumber[10];
	uint8 Local_u8RightDigit, Local_u8Counter1=0u;
     ee6:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_s8Counter2;

	if(Copy_s32Number ==0)
     ee8:	8e 85       	ldd	r24, Y+14	; 0x0e
     eea:	9f 85       	ldd	r25, Y+15	; 0x0f
     eec:	a8 89       	ldd	r26, Y+16	; 0x10
     eee:	b9 89       	ldd	r27, Y+17	; 0x11
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	a1 05       	cpc	r26, r1
     ef4:	b1 05       	cpc	r27, r1
     ef6:	21 f4       	brne	.+8      	; 0xf00 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData('0');
     ef8:	80 e3       	ldi	r24, 0x30	; 48
     efa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
     efe:	67 c0       	rjmp	.+206    	; 0xfce <CLCD_voidSendNumber+0x104>
		return ;
	}
	else if(Copy_s32Number < 0)
     f00:	8e 85       	ldd	r24, Y+14	; 0x0e
     f02:	9f 85       	ldd	r25, Y+15	; 0x0f
     f04:	a8 89       	ldd	r26, Y+16	; 0x10
     f06:	b9 89       	ldd	r27, Y+17	; 0x11
     f08:	bb 23       	and	r27, r27
     f0a:	0c f0       	brlt	.+2      	; 0xf0e <CLCD_voidSendNumber+0x44>
     f0c:	43 c0       	rjmp	.+134    	; 0xf94 <CLCD_voidSendNumber+0xca>
	{
		/*Number is -ve, make it positive, print -ve sign on the CLCD*/
		Copy_s32Number *= -1;
     f0e:	8e 85       	ldd	r24, Y+14	; 0x0e
     f10:	9f 85       	ldd	r25, Y+15	; 0x0f
     f12:	a8 89       	ldd	r26, Y+16	; 0x10
     f14:	b9 89       	ldd	r27, Y+17	; 0x11
     f16:	b0 95       	com	r27
     f18:	a0 95       	com	r26
     f1a:	90 95       	com	r25
     f1c:	81 95       	neg	r24
     f1e:	9f 4f       	sbci	r25, 0xFF	; 255
     f20:	af 4f       	sbci	r26, 0xFF	; 255
     f22:	bf 4f       	sbci	r27, 0xFF	; 255
     f24:	8e 87       	std	Y+14, r24	; 0x0e
     f26:	9f 87       	std	Y+15, r25	; 0x0f
     f28:	a8 8b       	std	Y+16, r26	; 0x10
     f2a:	b9 8b       	std	Y+17, r27	; 0x11

		CLCD_voidSendData('-');
     f2c:	8d e2       	ldi	r24, 0x2D	; 45
     f2e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
     f32:	30 c0       	rjmp	.+96     	; 0xf94 <CLCD_voidSendNumber+0xca>
	}

	while(Copy_s32Number != 0)
	{
		Local_u8RightDigit = (uint8)((uint32)Copy_s32Number % 10); /*Get the right most digit*/
     f34:	8e 85       	ldd	r24, Y+14	; 0x0e
     f36:	9f 85       	ldd	r25, Y+15	; 0x0f
     f38:	a8 89       	ldd	r26, Y+16	; 0x10
     f3a:	b9 89       	ldd	r27, Y+17	; 0x11
     f3c:	2a e0       	ldi	r18, 0x0A	; 10
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	0e 94 21 1a 	call	0x3442	; 0x3442 <__udivmodsi4>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	8b 83       	std	Y+3, r24	; 0x03

		Copy_s32Number /= 10;	/*remove the right most digit*/
     f52:	8e 85       	ldd	r24, Y+14	; 0x0e
     f54:	9f 85       	ldd	r25, Y+15	; 0x0f
     f56:	a8 89       	ldd	r26, Y+16	; 0x10
     f58:	b9 89       	ldd	r27, Y+17	; 0x11
     f5a:	2a e0       	ldi	r18, 0x0A	; 10
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodsi4>
     f6a:	da 01       	movw	r26, r20
     f6c:	c9 01       	movw	r24, r18
     f6e:	8e 87       	std	Y+14, r24	; 0x0e
     f70:	9f 87       	std	Y+15, r25	; 0x0f
     f72:	a8 8b       	std	Y+16, r26	; 0x10
     f74:	b9 8b       	std	Y+17, r27	; 0x11

		Local_chNumber[Local_u8Counter1] = Local_u8RightDigit + '0'; /*Convert to to ASCII*/
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	48 2f       	mov	r20, r24
     f80:	40 5d       	subi	r20, 0xD0	; 208
     f82:	ce 01       	movw	r24, r28
     f84:	04 96       	adiw	r24, 0x04	; 4
     f86:	fc 01       	movw	r30, r24
     f88:	e2 0f       	add	r30, r18
     f8a:	f3 1f       	adc	r31, r19
     f8c:	40 83       	st	Z, r20

		Local_u8Counter1++;
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number *= -1;

		CLCD_voidSendData('-');
	}

	while(Copy_s32Number != 0)
     f94:	8e 85       	ldd	r24, Y+14	; 0x0e
     f96:	9f 85       	ldd	r25, Y+15	; 0x0f
     f98:	a8 89       	ldd	r26, Y+16	; 0x10
     f9a:	b9 89       	ldd	r27, Y+17	; 0x11
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	a1 05       	cpc	r26, r1
     fa0:	b1 05       	cpc	r27, r1
     fa2:	41 f6       	brne	.-112    	; 0xf34 <CLCD_voidSendNumber+0x6a>
		Local_chNumber[Local_u8Counter1] = Local_u8RightDigit + '0'; /*Convert to to ASCII*/

		Local_u8Counter1++;
	}

	for(Local_s8Counter2 = (sint8)Local_u8Counter1 -1 ; Local_s8Counter2 >= 0 ; Local_s8Counter2--)
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	81 50       	subi	r24, 0x01	; 1
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <CLCD_voidSendNumber+0xfe>
	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	ce 01       	movw	r24, r28
     fb4:	04 96       	adiw	r24, 0x04	; 4
     fb6:	fc 01       	movw	r30, r24
     fb8:	e2 0f       	add	r30, r18
     fba:	f3 1f       	adc	r31, r19
     fbc:	80 81       	ld	r24, Z
     fbe:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
		Local_chNumber[Local_u8Counter1] = Local_u8RightDigit + '0'; /*Convert to to ASCII*/

		Local_u8Counter1++;
	}

	for(Local_s8Counter2 = (sint8)Local_u8Counter1 -1 ; Local_s8Counter2 >= 0 ; Local_s8Counter2--)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	81 50       	subi	r24, 0x01	; 1
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	88 23       	and	r24, r24
     fcc:	7c f7       	brge	.-34     	; 0xfac <CLCD_voidSendNumber+0xe2>
	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
	}

}
     fce:	61 96       	adiw	r28, 0x11	; 17
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <CLCD_voidGoToXY+0x6>
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Address ;
	if(Copy_u8YPos == 0u)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	88 23       	and	r24, r24
     ff4:	19 f4       	brne	.+6      	; 0xffc <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8XPos;
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	06 c0       	rjmp	.+12     	; 0x1008 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8YPos == 1u)
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	19 f4       	brne	.+6      	; 0x1008 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = 0x40 + Copy_u8XPos;
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	80 5c       	subi	r24, 0xC0	; 192
    1006:	89 83       	std	Y+1, r24	; 0x01
	}
	// Local_u8Address = 0x40 * Copy_u8YPos + Copy_u8XPos;

	/*Set bit 7 for SetDDRAM Address command*/
	SET_BIT(Local_u8Address,7);
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	80 68       	ori	r24, 0x80	; 128
    100c:	89 83       	std	Y+1, r24	; 0x01

	/*Execute Set DDRAM Address command*/
	CLCD_voidSendCmd(Local_u8Address);
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <CLCD_u8SendSpecialCharacter>:

uint8 CLCD_u8SendSpecialCharacter(uint8 Copy_u8LocationNum, uint8* Copy_pu8Pattern, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	28 97       	sbiw	r28, 0x08	; 8
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	8c 83       	std	Y+4, r24	; 0x04
    1036:	7e 83       	std	Y+6, r23	; 0x06
    1038:	6d 83       	std	Y+5, r22	; 0x05
    103a:	4f 83       	std	Y+7, r20	; 0x07
    103c:	28 87       	std	Y+8, r18	; 0x08
	uint8 Local_u8ErrorState = OK;
    103e:	1b 82       	std	Y+3, r1	; 0x03

	if(Copy_pu8Pattern != NULL)
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
    1042:	9e 81       	ldd	r25, Y+6	; 0x06
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	59 f1       	breq	.+86     	; 0x109e <CLCD_u8SendSpecialCharacter+0x7e>
	{
		uint8 Local_u8Counter;

		uint8 Local_u8CGRAMAddress = Copy_u8LocationNum * 8;
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	89 83       	std	Y+1, r24	; 0x01

		/*Set bit 6 for CGRAM Address command*/
		SET_BIT(Local_u8CGRAMAddress , 6u);
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	80 64       	ori	r24, 0x40	; 64
    1060:	89 83       	std	Y+1, r24	; 0x01

		/*Set ACGRAM Address*/
		CLCD_voidSendCmd(Local_u8CGRAMAddress);
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

		/*Write the input pattern inside CGRAM*/
		for(Local_u8Counter=0u; Local_u8Counter<8u; Local_u8Counter++)
    1068:	1a 82       	std	Y+2, r1	; 0x02
    106a:	0e c0       	rjmp	.+28     	; 0x1088 <CLCD_u8SendSpecialCharacter+0x68>
		{
			CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	fc 01       	movw	r30, r24
    1078:	e2 0f       	add	r30, r18
    107a:	f3 1f       	adc	r31, r19
    107c:	80 81       	ld	r24, Z
    107e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>

		/*Set ACGRAM Address*/
		CLCD_voidSendCmd(Local_u8CGRAMAddress);

		/*Write the input pattern inside CGRAM*/
		for(Local_u8Counter=0u; Local_u8Counter<8u; Local_u8Counter++)
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	8a 83       	std	Y+2, r24	; 0x02
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 30       	cpi	r24, 0x08	; 8
    108c:	78 f3       	brcs	.-34     	; 0x106c <CLCD_u8SendSpecialCharacter+0x4c>
		{
			CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
		}

		/*Go back to DDRAM*/
		CLCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    108e:	8f 81       	ldd	r24, Y+7	; 0x07
    1090:	68 85       	ldd	r22, Y+8	; 0x08
    1092:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>

		/*Display the special pattern inside CGRAM*/
		CLCD_voidSendData(Copy_u8LocationNum);
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <CLCD_u8SendSpecialCharacter+0x82>

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_u8ErrorState;
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10a4:	28 96       	adiw	r28, 0x08	; 8
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <DcMotor_CW>:
#include "DIO_interface.h"
#include "DCMotor_interface.h"
#include "DCMotor_cfg.h"
#include <util/delay.h>
void DcMotor_CW()
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	2e 97       	sbiw	r28, 0x0e	; 14
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCmd(1);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	63 e0       	ldi	r22, 0x03	; 3
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a0 ea       	ldi	r26, 0xA0	; 160
    10e2:	b1 e4       	ldi	r27, 0x41	; 65
    10e4:	8b 87       	std	Y+11, r24	; 0x0b
    10e6:	9c 87       	std	Y+12, r25	; 0x0c
    10e8:	ad 87       	std	Y+13, r26	; 0x0d
    10ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4a e7       	ldi	r20, 0x7A	; 122
    10fa:	55 e4       	ldi	r21, 0x45	; 69
    10fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	8f 83       	std	Y+7, r24	; 0x07
    1106:	98 87       	std	Y+8, r25	; 0x08
    1108:	a9 87       	std	Y+9, r26	; 0x09
    110a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    110c:	6f 81       	ldd	r22, Y+7	; 0x07
    110e:	78 85       	ldd	r23, Y+8	; 0x08
    1110:	89 85       	ldd	r24, Y+9	; 0x09
    1112:	9a 85       	ldd	r25, Y+10	; 0x0a
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	5f e3       	ldi	r21, 0x3F	; 63
    111c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1120:	88 23       	and	r24, r24
    1122:	2c f4       	brge	.+10     	; 0x112e <DcMotor_CW+0x78>
		__ticks = 1;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
    112c:	3f c0       	rjmp	.+126    	; 0x11ac <DcMotor_CW+0xf6>
	else if (__tmp > 65535)
    112e:	6f 81       	ldd	r22, Y+7	; 0x07
    1130:	78 85       	ldd	r23, Y+8	; 0x08
    1132:	89 85       	ldd	r24, Y+9	; 0x09
    1134:	9a 85       	ldd	r25, Y+10	; 0x0a
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	4f e7       	ldi	r20, 0x7F	; 127
    113c:	57 e4       	ldi	r21, 0x47	; 71
    113e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1142:	18 16       	cp	r1, r24
    1144:	4c f5       	brge	.+82     	; 0x1198 <DcMotor_CW+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	51 e4       	ldi	r21, 0x41	; 65
    1156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	0f c0       	rjmp	.+30     	; 0x118e <DcMotor_CW+0xd8>
    1170:	80 e9       	ldi	r24, 0x90	; 144
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	9c 83       	std	Y+4, r25	; 0x04
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <DcMotor_CW+0xc6>
    1180:	9c 83       	std	Y+4, r25	; 0x04
    1182:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	69 f7       	brne	.-38     	; 0x1170 <DcMotor_CW+0xba>
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <DcMotor_CW+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1198:	6f 81       	ldd	r22, Y+7	; 0x07
    119a:	78 85       	ldd	r23, Y+8	; 0x08
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	9a 83       	std	Y+2, r25	; 0x02
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <DcMotor_CW+0x102>
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_HIGH);
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	64 e0       	ldi	r22, 0x04	; 4
    11c4:	41 e0       	ldi	r20, 0x01	; 1
    11c6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>

}
    11ca:	2e 96       	adiw	r28, 0x0e	; 14
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <DcMotor_CCW>:
void DcMotor_CCW()
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	2e 97       	sbiw	r28, 0x0e	; 14
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCmd(1);
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_LOW);
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	64 e0       	ldi	r22, 0x04	; 4
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a0 ea       	ldi	r26, 0xA0	; 160
    1208:	b1 e4       	ldi	r27, 0x41	; 65
    120a:	8b 87       	std	Y+11, r24	; 0x0b
    120c:	9c 87       	std	Y+12, r25	; 0x0c
    120e:	ad 87       	std	Y+13, r26	; 0x0d
    1210:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1212:	6b 85       	ldd	r22, Y+11	; 0x0b
    1214:	7c 85       	ldd	r23, Y+12	; 0x0c
    1216:	8d 85       	ldd	r24, Y+13	; 0x0d
    1218:	9e 85       	ldd	r25, Y+14	; 0x0e
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	4a e7       	ldi	r20, 0x7A	; 122
    1220:	55 e4       	ldi	r21, 0x45	; 69
    1222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	8f 83       	std	Y+7, r24	; 0x07
    122c:	98 87       	std	Y+8, r25	; 0x08
    122e:	a9 87       	std	Y+9, r26	; 0x09
    1230:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1232:	6f 81       	ldd	r22, Y+7	; 0x07
    1234:	78 85       	ldd	r23, Y+8	; 0x08
    1236:	89 85       	ldd	r24, Y+9	; 0x09
    1238:	9a 85       	ldd	r25, Y+10	; 0x0a
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e8       	ldi	r20, 0x80	; 128
    1240:	5f e3       	ldi	r21, 0x3F	; 63
    1242:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1246:	88 23       	and	r24, r24
    1248:	2c f4       	brge	.+10     	; 0x1254 <DcMotor_CCW+0x78>
		__ticks = 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	9e 83       	std	Y+6, r25	; 0x06
    1250:	8d 83       	std	Y+5, r24	; 0x05
    1252:	3f c0       	rjmp	.+126    	; 0x12d2 <DcMotor_CCW+0xf6>
	else if (__tmp > 65535)
    1254:	6f 81       	ldd	r22, Y+7	; 0x07
    1256:	78 85       	ldd	r23, Y+8	; 0x08
    1258:	89 85       	ldd	r24, Y+9	; 0x09
    125a:	9a 85       	ldd	r25, Y+10	; 0x0a
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	3f ef       	ldi	r19, 0xFF	; 255
    1260:	4f e7       	ldi	r20, 0x7F	; 127
    1262:	57 e4       	ldi	r21, 0x47	; 71
    1264:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1268:	18 16       	cp	r1, r24
    126a:	4c f5       	brge	.+82     	; 0x12be <DcMotor_CCW+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126c:	6b 85       	ldd	r22, Y+11	; 0x0b
    126e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1270:	8d 85       	ldd	r24, Y+13	; 0x0d
    1272:	9e 85       	ldd	r25, Y+14	; 0x0e
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e2       	ldi	r20, 0x20	; 32
    127a:	51 e4       	ldi	r21, 0x41	; 65
    127c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	bc 01       	movw	r22, r24
    1286:	cd 01       	movw	r24, r26
    1288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9e 83       	std	Y+6, r25	; 0x06
    1292:	8d 83       	std	Y+5, r24	; 0x05
    1294:	0f c0       	rjmp	.+30     	; 0x12b4 <DcMotor_CCW+0xd8>
    1296:	80 e9       	ldi	r24, 0x90	; 144
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	9c 83       	std	Y+4, r25	; 0x04
    129c:	8b 83       	std	Y+3, r24	; 0x03
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <DcMotor_CCW+0xc6>
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	9e 83       	std	Y+6, r25	; 0x06
    12b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b4:	8d 81       	ldd	r24, Y+5	; 0x05
    12b6:	9e 81       	ldd	r25, Y+6	; 0x06
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	69 f7       	brne	.-38     	; 0x1296 <DcMotor_CCW+0xba>
    12bc:	14 c0       	rjmp	.+40     	; 0x12e6 <DcMotor_CCW+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12be:	6f 81       	ldd	r22, Y+7	; 0x07
    12c0:	78 85       	ldd	r23, Y+8	; 0x08
    12c2:	89 85       	ldd	r24, Y+9	; 0x09
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	9e 83       	std	Y+6, r25	; 0x06
    12d0:	8d 83       	std	Y+5, r24	; 0x05
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	f1 f7       	brne	.-4      	; 0x12de <DcMotor_CCW+0x102>
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	63 e0       	ldi	r22, 0x03	; 3
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_HIGH);
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	63 e0       	ldi	r22, 0x03	; 3
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
}
    12fa:	2e 96       	adiw	r28, 0x0e	; 14
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <DcMotor_Stop>:
void DcMotor_Stop()
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(1);
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	63 e0       	ldi	r22, 0x03	; 3
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_LOW);
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	64 e0       	ldi	r22, 0x04	; 4
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
}
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <DIO_u8SetPinDirection>:
#include "DIO_prv.h"
#include "DIO_cfg.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction )
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	28 97       	sbiw	r28, 0x08	; 8
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	8a 83       	std	Y+2, r24	; 0x02
    134c:	6b 83       	std	Y+3, r22	; 0x03
    134e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1350:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 30       	cpi	r24, 0x08	; 8
    1356:	08 f0       	brcs	.+2      	; 0x135a <DIO_u8SetPinDirection+0x24>
    1358:	f4 c0       	rjmp	.+488    	; 0x1542 <DIO_u8SetPinDirection+0x20c>
	{

		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	88 23       	and	r24, r24
    135e:	09 f0       	breq	.+2      	; 0x1362 <DIO_u8SetPinDirection+0x2c>
    1360:	77 c0       	rjmp	.+238    	; 0x1450 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	38 87       	std	Y+8, r19	; 0x08
    136a:	2f 83       	std	Y+7, r18	; 0x07
    136c:	8f 81       	ldd	r24, Y+7	; 0x07
    136e:	98 85       	ldd	r25, Y+8	; 0x08
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	91 05       	cpc	r25, r1
    1374:	59 f1       	breq	.+86     	; 0x13cc <DIO_u8SetPinDirection+0x96>
    1376:	2f 81       	ldd	r18, Y+7	; 0x07
    1378:	38 85       	ldd	r19, Y+8	; 0x08
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	2c f4       	brge	.+10     	; 0x138a <DIO_u8SetPinDirection+0x54>
    1380:	8f 81       	ldd	r24, Y+7	; 0x07
    1382:	98 85       	ldd	r25, Y+8	; 0x08
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f0       	breq	.+26     	; 0x13a2 <DIO_u8SetPinDirection+0x6c>
    1388:	60 c0       	rjmp	.+192    	; 0x144a <DIO_u8SetPinDirection+0x114>
    138a:	2f 81       	ldd	r18, Y+7	; 0x07
    138c:	38 85       	ldd	r19, Y+8	; 0x08
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	89 f1       	breq	.+98     	; 0x13f6 <DIO_u8SetPinDirection+0xc0>
    1394:	8f 81       	ldd	r24, Y+7	; 0x07
    1396:	98 85       	ldd	r25, Y+8	; 0x08
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	91 05       	cpc	r25, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <DIO_u8SetPinDirection+0x6a>
    139e:	40 c0       	rjmp	.+128    	; 0x1420 <DIO_u8SetPinDirection+0xea>
    13a0:	54 c0       	rjmp	.+168    	; 0x144a <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    13a2:	aa e3       	ldi	r26, 0x3A	; 58
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ea e3       	ldi	r30, 0x3A	; 58
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_u8SetPinDirection+0x8a>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DIO_u8SetPinDirection+0x86>
    13c4:	80 95       	com	r24
    13c6:	84 23       	and	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	bd c0       	rjmp	.+378    	; 0x1546 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    13cc:	a7 e3       	ldi	r26, 0x37	; 55
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e7 e3       	ldi	r30, 0x37	; 55
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_u8SetPinDirection+0xb4>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_u8SetPinDirection+0xb0>
    13ee:	80 95       	com	r24
    13f0:	84 23       	and	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	a8 c0       	rjmp	.+336    	; 0x1546 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    13f6:	a4 e3       	ldi	r26, 0x34	; 52
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e4 e3       	ldi	r30, 0x34	; 52
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_u8SetPinDirection+0xde>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_u8SetPinDirection+0xda>
    1418:	80 95       	com	r24
    141a:	84 23       	and	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	93 c0       	rjmp	.+294    	; 0x1546 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    1420:	a1 e3       	ldi	r26, 0x31	; 49
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e1 e3       	ldi	r30, 0x31	; 49
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_u8SetPinDirection+0x108>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_u8SetPinDirection+0x104>
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	7e c0       	rjmp	.+252    	; 0x1546 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	7b c0       	rjmp	.+246    	; 0x1546 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	09 f0       	breq	.+2      	; 0x1458 <DIO_u8SetPinDirection+0x122>
    1456:	72 c0       	rjmp	.+228    	; 0x153c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3e 83       	std	Y+6, r19	; 0x06
    1460:	2d 83       	std	Y+5, r18	; 0x05
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	91 05       	cpc	r25, r1
    146a:	49 f1       	breq	.+82     	; 0x14be <DIO_u8SetPinDirection+0x188>
    146c:	2d 81       	ldd	r18, Y+5	; 0x05
    146e:	3e 81       	ldd	r19, Y+6	; 0x06
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	2c f4       	brge	.+10     	; 0x1480 <DIO_u8SetPinDirection+0x14a>
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	61 f0       	breq	.+24     	; 0x1496 <DIO_u8SetPinDirection+0x160>
    147e:	5b c0       	rjmp	.+182    	; 0x1536 <DIO_u8SetPinDirection+0x200>
    1480:	2d 81       	ldd	r18, Y+5	; 0x05
    1482:	3e 81       	ldd	r19, Y+6	; 0x06
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	71 f1       	breq	.+92     	; 0x14e6 <DIO_u8SetPinDirection+0x1b0>
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	83 30       	cpi	r24, 0x03	; 3
    1490:	91 05       	cpc	r25, r1
    1492:	e9 f1       	breq	.+122    	; 0x150e <DIO_u8SetPinDirection+0x1d8>
    1494:	50 c0       	rjmp	.+160    	; 0x1536 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    1496:	aa e3       	ldi	r26, 0x3A	; 58
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	ea e3       	ldi	r30, 0x3A	; 58
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_u8SetPinDirection+0x17e>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_u8SetPinDirection+0x17a>
    14b8:	84 2b       	or	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	44 c0       	rjmp	.+136    	; 0x1546 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    14be:	a7 e3       	ldi	r26, 0x37	; 55
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e7 e3       	ldi	r30, 0x37	; 55
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_u8SetPinDirection+0x1a6>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_u8SetPinDirection+0x1a2>
    14e0:	84 2b       	or	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	30 c0       	rjmp	.+96     	; 0x1546 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    14e6:	a4 e3       	ldi	r26, 0x34	; 52
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e4 e3       	ldi	r30, 0x34	; 52
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_u8SetPinDirection+0x1ce>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_u8SetPinDirection+0x1ca>
    1508:	84 2b       	or	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	1c c0       	rjmp	.+56     	; 0x1546 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    150e:	a1 e3       	ldi	r26, 0x31	; 49
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e1 e3       	ldi	r30, 0x31	; 49
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_u8SetPinDirection+0x1f6>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_u8SetPinDirection+0x1f2>
    1530:	84 2b       	or	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	08 c0       	rjmp	.+16     	; 0x1546 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	05 c0       	rjmp	.+10     	; 0x1546 <DIO_u8SetPinDirection+0x210>
			}
		}

		else
		{
			Local_u8ErrorState = NOK;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1546:	89 81       	ldd	r24, Y+1	; 0x01
}
    1548:	28 96       	adiw	r28, 0x08	; 8
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <DIO_u8SetPinValue>:
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value )
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	28 97       	sbiw	r28, 0x08	; 8
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	8a 83       	std	Y+2, r24	; 0x02
    1570:	6b 83       	std	Y+3, r22	; 0x03
    1572:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1574:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	88 30       	cpi	r24, 0x08	; 8
    157a:	08 f0       	brcs	.+2      	; 0x157e <DIO_u8SetPinValue+0x24>
    157c:	f4 c0       	rjmp	.+488    	; 0x1766 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	88 23       	and	r24, r24
    1582:	09 f0       	breq	.+2      	; 0x1586 <DIO_u8SetPinValue+0x2c>
    1584:	77 c0       	rjmp	.+238    	; 0x1674 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	38 87       	std	Y+8, r19	; 0x08
    158e:	2f 83       	std	Y+7, r18	; 0x07
    1590:	8f 81       	ldd	r24, Y+7	; 0x07
    1592:	98 85       	ldd	r25, Y+8	; 0x08
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	59 f1       	breq	.+86     	; 0x15f0 <DIO_u8SetPinValue+0x96>
    159a:	2f 81       	ldd	r18, Y+7	; 0x07
    159c:	38 85       	ldd	r19, Y+8	; 0x08
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	2c f4       	brge	.+10     	; 0x15ae <DIO_u8SetPinValue+0x54>
    15a4:	8f 81       	ldd	r24, Y+7	; 0x07
    15a6:	98 85       	ldd	r25, Y+8	; 0x08
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	69 f0       	breq	.+26     	; 0x15c6 <DIO_u8SetPinValue+0x6c>
    15ac:	60 c0       	rjmp	.+192    	; 0x166e <DIO_u8SetPinValue+0x114>
    15ae:	2f 81       	ldd	r18, Y+7	; 0x07
    15b0:	38 85       	ldd	r19, Y+8	; 0x08
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	89 f1       	breq	.+98     	; 0x161a <DIO_u8SetPinValue+0xc0>
    15b8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ba:	98 85       	ldd	r25, Y+8	; 0x08
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <DIO_u8SetPinValue+0x6a>
    15c2:	40 c0       	rjmp	.+128    	; 0x1644 <DIO_u8SetPinValue+0xea>
    15c4:	54 c0       	rjmp	.+168    	; 0x166e <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    15c6:	ab e3       	ldi	r26, 0x3B	; 59
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	eb e3       	ldi	r30, 0x3B	; 59
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_u8SetPinValue+0x8a>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_u8SetPinValue+0x86>
    15e8:	80 95       	com	r24
    15ea:	84 23       	and	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	bd c0       	rjmp	.+378    	; 0x176a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    15f0:	a8 e3       	ldi	r26, 0x38	; 56
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e8 e3       	ldi	r30, 0x38	; 56
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_u8SetPinValue+0xb4>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_u8SetPinValue+0xb0>
    1612:	80 95       	com	r24
    1614:	84 23       	and	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	a8 c0       	rjmp	.+336    	; 0x176a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    161a:	a5 e3       	ldi	r26, 0x35	; 53
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e5 e3       	ldi	r30, 0x35	; 53
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <DIO_u8SetPinValue+0xde>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <DIO_u8SetPinValue+0xda>
    163c:	80 95       	com	r24
    163e:	84 23       	and	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	93 c0       	rjmp	.+294    	; 0x176a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    1644:	a2 e3       	ldi	r26, 0x32	; 50
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e2 e3       	ldi	r30, 0x32	; 50
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_u8SetPinValue+0x108>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_u8SetPinValue+0x104>
    1666:	80 95       	com	r24
    1668:	84 23       	and	r24, r20
    166a:	8c 93       	st	X, r24
    166c:	7e c0       	rjmp	.+252    	; 0x176a <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	7b c0       	rjmp	.+246    	; 0x176a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	09 f0       	breq	.+2      	; 0x167c <DIO_u8SetPinValue+0x122>
    167a:	72 c0       	rjmp	.+228    	; 0x1760 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3e 83       	std	Y+6, r19	; 0x06
    1684:	2d 83       	std	Y+5, r18	; 0x05
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	91 05       	cpc	r25, r1
    168e:	49 f1       	breq	.+82     	; 0x16e2 <DIO_u8SetPinValue+0x188>
    1690:	2d 81       	ldd	r18, Y+5	; 0x05
    1692:	3e 81       	ldd	r19, Y+6	; 0x06
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	2c f4       	brge	.+10     	; 0x16a4 <DIO_u8SetPinValue+0x14a>
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	61 f0       	breq	.+24     	; 0x16ba <DIO_u8SetPinValue+0x160>
    16a2:	5b c0       	rjmp	.+182    	; 0x175a <DIO_u8SetPinValue+0x200>
    16a4:	2d 81       	ldd	r18, Y+5	; 0x05
    16a6:	3e 81       	ldd	r19, Y+6	; 0x06
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	71 f1       	breq	.+92     	; 0x170a <DIO_u8SetPinValue+0x1b0>
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	91 05       	cpc	r25, r1
    16b6:	e9 f1       	breq	.+122    	; 0x1732 <DIO_u8SetPinValue+0x1d8>
    16b8:	50 c0       	rjmp	.+160    	; 0x175a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    16ba:	ab e3       	ldi	r26, 0x3B	; 59
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	eb e3       	ldi	r30, 0x3B	; 59
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_u8SetPinValue+0x17e>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_u8SetPinValue+0x17a>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	44 c0       	rjmp	.+136    	; 0x176a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    16e2:	a8 e3       	ldi	r26, 0x38	; 56
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e8 e3       	ldi	r30, 0x38	; 56
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_u8SetPinValue+0x1a6>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_u8SetPinValue+0x1a2>
    1704:	84 2b       	or	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	30 c0       	rjmp	.+96     	; 0x176a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    170a:	a5 e3       	ldi	r26, 0x35	; 53
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e5 e3       	ldi	r30, 0x35	; 53
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_u8SetPinValue+0x1ce>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_u8SetPinValue+0x1ca>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	1c c0       	rjmp	.+56     	; 0x176a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    1732:	a2 e3       	ldi	r26, 0x32	; 50
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e2 e3       	ldi	r30, 0x32	; 50
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <DIO_u8SetPinValue+0x1f6>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <DIO_u8SetPinValue+0x1f2>
    1754:	84 2b       	or	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	08 c0       	rjmp	.+16     	; 0x176a <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	05 c0       	rjmp	.+10     	; 0x176a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    176a:	89 81       	ldd	r24, Y+1	; 0x01
}
    176c:	28 96       	adiw	r28, 0x08	; 8
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <DIO_u8ReadPinValue>:
uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	27 97       	sbiw	r28, 0x07	; 7
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	8a 83       	std	Y+2, r24	; 0x02
    1794:	6b 83       	std	Y+3, r22	; 0x03
    1796:	5d 83       	std	Y+5, r21	; 0x05
    1798:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    179a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value != NULL)
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	9d 81       	ldd	r25, Y+5	; 0x05
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <DIO_u8ReadPinValue+0x28>
    17a4:	7b c0       	rjmp	.+246    	; 0x189c <DIO_u8ReadPinValue+0x11e>
	{
		if(Copy_u8Pin <=DIO_u8PIN7)
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	88 30       	cpi	r24, 0x08	; 8
    17aa:	08 f0       	brcs	.+2      	; 0x17ae <DIO_u8ReadPinValue+0x30>
    17ac:	74 c0       	rjmp	.+232    	; 0x1896 <DIO_u8ReadPinValue+0x118>
		{
			switch(Copy_u8Port)
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	3f 83       	std	Y+7, r19	; 0x07
    17b6:	2e 83       	std	Y+6, r18	; 0x06
    17b8:	4e 81       	ldd	r20, Y+6	; 0x06
    17ba:	5f 81       	ldd	r21, Y+7	; 0x07
    17bc:	41 30       	cpi	r20, 0x01	; 1
    17be:	51 05       	cpc	r21, r1
    17c0:	59 f1       	breq	.+86     	; 0x1818 <DIO_u8ReadPinValue+0x9a>
    17c2:	8e 81       	ldd	r24, Y+6	; 0x06
    17c4:	9f 81       	ldd	r25, Y+7	; 0x07
    17c6:	82 30       	cpi	r24, 0x02	; 2
    17c8:	91 05       	cpc	r25, r1
    17ca:	34 f4       	brge	.+12     	; 0x17d8 <DIO_u8ReadPinValue+0x5a>
    17cc:	2e 81       	ldd	r18, Y+6	; 0x06
    17ce:	3f 81       	ldd	r19, Y+7	; 0x07
    17d0:	21 15       	cp	r18, r1
    17d2:	31 05       	cpc	r19, r1
    17d4:	69 f0       	breq	.+26     	; 0x17f0 <DIO_u8ReadPinValue+0x72>
    17d6:	5c c0       	rjmp	.+184    	; 0x1890 <DIO_u8ReadPinValue+0x112>
    17d8:	4e 81       	ldd	r20, Y+6	; 0x06
    17da:	5f 81       	ldd	r21, Y+7	; 0x07
    17dc:	42 30       	cpi	r20, 0x02	; 2
    17de:	51 05       	cpc	r21, r1
    17e0:	79 f1       	breq	.+94     	; 0x1840 <DIO_u8ReadPinValue+0xc2>
    17e2:	8e 81       	ldd	r24, Y+6	; 0x06
    17e4:	9f 81       	ldd	r25, Y+7	; 0x07
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	91 05       	cpc	r25, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <DIO_u8ReadPinValue+0x70>
    17ec:	3d c0       	rjmp	.+122    	; 0x1868 <DIO_u8ReadPinValue+0xea>
    17ee:	50 c0       	rjmp	.+160    	; 0x1890 <DIO_u8ReadPinValue+0x112>
			{
			case DIO_u8PORTA :*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    17f0:	e9 e3       	ldi	r30, 0x39	; 57
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a9 01       	movw	r20, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_u8ReadPinValue+0x8a>
    1804:	55 95       	asr	r21
    1806:	47 95       	ror	r20
    1808:	8a 95       	dec	r24
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <DIO_u8ReadPinValue+0x86>
    180c:	ca 01       	movw	r24, r20
    180e:	81 70       	andi	r24, 0x01	; 1
    1810:	ec 81       	ldd	r30, Y+4	; 0x04
    1812:	fd 81       	ldd	r31, Y+5	; 0x05
    1814:	80 83       	st	Z, r24
    1816:	44 c0       	rjmp	.+136    	; 0x18a0 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTB :*Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1818:	e6 e3       	ldi	r30, 0x36	; 54
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a9 01       	movw	r20, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_u8ReadPinValue+0xb2>
    182c:	55 95       	asr	r21
    182e:	47 95       	ror	r20
    1830:	8a 95       	dec	r24
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_u8ReadPinValue+0xae>
    1834:	ca 01       	movw	r24, r20
    1836:	81 70       	andi	r24, 0x01	; 1
    1838:	ec 81       	ldd	r30, Y+4	; 0x04
    183a:	fd 81       	ldd	r31, Y+5	; 0x05
    183c:	80 83       	st	Z, r24
    183e:	30 c0       	rjmp	.+96     	; 0x18a0 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTC :*Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1840:	e3 e3       	ldi	r30, 0x33	; 51
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a9 01       	movw	r20, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <DIO_u8ReadPinValue+0xda>
    1854:	55 95       	asr	r21
    1856:	47 95       	ror	r20
    1858:	8a 95       	dec	r24
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <DIO_u8ReadPinValue+0xd6>
    185c:	ca 01       	movw	r24, r20
    185e:	81 70       	andi	r24, 0x01	; 1
    1860:	ec 81       	ldd	r30, Y+4	; 0x04
    1862:	fd 81       	ldd	r31, Y+5	; 0x05
    1864:	80 83       	st	Z, r24
    1866:	1c c0       	rjmp	.+56     	; 0x18a0 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTD :*Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1868:	e0 e3       	ldi	r30, 0x30	; 48
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a9 01       	movw	r20, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_u8ReadPinValue+0x102>
    187c:	55 95       	asr	r21
    187e:	47 95       	ror	r20
    1880:	8a 95       	dec	r24
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_u8ReadPinValue+0xfe>
    1884:	ca 01       	movw	r24, r20
    1886:	81 70       	andi	r24, 0x01	; 1
    1888:	ec 81       	ldd	r30, Y+4	; 0x04
    188a:	fd 81       	ldd	r31, Y+5	; 0x05
    188c:	80 83       	st	Z, r24
    188e:	08 c0       	rjmp	.+16     	; 0x18a0 <DIO_u8ReadPinValue+0x122>
			default : Local_u8ErrorState = NOK; 		 break;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <DIO_u8ReadPinValue+0x122>
			}
		}
		else
		{
			/*Pin number is invalid*/
			Local_u8ErrorState = NOK;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <DIO_u8ReadPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    189c:	82 e0       	ldi	r24, 0x02	; 2
    189e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a2:	27 96       	adiw	r28, 0x07	; 7
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <DIO_u8SetPortDirection>:


uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction )
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <DIO_u8SetPortDirection+0x6>
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <DIO_u8SetPortDirection+0x8>
    18bc:	0f 92       	push	r0
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	8a 83       	std	Y+2, r24	; 0x02
    18c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    18c6:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	3d 83       	std	Y+5, r19	; 0x05
    18d0:	2c 83       	std	Y+4, r18	; 0x04
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	9d 81       	ldd	r25, Y+5	; 0x05
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	91 05       	cpc	r25, r1
    18da:	d1 f0       	breq	.+52     	; 0x1910 <DIO_u8SetPortDirection+0x5c>
    18dc:	2c 81       	ldd	r18, Y+4	; 0x04
    18de:	3d 81       	ldd	r19, Y+5	; 0x05
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <DIO_u8SetPortDirection+0x3c>
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	61 f0       	breq	.+24     	; 0x1906 <DIO_u8SetPortDirection+0x52>
    18ee:	1f c0       	rjmp	.+62     	; 0x192e <DIO_u8SetPortDirection+0x7a>
    18f0:	2c 81       	ldd	r18, Y+4	; 0x04
    18f2:	3d 81       	ldd	r19, Y+5	; 0x05
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	31 05       	cpc	r19, r1
    18f8:	81 f0       	breq	.+32     	; 0x191a <DIO_u8SetPortDirection+0x66>
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	9d 81       	ldd	r25, Y+5	; 0x05
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	91 05       	cpc	r25, r1
    1902:	81 f0       	breq	.+32     	; 0x1924 <DIO_u8SetPortDirection+0x70>
    1904:	14 c0       	rjmp	.+40     	; 0x192e <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    1906:	ea e3       	ldi	r30, 0x3A	; 58
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	80 83       	st	Z, r24
    190e:	11 c0       	rjmp	.+34     	; 0x1932 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    1910:	e7 e3       	ldi	r30, 0x37	; 55
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	80 83       	st	Z, r24
    1918:	0c c0       	rjmp	.+24     	; 0x1932 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    191a:	e4 e3       	ldi	r30, 0x34	; 52
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	80 83       	st	Z, r24
    1922:	07 c0       	rjmp	.+14     	; 0x1932 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    1924:	e1 e3       	ldi	r30, 0x31	; 49
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	80 83       	st	Z, r24
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK; 		break;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value )
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <DIO_u8SetPortValue+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <DIO_u8SetPortValue+0x8>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	8a 83       	std	Y+2, r24	; 0x02
    1954:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1956:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3d 83       	std	Y+5, r19	; 0x05
    1960:	2c 83       	std	Y+4, r18	; 0x04
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	91 05       	cpc	r25, r1
    196a:	d1 f0       	breq	.+52     	; 0x19a0 <DIO_u8SetPortValue+0x5c>
    196c:	2c 81       	ldd	r18, Y+4	; 0x04
    196e:	3d 81       	ldd	r19, Y+5	; 0x05
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	2c f4       	brge	.+10     	; 0x1980 <DIO_u8SetPortValue+0x3c>
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	9d 81       	ldd	r25, Y+5	; 0x05
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	61 f0       	breq	.+24     	; 0x1996 <DIO_u8SetPortValue+0x52>
    197e:	1f c0       	rjmp	.+62     	; 0x19be <DIO_u8SetPortValue+0x7a>
    1980:	2c 81       	ldd	r18, Y+4	; 0x04
    1982:	3d 81       	ldd	r19, Y+5	; 0x05
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	81 f0       	breq	.+32     	; 0x19aa <DIO_u8SetPortValue+0x66>
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	9d 81       	ldd	r25, Y+5	; 0x05
    198e:	83 30       	cpi	r24, 0x03	; 3
    1990:	91 05       	cpc	r25, r1
    1992:	81 f0       	breq	.+32     	; 0x19b4 <DIO_u8SetPortValue+0x70>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    1996:	eb e3       	ldi	r30, 0x3B	; 59
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	80 83       	st	Z, r24
    199e:	11 c0       	rjmp	.+34     	; 0x19c2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    19a0:	e8 e3       	ldi	r30, 0x38	; 56
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	80 83       	st	Z, r24
    19a8:	0c c0       	rjmp	.+24     	; 0x19c2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    19aa:	e5 e3       	ldi	r30, 0x35	; 53
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	80 83       	st	Z, r24
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    19b4:	e2 e3       	ldi	r30, 0x32	; 50
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	80 83       	st	Z, r24
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState = NOK; 	 break;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <DIO_u8TogglePinValue+0x6>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <DIO_u8TogglePinValue+0x8>
    19dc:	0f 92       	push	r0
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	8a 83       	std	Y+2, r24	; 0x02
    19e4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    19e6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	88 30       	cpi	r24, 0x08	; 8
    19ec:	08 f0       	brcs	.+2      	; 0x19f0 <DIO_u8TogglePinValue+0x1c>
    19ee:	72 c0       	rjmp	.+228    	; 0x1ad4 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	3d 83       	std	Y+5, r19	; 0x05
    19f8:	2c 83       	std	Y+4, r18	; 0x04
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	9d 81       	ldd	r25, Y+5	; 0x05
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	91 05       	cpc	r25, r1
    1a02:	49 f1       	breq	.+82     	; 0x1a56 <DIO_u8TogglePinValue+0x82>
    1a04:	2c 81       	ldd	r18, Y+4	; 0x04
    1a06:	3d 81       	ldd	r19, Y+5	; 0x05
    1a08:	22 30       	cpi	r18, 0x02	; 2
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <DIO_u8TogglePinValue+0x44>
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	9d 81       	ldd	r25, Y+5	; 0x05
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	61 f0       	breq	.+24     	; 0x1a2e <DIO_u8TogglePinValue+0x5a>
    1a16:	5b c0       	rjmp	.+182    	; 0x1ace <DIO_u8TogglePinValue+0xfa>
    1a18:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	71 f1       	breq	.+92     	; 0x1a7e <DIO_u8TogglePinValue+0xaa>
    1a22:	8c 81       	ldd	r24, Y+4	; 0x04
    1a24:	9d 81       	ldd	r25, Y+5	; 0x05
    1a26:	83 30       	cpi	r24, 0x03	; 3
    1a28:	91 05       	cpc	r25, r1
    1a2a:	e9 f1       	breq	.+122    	; 0x1aa6 <DIO_u8TogglePinValue+0xd2>
    1a2c:	50 c0       	rjmp	.+160    	; 0x1ace <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin); break;
    1a2e:	ab e3       	ldi	r26, 0x3B	; 59
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	eb e3       	ldi	r30, 0x3B	; 59
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <DIO_u8TogglePinValue+0x78>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <DIO_u8TogglePinValue+0x74>
    1a50:	84 27       	eor	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	41 c0       	rjmp	.+130    	; 0x1ad8 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin); break;
    1a56:	a8 e3       	ldi	r26, 0x38	; 56
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e8 e3       	ldi	r30, 0x38	; 56
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_u8TogglePinValue+0xa0>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_u8TogglePinValue+0x9c>
    1a78:	84 27       	eor	r24, r20
    1a7a:	8c 93       	st	X, r24
    1a7c:	2d c0       	rjmp	.+90     	; 0x1ad8 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC : TOG_BIT(PORTC,Copy_u8Pin); break;
    1a7e:	a5 e3       	ldi	r26, 0x35	; 53
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e5 e3       	ldi	r30, 0x35	; 53
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <DIO_u8TogglePinValue+0xc8>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <DIO_u8TogglePinValue+0xc4>
    1aa0:	84 27       	eor	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	19 c0       	rjmp	.+50     	; 0x1ad8 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD : TOG_BIT(PORTD,Copy_u8Pin); break;
    1aa6:	a2 e3       	ldi	r26, 0x32	; 50
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e2 e3       	ldi	r30, 0x32	; 50
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_u8TogglePinValue+0xf0>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_u8TogglePinValue+0xec>
    1ac8:	84 27       	eor	r24, r20
    1aca:	8c 93       	st	X, r24
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <DIO_u8TogglePinValue+0x104>
		default : Local_u8ErrorState = NOK; 		 break;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <EXTI_voidInit>:
#include "EXTI_cfg.h"


static void (*EXTI_pvCallBack[3])(void)={0};
void EXTI_voidInit(void )
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE_CTRL == EXTI_ON_CHANGE
	SET_BIT(MCUCR , MCUCR_ISC00);
	CLR_BIT(MCUCR , MCUCR_ISC01);

#elif INT0_SENSE_CTRL == EXTI_FALLING_EDGE
	CLR_BIT(MCUCR , MCUCR_ISC00);
    1af2:	a5 e5       	ldi	r26, 0x55	; 85
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e5 e5       	ldi	r30, 0x55	; 85
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8e 7f       	andi	r24, 0xFE	; 254
    1afe:	8c 93       	st	X, r24
	SET_BIT(MCUCR , MCUCR_ISC01);
    1b00:	a5 e5       	ldi	r26, 0x55	; 85
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e5 e5       	ldi	r30, 0x55	; 85
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	82 60       	ori	r24, 0x02	; 2
    1b0c:	8c 93       	st	X, r24
#elif INT1_SENSE_CTRL ==EXTI_ON_CHANGE
	SET_BIT(MCUCR , MCUCR_ISC10);
	CLR_BIT(MCUCR , MCUCR_ISC11);

#elif INT1_SENSE_CTRL ==EXTI_FALLING_EDGE
	CLR_BIT(MCUCR , MCUCR_ISC10);
    1b0e:	a5 e5       	ldi	r26, 0x55	; 85
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e5 e5       	ldi	r30, 0x55	; 85
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	8b 7f       	andi	r24, 0xFB	; 251
    1b1a:	8c 93       	st	X, r24
	SET_BIT(MCUCR , MCUCR_ISC11);
    1b1c:	a5 e5       	ldi	r26, 0x55	; 85
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e5 e5       	ldi	r30, 0x55	; 85
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	88 60       	ori	r24, 0x08	; 8
    1b28:	8c 93       	st	X, r24
#error Wrong 	 INT1_SENSE_CTRL configuration option
#endif


#if   INT2_SENSE_CTRL ==EXTI_FALLING_EDGE
	CLR_BIT(MCUCSR , MCUCSR_ISC2);
    1b2a:	a4 e5       	ldi	r26, 0x54	; 84
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e4 e5       	ldi	r30, 0x54	; 84
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	8f 7b       	andi	r24, 0xBF	; 191
    1b36:	8c 93       	st	X, r24

#if INT0_INIT_STATE == DISABLED
	CLR_BIT(GICR , GICR_INT0);

#elif INT0_INIT_STATE == ENABLED
	SET_BIT(GICR , GICR_INT0);
    1b38:	ab e5       	ldi	r26, 0x5B	; 91
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	eb e5       	ldi	r30, 0x5B	; 91
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	80 64       	ori	r24, 0x40	; 64
    1b44:	8c 93       	st	X, r24

#if INT1_INIT_STATE == DISABLED
	CLR_BIT(GICR , GICR_INT1);

#elif INT1_INIT_STATE == ENABLED
	SET_BIT(GICR , GICR_INT1);
    1b46:	ab e5       	ldi	r26, 0x5B	; 91
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	eb e5       	ldi	r30, 0x5B	; 91
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	80 68       	ori	r24, 0x80	; 128
    1b52:	8c 93       	st	X, r24
#endif



#if INT2_INIT_STATE == DISABLED
	CLR_BIT(GICR , GICR_INT2);
    1b54:	ab e5       	ldi	r26, 0x5B	; 91
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	eb e5       	ldi	r30, 0x5B	; 91
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8f 7d       	andi	r24, 0xDF	; 223
    1b60:	8c 93       	st	X, r24
#elif INT2_INIT_STATE == ENABLED
	SET_BIT(GICR , GICR_INT2);
#else #error Wrong 	 INT2_SENSE_CTRL configuration option
#endif

}
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <EXTI_u8SetSenseCtrl>:

uint8 EXTI_u8SetSenseCtrl(IntChannel_t Copy_IntCh,SenseCtrl_t Copy_SenseCtrl  )
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	29 97       	sbiw	r28, 0x09	; 9
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
    1b7e:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState = OK;
    1b80:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_IntCh == INT0)
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	88 23       	and	r24, r24
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <EXTI_u8SetSenseCtrl+0x22>
    1b88:	5e c0       	rjmp	.+188    	; 0x1c46 <EXTI_u8SetSenseCtrl+0xde>
	{
		switch(Copy_SenseCtrl)
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	39 87       	std	Y+9, r19	; 0x09
    1b92:	28 87       	std	Y+8, r18	; 0x08
    1b94:	88 85       	ldd	r24, Y+8	; 0x08
    1b96:	99 85       	ldd	r25, Y+9	; 0x09
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	21 f1       	breq	.+72     	; 0x1be6 <EXTI_u8SetSenseCtrl+0x7e>
    1b9e:	28 85       	ldd	r18, Y+8	; 0x08
    1ba0:	39 85       	ldd	r19, Y+9	; 0x09
    1ba2:	22 30       	cpi	r18, 0x02	; 2
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <EXTI_u8SetSenseCtrl+0x4a>
    1ba8:	88 85       	ldd	r24, Y+8	; 0x08
    1baa:	99 85       	ldd	r25, Y+9	; 0x09
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	61 f0       	breq	.+24     	; 0x1bc8 <EXTI_u8SetSenseCtrl+0x60>
    1bb0:	47 c0       	rjmp	.+142    	; 0x1c40 <EXTI_u8SetSenseCtrl+0xd8>
    1bb2:	28 85       	ldd	r18, Y+8	; 0x08
    1bb4:	39 85       	ldd	r19, Y+9	; 0x09
    1bb6:	22 30       	cpi	r18, 0x02	; 2
    1bb8:	31 05       	cpc	r19, r1
    1bba:	99 f1       	breq	.+102    	; 0x1c22 <EXTI_u8SetSenseCtrl+0xba>
    1bbc:	88 85       	ldd	r24, Y+8	; 0x08
    1bbe:	99 85       	ldd	r25, Y+9	; 0x09
    1bc0:	83 30       	cpi	r24, 0x03	; 3
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	f9 f0       	breq	.+62     	; 0x1c04 <EXTI_u8SetSenseCtrl+0x9c>
    1bc6:	3c c0       	rjmp	.+120    	; 0x1c40 <EXTI_u8SetSenseCtrl+0xd8>
		{
		case LOW_LEVEL   : CLR_BIT(MCUCR , MCUCR_ISC00);CLR_BIT(MCUCR , MCUCR_ISC01);   break;
    1bc8:	a5 e5       	ldi	r26, 0x55	; 85
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e5 e5       	ldi	r30, 0x55	; 85
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	8e 7f       	andi	r24, 0xFE	; 254
    1bd4:	8c 93       	st	X, r24
    1bd6:	a5 e5       	ldi	r26, 0x55	; 85
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e5 e5       	ldi	r30, 0x55	; 85
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8d 7f       	andi	r24, 0xFD	; 253
    1be2:	8c 93       	st	X, r24
    1be4:	c7 c0       	rjmp	.+398    	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		case ON_CHANGE   : SET_BIT(MCUCR , MCUCR_ISC00);CLR_BIT(MCUCR , MCUCR_ISC01);   break;
    1be6:	a5 e5       	ldi	r26, 0x55	; 85
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e5 e5       	ldi	r30, 0x55	; 85
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	81 60       	ori	r24, 0x01	; 1
    1bf2:	8c 93       	st	X, r24
    1bf4:	a5 e5       	ldi	r26, 0x55	; 85
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e5 e5       	ldi	r30, 0x55	; 85
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8d 7f       	andi	r24, 0xFD	; 253
    1c00:	8c 93       	st	X, r24
    1c02:	b8 c0       	rjmp	.+368    	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		case RISING_EDGE : CLR_BIT(MCUCR , MCUCR_ISC00);SET_BIT(MCUCR , MCUCR_ISC01); break;
    1c04:	a5 e5       	ldi	r26, 0x55	; 85
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e5 e5       	ldi	r30, 0x55	; 85
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8e 7f       	andi	r24, 0xFE	; 254
    1c10:	8c 93       	st	X, r24
    1c12:	a5 e5       	ldi	r26, 0x55	; 85
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e5 e5       	ldi	r30, 0x55	; 85
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	82 60       	ori	r24, 0x02	; 2
    1c1e:	8c 93       	st	X, r24
    1c20:	a9 c0       	rjmp	.+338    	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		case FALLING_EDGE: SET_BIT(MCUCR , MCUCR_ISC00);SET_BIT(MCUCR , MCUCR_ISC01);break;
    1c22:	a5 e5       	ldi	r26, 0x55	; 85
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e5 e5       	ldi	r30, 0x55	; 85
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	81 60       	ori	r24, 0x01	; 1
    1c2e:	8c 93       	st	X, r24
    1c30:	a5 e5       	ldi	r26, 0x55	; 85
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e5 e5       	ldi	r30, 0x55	; 85
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	82 60       	ori	r24, 0x02	; 2
    1c3c:	8c 93       	st	X, r24
    1c3e:	9a c0       	rjmp	.+308    	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		default           :Local_u8ErrorState = NOK; break;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	97 c0       	rjmp	.+302    	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		}
	}
	else if(Copy_IntCh == INT1)
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <EXTI_u8SetSenseCtrl+0xe6>
    1c4c:	5e c0       	rjmp	.+188    	; 0x1d0a <EXTI_u8SetSenseCtrl+0x1a2>
	{
		switch(Copy_SenseCtrl)
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	3f 83       	std	Y+7, r19	; 0x07
    1c56:	2e 83       	std	Y+6, r18	; 0x06
    1c58:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	91 05       	cpc	r25, r1
    1c60:	21 f1       	breq	.+72     	; 0x1caa <EXTI_u8SetSenseCtrl+0x142>
    1c62:	2e 81       	ldd	r18, Y+6	; 0x06
    1c64:	3f 81       	ldd	r19, Y+7	; 0x07
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <EXTI_u8SetSenseCtrl+0x10e>
    1c6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	61 f0       	breq	.+24     	; 0x1c8c <EXTI_u8SetSenseCtrl+0x124>
    1c74:	47 c0       	rjmp	.+142    	; 0x1d04 <EXTI_u8SetSenseCtrl+0x19c>
    1c76:	2e 81       	ldd	r18, Y+6	; 0x06
    1c78:	3f 81       	ldd	r19, Y+7	; 0x07
    1c7a:	22 30       	cpi	r18, 0x02	; 2
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	99 f1       	breq	.+102    	; 0x1ce6 <EXTI_u8SetSenseCtrl+0x17e>
    1c80:	8e 81       	ldd	r24, Y+6	; 0x06
    1c82:	9f 81       	ldd	r25, Y+7	; 0x07
    1c84:	83 30       	cpi	r24, 0x03	; 3
    1c86:	91 05       	cpc	r25, r1
    1c88:	f9 f0       	breq	.+62     	; 0x1cc8 <EXTI_u8SetSenseCtrl+0x160>
    1c8a:	3c c0       	rjmp	.+120    	; 0x1d04 <EXTI_u8SetSenseCtrl+0x19c>
		{
		case LOW_LEVEL    : CLR_BIT(MCUCR , MCUCR_ISC10);CLR_BIT(MCUCR , MCUCR_ISC11);   break;
    1c8c:	a5 e5       	ldi	r26, 0x55	; 85
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e5 e5       	ldi	r30, 0x55	; 85
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	8b 7f       	andi	r24, 0xFB	; 251
    1c98:	8c 93       	st	X, r24
    1c9a:	a5 e5       	ldi	r26, 0x55	; 85
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e5 e5       	ldi	r30, 0x55	; 85
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	87 7f       	andi	r24, 0xF7	; 247
    1ca6:	8c 93       	st	X, r24
    1ca8:	65 c0       	rjmp	.+202    	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		case ON_CHANGE    : SET_BIT(MCUCR , MCUCR_ISC10);CLR_BIT(MCUCR , MCUCR_ISC11);   break;
    1caa:	a5 e5       	ldi	r26, 0x55	; 85
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e5 e5       	ldi	r30, 0x55	; 85
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	84 60       	ori	r24, 0x04	; 4
    1cb6:	8c 93       	st	X, r24
    1cb8:	a5 e5       	ldi	r26, 0x55	; 85
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e5 e5       	ldi	r30, 0x55	; 85
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	87 7f       	andi	r24, 0xF7	; 247
    1cc4:	8c 93       	st	X, r24
    1cc6:	56 c0       	rjmp	.+172    	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		case RISING_EDGE  : CLR_BIT(MCUCR , MCUCR_ISC10);SET_BIT(MCUCR , MCUCR_ISC11); break;
    1cc8:	a5 e5       	ldi	r26, 0x55	; 85
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e5 e5       	ldi	r30, 0x55	; 85
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8b 7f       	andi	r24, 0xFB	; 251
    1cd4:	8c 93       	st	X, r24
    1cd6:	a5 e5       	ldi	r26, 0x55	; 85
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e5 e5       	ldi	r30, 0x55	; 85
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	88 60       	ori	r24, 0x08	; 8
    1ce2:	8c 93       	st	X, r24
    1ce4:	47 c0       	rjmp	.+142    	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		case FALLING_EDGE : SET_BIT(MCUCR , MCUCR_ISC10);SET_BIT(MCUCR , MCUCR_ISC11);break;
    1ce6:	a5 e5       	ldi	r26, 0x55	; 85
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e5 e5       	ldi	r30, 0x55	; 85
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	84 60       	ori	r24, 0x04	; 4
    1cf2:	8c 93       	st	X, r24
    1cf4:	a5 e5       	ldi	r26, 0x55	; 85
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e5 e5       	ldi	r30, 0x55	; 85
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	88 60       	ori	r24, 0x08	; 8
    1d00:	8c 93       	st	X, r24
    1d02:	38 c0       	rjmp	.+112    	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		default           :Local_u8ErrorState = NOK; break;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	35 c0       	rjmp	.+106    	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		}
	}
	else if(Copy_IntCh == INT2)
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	82 30       	cpi	r24, 0x02	; 2
    1d0e:	81 f5       	brne	.+96     	; 0x1d70 <EXTI_u8SetSenseCtrl+0x208>
	{
		switch(Copy_SenseCtrl)
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	3d 83       	std	Y+5, r19	; 0x05
    1d18:	2c 83       	std	Y+4, r18	; 0x04
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	82 30       	cpi	r24, 0x02	; 2
    1d20:	91 05       	cpc	r25, r1
    1d22:	a1 f0       	breq	.+40     	; 0x1d4c <EXTI_u8SetSenseCtrl+0x1e4>
    1d24:	2c 81       	ldd	r18, Y+4	; 0x04
    1d26:	3d 81       	ldd	r19, Y+5	; 0x05
    1d28:	23 30       	cpi	r18, 0x03	; 3
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	f1 f4       	brne	.+60     	; 0x1d6a <EXTI_u8SetSenseCtrl+0x202>
		{
		case RISING_EDGE : CLR_BIT(MCUCR , MCUCR_ISC10);SET_BIT(MCUCSR , MCUCSR_ISC2); break;
    1d2e:	a5 e5       	ldi	r26, 0x55	; 85
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e5 e5       	ldi	r30, 0x55	; 85
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	8b 7f       	andi	r24, 0xFB	; 251
    1d3a:	8c 93       	st	X, r24
    1d3c:	a4 e5       	ldi	r26, 0x54	; 84
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e4 e5       	ldi	r30, 0x54	; 84
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	80 64       	ori	r24, 0x40	; 64
    1d48:	8c 93       	st	X, r24
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		case FALLING_EDGE: SET_BIT(MCUCR , MCUCR_ISC10);SET_BIT(MCUCSR , MCUCSR_ISC2);break;
    1d4c:	a5 e5       	ldi	r26, 0x55	; 85
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e5 e5       	ldi	r30, 0x55	; 85
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	84 60       	ori	r24, 0x04	; 4
    1d58:	8c 93       	st	X, r24
    1d5a:	a4 e5       	ldi	r26, 0x54	; 84
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e4 e5       	ldi	r30, 0x54	; 84
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	80 64       	ori	r24, 0x40	; 64
    1d66:	8c 93       	st	X, r24
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		default :Local_u8ErrorState = NOK; break;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <EXTI_u8SetSenseCtrl+0x20c>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1d74:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d76:	29 96       	adiw	r28, 0x09	; 9
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <EXTI_u8EnableIntChannel>:




uint8 EXTI_u8EnableIntChannel(IntChannel_t Copy_IntCh)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <EXTI_u8EnableIntChannel+0x6>
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <EXTI_u8EnableIntChannel+0x8>
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8ErrorState = OK;
    1d96:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_IntCh)
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3c 83       	std	Y+4, r19	; 0x04
    1da0:	2b 83       	std	Y+3, r18	; 0x03
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	81 30       	cpi	r24, 0x01	; 1
    1da8:	91 05       	cpc	r25, r1
    1daa:	89 f0       	breq	.+34     	; 0x1dce <EXTI_u8EnableIntChannel+0x46>
    1dac:	2b 81       	ldd	r18, Y+3	; 0x03
    1dae:	3c 81       	ldd	r19, Y+4	; 0x04
    1db0:	22 30       	cpi	r18, 0x02	; 2
    1db2:	31 05       	cpc	r19, r1
    1db4:	a1 f0       	breq	.+40     	; 0x1dde <EXTI_u8EnableIntChannel+0x56>
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	c1 f4       	brne	.+48     	; 0x1dee <EXTI_u8EnableIntChannel+0x66>
	{
	case INT0 : SET_BIT(GICR , GICR_INT0);break;
    1dbe:	ab e5       	ldi	r26, 0x5B	; 91
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	eb e5       	ldi	r30, 0x5B	; 91
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 64       	ori	r24, 0x40	; 64
    1dca:	8c 93       	st	X, r24
    1dcc:	12 c0       	rjmp	.+36     	; 0x1df2 <EXTI_u8EnableIntChannel+0x6a>
	case INT1 : SET_BIT(GICR , GICR_INT1);break;
    1dce:	ab e5       	ldi	r26, 0x5B	; 91
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	eb e5       	ldi	r30, 0x5B	; 91
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	80 68       	ori	r24, 0x80	; 128
    1dda:	8c 93       	st	X, r24
    1ddc:	0a c0       	rjmp	.+20     	; 0x1df2 <EXTI_u8EnableIntChannel+0x6a>
	case INT2 : SET_BIT(GICR , GICR_INT2);break;
    1dde:	ab e5       	ldi	r26, 0x5B	; 91
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	eb e5       	ldi	r30, 0x5B	; 91
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	80 62       	ori	r24, 0x20	; 32
    1dea:	8c 93       	st	X, r24
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <EXTI_u8EnableIntChannel+0x6a>
	default :Local_u8ErrorState = NOK; break;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    1df2:	89 81       	ldd	r24, Y+1	; 0x01

}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <EXTI_u8DisableIntChannel>:
uint8 EXTI_u8DisableIntChannel(IntChannel_t Copy_IntCh)
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <EXTI_u8DisableIntChannel+0x6>
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <EXTI_u8DisableIntChannel+0x8>
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    1e10:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_IntCh)
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	3c 83       	std	Y+4, r19	; 0x04
    1e1a:	2b 83       	std	Y+3, r18	; 0x03
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	91 05       	cpc	r25, r1
    1e24:	89 f0       	breq	.+34     	; 0x1e48 <EXTI_u8DisableIntChannel+0x46>
    1e26:	2b 81       	ldd	r18, Y+3	; 0x03
    1e28:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2a:	22 30       	cpi	r18, 0x02	; 2
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	a1 f0       	breq	.+40     	; 0x1e58 <EXTI_u8DisableIntChannel+0x56>
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	c1 f4       	brne	.+48     	; 0x1e68 <EXTI_u8DisableIntChannel+0x66>
	{
	case INT0 : CLR_BIT(GICR , GICR_INT0);  break;
    1e38:	ab e5       	ldi	r26, 0x5B	; 91
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	eb e5       	ldi	r30, 0x5B	; 91
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8f 7b       	andi	r24, 0xBF	; 191
    1e44:	8c 93       	st	X, r24
    1e46:	12 c0       	rjmp	.+36     	; 0x1e6c <EXTI_u8DisableIntChannel+0x6a>
	case INT1 : CLR_BIT(GICR , GICR_INT1);  break;
    1e48:	ab e5       	ldi	r26, 0x5B	; 91
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	eb e5       	ldi	r30, 0x5B	; 91
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	8f 77       	andi	r24, 0x7F	; 127
    1e54:	8c 93       	st	X, r24
    1e56:	0a c0       	rjmp	.+20     	; 0x1e6c <EXTI_u8DisableIntChannel+0x6a>
	case INT2 : CLR_BIT(GICR , GICR_INT2);break;
    1e58:	ab e5       	ldi	r26, 0x5B	; 91
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	eb e5       	ldi	r30, 0x5B	; 91
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8f 7d       	andi	r24, 0xDF	; 223
    1e64:	8c 93       	st	X, r24
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <EXTI_u8DisableIntChannel+0x6a>
	default :Local_u8ErrorState = NOK; break;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01


}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <EXTI_u8SetCallBack>:
uint8 EXTI_u8SetCallBack(IntChannel_t Copy_IntCh , void (*copy_pvCallBackFunc)(void))
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <EXTI_u8SetCallBack+0x6>
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <EXTI_u8SetCallBack+0x8>
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	8a 83       	std	Y+2, r24	; 0x02
    1e8a:	7c 83       	std	Y+4, r23	; 0x04
    1e8c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1e8e:	19 82       	std	Y+1, r1	; 0x01
	if((copy_pvCallBackFunc != NULL))
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	69 f0       	breq	.+26     	; 0x1eb2 <EXTI_u8SetCallBack+0x36>
	{

		{
			EXTI_pvCallBack[Copy_IntCh]=copy_pvCallBackFunc;
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	e8 58       	subi	r30, 0x88	; 136
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <EXTI_u8SetCallBack+0x3a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <__vector_1>:

__attribute__((signal)) void __vector_1(void);
void __vector_1(void)
{
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	2f 93       	push	r18
    1ed2:	3f 93       	push	r19
    1ed4:	4f 93       	push	r20
    1ed6:	5f 93       	push	r21
    1ed8:	6f 93       	push	r22
    1eda:	7f 93       	push	r23
    1edc:	8f 93       	push	r24
    1ede:	9f 93       	push	r25
    1ee0:	af 93       	push	r26
    1ee2:	bf 93       	push	r27
    1ee4:	ef 93       	push	r30
    1ee6:	ff 93       	push	r31
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBack[INT0]  != NULL)
    1ef0:	80 91 78 00 	lds	r24, 0x0078
    1ef4:	90 91 79 00 	lds	r25, 0x0079
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	29 f0       	breq	.+10     	; 0x1f06 <__vector_1+0x40>
	{
		EXTI_pvCallBack[INT0]();
    1efc:	e0 91 78 00 	lds	r30, 0x0078
    1f00:	f0 91 79 00 	lds	r31, 0x0079
    1f04:	09 95       	icall
	}
}
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	ff 91       	pop	r31
    1f0c:	ef 91       	pop	r30
    1f0e:	bf 91       	pop	r27
    1f10:	af 91       	pop	r26
    1f12:	9f 91       	pop	r25
    1f14:	8f 91       	pop	r24
    1f16:	7f 91       	pop	r23
    1f18:	6f 91       	pop	r22
    1f1a:	5f 91       	pop	r21
    1f1c:	4f 91       	pop	r20
    1f1e:	3f 91       	pop	r19
    1f20:	2f 91       	pop	r18
    1f22:	0f 90       	pop	r0
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	0f 90       	pop	r0
    1f28:	1f 90       	pop	r1
    1f2a:	18 95       	reti

00001f2c <__vector_2>:

__attribute__((signal)) void __vector_2(void);
void __vector_2(void)
{
    1f2c:	1f 92       	push	r1
    1f2e:	0f 92       	push	r0
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	0f 92       	push	r0
    1f34:	11 24       	eor	r1, r1
    1f36:	2f 93       	push	r18
    1f38:	3f 93       	push	r19
    1f3a:	4f 93       	push	r20
    1f3c:	5f 93       	push	r21
    1f3e:	6f 93       	push	r22
    1f40:	7f 93       	push	r23
    1f42:	8f 93       	push	r24
    1f44:	9f 93       	push	r25
    1f46:	af 93       	push	r26
    1f48:	bf 93       	push	r27
    1f4a:	ef 93       	push	r30
    1f4c:	ff 93       	push	r31
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBack[INT1]  != NULL)
    1f56:	80 91 7a 00 	lds	r24, 0x007A
    1f5a:	90 91 7b 00 	lds	r25, 0x007B
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	29 f0       	breq	.+10     	; 0x1f6c <__vector_2+0x40>
	{
		EXTI_pvCallBack[INT1]();
    1f62:	e0 91 7a 00 	lds	r30, 0x007A
    1f66:	f0 91 7b 00 	lds	r31, 0x007B
    1f6a:	09 95       	icall
	}

}
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	ff 91       	pop	r31
    1f72:	ef 91       	pop	r30
    1f74:	bf 91       	pop	r27
    1f76:	af 91       	pop	r26
    1f78:	9f 91       	pop	r25
    1f7a:	8f 91       	pop	r24
    1f7c:	7f 91       	pop	r23
    1f7e:	6f 91       	pop	r22
    1f80:	5f 91       	pop	r21
    1f82:	4f 91       	pop	r20
    1f84:	3f 91       	pop	r19
    1f86:	2f 91       	pop	r18
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	0f 90       	pop	r0
    1f8e:	1f 90       	pop	r1
    1f90:	18 95       	reti

00001f92 <__vector_3>:

__attribute__((signal)) void __vector_3(void);
void __vector_3(void)
{
    1f92:	1f 92       	push	r1
    1f94:	0f 92       	push	r0
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	0f 92       	push	r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	2f 93       	push	r18
    1f9e:	3f 93       	push	r19
    1fa0:	4f 93       	push	r20
    1fa2:	5f 93       	push	r21
    1fa4:	6f 93       	push	r22
    1fa6:	7f 93       	push	r23
    1fa8:	8f 93       	push	r24
    1faa:	9f 93       	push	r25
    1fac:	af 93       	push	r26
    1fae:	bf 93       	push	r27
    1fb0:	ef 93       	push	r30
    1fb2:	ff 93       	push	r31
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBack[INT2]  != NULL)
    1fbc:	80 91 7c 00 	lds	r24, 0x007C
    1fc0:	90 91 7d 00 	lds	r25, 0x007D
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	29 f0       	breq	.+10     	; 0x1fd2 <__vector_3+0x40>
	{
		EXTI_pvCallBack[INT2]();
    1fc8:	e0 91 7c 00 	lds	r30, 0x007C
    1fcc:	f0 91 7d 00 	lds	r31, 0x007D
    1fd0:	09 95       	icall
	}
}
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	ff 91       	pop	r31
    1fd8:	ef 91       	pop	r30
    1fda:	bf 91       	pop	r27
    1fdc:	af 91       	pop	r26
    1fde:	9f 91       	pop	r25
    1fe0:	8f 91       	pop	r24
    1fe2:	7f 91       	pop	r23
    1fe4:	6f 91       	pop	r22
    1fe6:	5f 91       	pop	r21
    1fe8:	4f 91       	pop	r20
    1fea:	3f 91       	pop	r19
    1fec:	2f 91       	pop	r18
    1fee:	0f 90       	pop	r0
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	0f 90       	pop	r0
    1ff4:	1f 90       	pop	r1
    1ff6:	18 95       	reti

00001ff8 <GIE_voidEnableGlobal>:


#include "GIE_reg.h"
#include "GIE_interface.h"
void GIE_voidEnableGlobal(void )
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG ,SREG_I);
	__asm volatile("SEI"); //INLINE ASSEMBLY :Set i Bit
    2000:	78 94       	sei
}
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <GIE_voidDisanableGlobal>:

void GIE_voidDisanableGlobal(void )
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	__asm volatile("CLI"); //INLINE ASSEMBLY :Clear i Bit
    2010:	f8 94       	cli
//	CLR_BIT(SREG ,SREG_I);
}
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <Relay_CW>:
#include "util/delay.h"

#ifndef H_BRIDGE_PROG_C
#define H_BRIDGE_PROG_C
void Relay_CW(void)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	63 e0       	ldi	r22, 0x03	; 3
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_HIGH);
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	64 e0       	ldi	r22, 0x04	; 4
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>



}
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <Relay_CCW>:
void Relay_CCW(void)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	2e 97       	sbiw	r28, 0x0e	; 14
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_LOW);
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	64 e0       	ldi	r22, 0x04	; 4
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	63 e0       	ldi	r22, 0x03	; 3
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	aa e7       	ldi	r26, 0x7A	; 122
    2068:	b4 e4       	ldi	r27, 0x44	; 68
    206a:	8b 87       	std	Y+11, r24	; 0x0b
    206c:	9c 87       	std	Y+12, r25	; 0x0c
    206e:	ad 87       	std	Y+13, r26	; 0x0d
    2070:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2072:	6b 85       	ldd	r22, Y+11	; 0x0b
    2074:	7c 85       	ldd	r23, Y+12	; 0x0c
    2076:	8d 85       	ldd	r24, Y+13	; 0x0d
    2078:	9e 85       	ldd	r25, Y+14	; 0x0e
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	4a e7       	ldi	r20, 0x7A	; 122
    2080:	55 e4       	ldi	r21, 0x45	; 69
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	8f 83       	std	Y+7, r24	; 0x07
    208c:	98 87       	std	Y+8, r25	; 0x08
    208e:	a9 87       	std	Y+9, r26	; 0x09
    2090:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2092:	6f 81       	ldd	r22, Y+7	; 0x07
    2094:	78 85       	ldd	r23, Y+8	; 0x08
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a6:	88 23       	and	r24, r24
    20a8:	2c f4       	brge	.+10     	; 0x20b4 <Relay_CCW+0x7a>
		__ticks = 1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	3f c0       	rjmp	.+126    	; 0x2132 <Relay_CCW+0xf8>
	else if (__tmp > 65535)
    20b4:	6f 81       	ldd	r22, Y+7	; 0x07
    20b6:	78 85       	ldd	r23, Y+8	; 0x08
    20b8:	89 85       	ldd	r24, Y+9	; 0x09
    20ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	3f ef       	ldi	r19, 0xFF	; 255
    20c0:	4f e7       	ldi	r20, 0x7F	; 127
    20c2:	57 e4       	ldi	r21, 0x47	; 71
    20c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c8:	18 16       	cp	r1, r24
    20ca:	4c f5       	brge	.+82     	; 0x211e <Relay_CCW+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e2       	ldi	r20, 0x20	; 32
    20da:	51 e4       	ldi	r21, 0x41	; 65
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
    20f4:	0f c0       	rjmp	.+30     	; 0x2114 <Relay_CCW+0xda>
    20f6:	80 e9       	ldi	r24, 0x90	; 144
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	9c 83       	std	Y+4, r25	; 0x04
    20fc:	8b 83       	std	Y+3, r24	; 0x03
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	9c 81       	ldd	r25, Y+4	; 0x04
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <Relay_CCW+0xc8>
    2106:	9c 83       	std	Y+4, r25	; 0x04
    2108:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	69 f7       	brne	.-38     	; 0x20f6 <Relay_CCW+0xbc>
    211c:	14 c0       	rjmp	.+40     	; 0x2146 <Relay_CCW+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211e:	6f 81       	ldd	r22, Y+7	; 0x07
    2120:	78 85       	ldd	r23, Y+8	; 0x08
    2122:	89 85       	ldd	r24, Y+9	; 0x09
    2124:	9a 85       	ldd	r25, Y+10	; 0x0a
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	9a 83       	std	Y+2, r25	; 0x02
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <Relay_CCW+0x104>
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_HIGH);
    2146:	82 e0       	ldi	r24, 0x02	; 2
    2148:	63 e0       	ldi	r22, 0x03	; 3
    214a:	41 e0       	ldi	r20, 0x01	; 1
    214c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>

}
    2150:	2e 96       	adiw	r28, 0x0e	; 14
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	08 95       	ret

00002162 <Relay_Stop>:
void Relay_Stop(void)
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_LOW);
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	63 e0       	ldi	r22, 0x03	; 3
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_LOW);
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	64 e0       	ldi	r22, 0x04	; 4
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
}
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <KPD_u8GetPressedKey>:
#include "KPD_prv.h"
#include "KPD_cfg.h"


uint8 KPD_u8GetPressedKey(void)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	a2 97       	sbiw	r28, 0x22	; 34
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61

	uint8 Local_u8ColIdx , Local_u8RowIdx, Local_u8PinState,Local_u8PressedKey = KPD_u8NOPERESSED_KEY_VAL;
    2198:	8f ef       	ldi	r24, 0xFF	; 255
    219a:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8RowArr[ROW_NUM]={KPD_u8ROW0_PIN,KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN};
    219c:	84 e0       	ldi	r24, 0x04	; 4
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	85 e0       	ldi	r24, 0x05	; 5
    21a2:	8e 83       	std	Y+6, r24	; 0x06
    21a4:	86 e0       	ldi	r24, 0x06	; 6
    21a6:	8f 83       	std	Y+7, r24	; 0x07
    21a8:	87 e0       	ldi	r24, 0x07	; 7
    21aa:	88 87       	std	Y+8, r24	; 0x08

	uint8 Local_u8ColArr[COL_NUM]={KPD_u8COL0_PIN,KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN};
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	89 87       	std	Y+9, r24	; 0x09
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	8a 87       	std	Y+10, r24	; 0x0a
    21b4:	84 e0       	ldi	r24, 0x04	; 4
    21b6:	8b 87       	std	Y+11, r24	; 0x0b
    21b8:	85 e0       	ldi	r24, 0x05	; 5
    21ba:	8c 87       	std	Y+12, r24	; 0x0c

	uint8 Local_au8KPDArr[ROW_NUM][COL_NUM]=KPD_au8_BUTTON_ARR;
    21bc:	ce 01       	movw	r24, r28
    21be:	0d 96       	adiw	r24, 0x0d	; 13
    21c0:	9f 8f       	std	Y+31, r25	; 0x1f
    21c2:	8e 8f       	std	Y+30, r24	; 0x1e
    21c4:	e8 e6       	ldi	r30, 0x68	; 104
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	f9 a3       	std	Y+33, r31	; 0x21
    21ca:	e8 a3       	std	Y+32, r30	; 0x20
    21cc:	f0 e1       	ldi	r31, 0x10	; 16
    21ce:	fa a3       	std	Y+34, r31	; 0x22
    21d0:	e8 a1       	ldd	r30, Y+32	; 0x20
    21d2:	f9 a1       	ldd	r31, Y+33	; 0x21
    21d4:	00 80       	ld	r0, Z
    21d6:	88 a1       	ldd	r24, Y+32	; 0x20
    21d8:	99 a1       	ldd	r25, Y+33	; 0x21
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	99 a3       	std	Y+33, r25	; 0x21
    21de:	88 a3       	std	Y+32, r24	; 0x20
    21e0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    21e2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    21e4:	00 82       	st	Z, r0
    21e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	9f 8f       	std	Y+31, r25	; 0x1f
    21ee:	8e 8f       	std	Y+30, r24	; 0x1e
    21f0:	9a a1       	ldd	r25, Y+34	; 0x22
    21f2:	91 50       	subi	r25, 0x01	; 1
    21f4:	9a a3       	std	Y+34, r25	; 0x22
    21f6:	ea a1       	ldd	r30, Y+34	; 0x22
    21f8:	ee 23       	and	r30, r30
    21fa:	51 f7       	brne	.-44     	; 0x21d0 <KPD_u8GetPressedKey+0x4c>

	//Activate the column pins
	for(Local_u8ColIdx = 0u ; Local_u8ColIdx < COL_NUM ; Local_u8ColIdx++ )
    21fc:	1b 82       	std	Y+3, r1	; 0x03
    21fe:	68 c0       	rjmp	.+208    	; 0x22d0 <KPD_u8GetPressedKey+0x14c>
	{
		//Activate the current column
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColIdx] , DIO_u8PIN_LOW);
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	ce 01       	movw	r24, r28
    2208:	09 96       	adiw	r24, 0x09	; 9
    220a:	fc 01       	movw	r30, r24
    220c:	e2 0f       	add	r30, r18
    220e:	f3 1f       	adc	r31, r19
    2210:	90 81       	ld	r25, Z
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	69 2f       	mov	r22, r25
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>

		//Read the row pins
		for(Local_u8RowIdx = 0u ; Local_u8RowIdx < ROW_NUM ; Local_u8RowIdx++ )
    221c:	1a 82       	std	Y+2, r1	; 0x02
    221e:	43 c0       	rjmp	.+134    	; 0x22a6 <KPD_u8GetPressedKey+0x122>
		{
			//Read the current row
			DIO_u8ReadPinValue(KPD_u8ROW_PORT , Local_u8RowArr[Local_u8RowIdx] , &Local_u8PinState);
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	ce 01       	movw	r24, r28
    2228:	05 96       	adiw	r24, 0x05	; 5
    222a:	fc 01       	movw	r30, r24
    222c:	e2 0f       	add	r30, r18
    222e:	f3 1f       	adc	r31, r19
    2230:	90 81       	ld	r25, Z
    2232:	9e 01       	movw	r18, r28
    2234:	2c 5f       	subi	r18, 0xFC	; 252
    2236:	3f 4f       	sbci	r19, 0xFF	; 255
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	69 2f       	mov	r22, r25
    223c:	a9 01       	movw	r20, r18
    223e:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8ReadPinValue>

			if(Local_u8PinState == DIO_u8PIN_LOW)
    2242:	8c 81       	ldd	r24, Y+4	; 0x04
    2244:	88 23       	and	r24, r24
    2246:	61 f5       	brne	.+88     	; 0x22a0 <KPD_u8GetPressedKey+0x11c>
			{
				Local_u8PressedKey = Local_au8KPDArr[Local_u8RowIdx][Local_u8ColIdx];
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	48 2f       	mov	r20, r24
    2252:	50 e0       	ldi	r21, 0x00	; 0
    2254:	22 0f       	add	r18, r18
    2256:	33 1f       	adc	r19, r19
    2258:	22 0f       	add	r18, r18
    225a:	33 1f       	adc	r19, r19
    225c:	ce 01       	movw	r24, r28
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	82 0f       	add	r24, r18
    2262:	93 1f       	adc	r25, r19
    2264:	84 0f       	add	r24, r20
    2266:	95 1f       	adc	r25, r21
    2268:	fc 01       	movw	r30, r24
    226a:	3c 96       	adiw	r30, 0x0c	; 12
    226c:	80 81       	ld	r24, Z
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	11 c0       	rjmp	.+34     	; 0x2294 <KPD_u8GetPressedKey+0x110>

				//polling with blocking( waiting ) until the key is released
				while(Local_u8PinState == DIO_u8PIN_LOW)
				{
					DIO_u8ReadPinValue(KPD_u8ROW_PORT , Local_u8RowArr[Local_u8RowIdx] , &Local_u8PinState);
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	ce 01       	movw	r24, r28
    227a:	05 96       	adiw	r24, 0x05	; 5
    227c:	fc 01       	movw	r30, r24
    227e:	e2 0f       	add	r30, r18
    2280:	f3 1f       	adc	r31, r19
    2282:	90 81       	ld	r25, Z
    2284:	9e 01       	movw	r18, r28
    2286:	2c 5f       	subi	r18, 0xFC	; 252
    2288:	3f 4f       	sbci	r19, 0xFF	; 255
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	69 2f       	mov	r22, r25
    228e:	a9 01       	movw	r20, r18
    2290:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8ReadPinValue>
			if(Local_u8PinState == DIO_u8PIN_LOW)
			{
				Local_u8PressedKey = Local_au8KPDArr[Local_u8RowIdx][Local_u8ColIdx];

				//polling with blocking( waiting ) until the key is released
				while(Local_u8PinState == DIO_u8PIN_LOW)
    2294:	8c 81       	ldd	r24, Y+4	; 0x04
    2296:	88 23       	and	r24, r24
    2298:	61 f3       	breq	.-40     	; 0x2272 <KPD_u8GetPressedKey+0xee>
				{
					DIO_u8ReadPinValue(KPD_u8ROW_PORT , Local_u8RowArr[Local_u8RowIdx] , &Local_u8PinState);

				}
				return Local_u8PressedKey;
    229a:	f9 81       	ldd	r31, Y+1	; 0x01
    229c:	fd 8f       	std	Y+29, r31	; 0x1d
    229e:	1e c0       	rjmp	.+60     	; 0x22dc <KPD_u8GetPressedKey+0x158>
	{
		//Activate the current column
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColIdx] , DIO_u8PIN_LOW);

		//Read the row pins
		for(Local_u8RowIdx = 0u ; Local_u8RowIdx < ROW_NUM ; Local_u8RowIdx++ )
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	8f 5f       	subi	r24, 0xFF	; 255
    22a4:	8a 83       	std	Y+2, r24	; 0x02
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	84 30       	cpi	r24, 0x04	; 4
    22aa:	08 f4       	brcc	.+2      	; 0x22ae <KPD_u8GetPressedKey+0x12a>
    22ac:	b9 cf       	rjmp	.-142    	; 0x2220 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;

			}
		}

		DIO_u8SetPinValue(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	ce 01       	movw	r24, r28
    22b6:	09 96       	adiw	r24, 0x09	; 9
    22b8:	fc 01       	movw	r30, r24
    22ba:	e2 0f       	add	r30, r18
    22bc:	f3 1f       	adc	r31, r19
    22be:	90 81       	ld	r25, Z
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	69 2f       	mov	r22, r25
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	uint8 Local_u8ColArr[COL_NUM]={KPD_u8COL0_PIN,KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN};

	uint8 Local_au8KPDArr[ROW_NUM][COL_NUM]=KPD_au8_BUTTON_ARR;

	//Activate the column pins
	for(Local_u8ColIdx = 0u ; Local_u8ColIdx < COL_NUM ; Local_u8ColIdx++ )
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	8f 5f       	subi	r24, 0xFF	; 255
    22ce:	8b 83       	std	Y+3, r24	; 0x03
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	84 30       	cpi	r24, 0x04	; 4
    22d4:	08 f4       	brcc	.+2      	; 0x22d8 <KPD_u8GetPressedKey+0x154>
    22d6:	94 cf       	rjmp	.-216    	; 0x2200 <KPD_u8GetPressedKey+0x7c>
		}

		DIO_u8SetPinValue(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ColIdx],DIO_u8PIN_HIGH);

	}
	return Local_u8PressedKey;
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	8d 8f       	std	Y+29, r24	; 0x1d
    22dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    22de:	a2 96       	adiw	r28, 0x22	; 34
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <PORT_voidInit>:
#include "PORT_cfg.h"
#include "PORT_interface.h"
#include "PORT_reg.h"

void PORT_voidInit(void)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    22f8:	ea e3       	ldi	r30, 0x3A	; 58
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	8f ef       	ldi	r24, 0xFF	; 255
    22fe:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2300:	e7 e3       	ldi	r30, 0x37	; 55
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    2306:	e4 e3       	ldi	r30, 0x34	; 52
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	8f ef       	ldi	r24, 0xFF	; 255
    230c:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    230e:	e1 e3       	ldi	r30, 0x31	; 49
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	10 82       	st	Z, r1

	PORTA = PORTA_INIT_VAL;
    2314:	eb e3       	ldi	r30, 0x3B	; 59
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL;
    231a:	e8 e3       	ldi	r30, 0x38	; 56
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	10 82       	st	Z, r1
	PORTC = PORTC_INIT_VAL;
    2320:	e5 e3       	ldi	r30, 0x35	; 53
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	10 82       	st	Z, r1
	PORTD = PORTD_INIT_VAL;
    2326:	e2 e3       	ldi	r30, 0x32	; 50
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	10 82       	st	Z, r1
}
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <Stepper_u8RotateAngle>:
#include "KPD_interface.h"
#include "Stepper_cfg.h"
#include "Stepper_interface.h"

uint8 Stepper_u8RotateAngle(const SteperConfig_t* Copy_stpStepper , uint8 Copy_u8Direction , uint16 Copy_u8Angle )
{
    2332:	0f 93       	push	r16
    2334:	1f 93       	push	r17
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	ca 57       	subi	r28, 0x7A	; 122
    2340:	d0 40       	sbci	r29, 0x00	; 0
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	fe 01       	movw	r30, r28
    234e:	ea 58       	subi	r30, 0x8A	; 138
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	91 83       	std	Z+1, r25	; 0x01
    2354:	80 83       	st	Z, r24
    2356:	fe 01       	movw	r30, r28
    2358:	e8 58       	subi	r30, 0x88	; 136
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	60 83       	st	Z, r22
    235e:	fe 01       	movw	r30, r28
    2360:	e7 58       	subi	r30, 0x87	; 135
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	51 83       	std	Z+1, r21	; 0x01
    2366:	40 83       	st	Z, r20
	uint8 Local_u8ErrorState = OK ; // Local variable to store error state
    2368:	fe 01       	movw	r30, r28
    236a:	eb 58       	subi	r30, 0x8B	; 139
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	10 82       	st	Z, r1
	uint16 Local_u16Steps;
	uint16 Local_u16LoopCounter ;

	if(Copy_stpStepper != NULL)
    2370:	fe 01       	movw	r30, r28
    2372:	ea 58       	subi	r30, 0x8A	; 138
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 81       	ld	r24, Z
    2378:	91 81       	ldd	r25, Z+1	; 0x01
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	09 f4       	brne	.+2      	; 0x2380 <Stepper_u8RotateAngle+0x4e>
    237e:	6e c7       	rjmp	.+3804   	; 0x325c <Stepper_u8RotateAngle+0xf2a>
	{
		Local_u16Steps = (uint16)( (  ( (uint32)Copy_u8Angle ) * (2048UL)  ) /360UL );
    2380:	fe 01       	movw	r30, r28
    2382:	e7 58       	subi	r30, 0x87	; 135
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	cc 01       	movw	r24, r24
    238c:	a0 e0       	ldi	r26, 0x00	; 0
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	07 2e       	mov	r0, r23
    2392:	7b e0       	ldi	r23, 0x0B	; 11
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	aa 1f       	adc	r26, r26
    239a:	bb 1f       	adc	r27, r27
    239c:	7a 95       	dec	r23
    239e:	d1 f7       	brne	.-12     	; 0x2394 <Stepper_u8RotateAngle+0x62>
    23a0:	70 2d       	mov	r23, r0
    23a2:	28 e6       	ldi	r18, 0x68	; 104
    23a4:	31 e0       	ldi	r19, 0x01	; 1
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	0e 94 21 1a 	call	0x3442	; 0x3442 <__udivmodsi4>
    23b2:	da 01       	movw	r26, r20
    23b4:	c9 01       	movw	r24, r18
    23b6:	fe 01       	movw	r30, r28
    23b8:	ed 58       	subi	r30, 0x8D	; 141
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	80 83       	st	Z, r24

		if(Copy_u8Direction == ROTAT_CCW)
    23c0:	fe 01       	movw	r30, r28
    23c2:	e8 58       	subi	r30, 0x88	; 136
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	82 30       	cpi	r24, 0x02	; 2
    23ca:	09 f0       	breq	.+2      	; 0x23ce <Stepper_u8RotateAngle+0x9c>
    23cc:	10 c4       	rjmp	.+2080   	; 0x2bee <Stepper_u8RotateAngle+0x8bc>
		{
			// untiClockwise rotation:Blue > Pink  > Yellow > Orange
			for(Local_u16LoopCounter = 0 ; Local_u16LoopCounter < Local_u16Steps ; Local_u16LoopCounter++)
    23ce:	fe 01       	movw	r30, r28
    23d0:	ef 58       	subi	r30, 0x8F	; 143
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	11 82       	std	Z+1, r1	; 0x01
    23d6:	10 82       	st	Z, r1
    23d8:	fa c3       	rjmp	.+2036   	; 0x2bce <Stepper_u8RotateAngle+0x89c>
			{
				if(Local_u16LoopCounter % 4 == 0 )
    23da:	fe 01       	movw	r30, r28
    23dc:	ef 58       	subi	r30, 0x8F	; 143
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 81       	ld	r24, Z
    23e2:	91 81       	ldd	r25, Z+1	; 0x01
    23e4:	83 70       	andi	r24, 0x03	; 3
    23e6:	90 70       	andi	r25, 0x00	; 0
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	09 f0       	breq	.+2      	; 0x23ee <Stepper_u8RotateAngle+0xbc>
    23ec:	fd c0       	rjmp	.+506    	; 0x25e8 <Stepper_u8RotateAngle+0x2b6>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_LOW);
    23ee:	fe 01       	movw	r30, r28
    23f0:	ea 58       	subi	r30, 0x8A	; 138
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	01 90       	ld	r0, Z+
    23f6:	f0 81       	ld	r31, Z
    23f8:	e0 2d       	mov	r30, r0
    23fa:	80 81       	ld	r24, Z
    23fc:	fe 01       	movw	r30, r28
    23fe:	ea 58       	subi	r30, 0x8A	; 138
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	01 90       	ld	r0, Z+
    2404:	f0 81       	ld	r31, Z
    2406:	e0 2d       	mov	r30, r0
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	69 2f       	mov	r22, r25
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_HIGH);
    2412:	fe 01       	movw	r30, r28
    2414:	ea 58       	subi	r30, 0x8A	; 138
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	01 90       	ld	r0, Z+
    241a:	f0 81       	ld	r31, Z
    241c:	e0 2d       	mov	r30, r0
    241e:	80 81       	ld	r24, Z
    2420:	fe 01       	movw	r30, r28
    2422:	ea 58       	subi	r30, 0x8A	; 138
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	01 90       	ld	r0, Z+
    2428:	f0 81       	ld	r31, Z
    242a:	e0 2d       	mov	r30, r0
    242c:	92 81       	ldd	r25, Z+2	; 0x02
    242e:	69 2f       	mov	r22, r25
    2430:	41 e0       	ldi	r20, 0x01	; 1
    2432:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_HIGH);
    2436:	fe 01       	movw	r30, r28
    2438:	ea 58       	subi	r30, 0x8A	; 138
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	01 90       	ld	r0, Z+
    243e:	f0 81       	ld	r31, Z
    2440:	e0 2d       	mov	r30, r0
    2442:	80 81       	ld	r24, Z
    2444:	fe 01       	movw	r30, r28
    2446:	ea 58       	subi	r30, 0x8A	; 138
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	01 90       	ld	r0, Z+
    244c:	f0 81       	ld	r31, Z
    244e:	e0 2d       	mov	r30, r0
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	69 2f       	mov	r22, r25
    2454:	41 e0       	ldi	r20, 0x01	; 1
    2456:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_HIGH);
    245a:	fe 01       	movw	r30, r28
    245c:	ea 58       	subi	r30, 0x8A	; 138
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	01 90       	ld	r0, Z+
    2462:	f0 81       	ld	r31, Z
    2464:	e0 2d       	mov	r30, r0
    2466:	80 81       	ld	r24, Z
    2468:	fe 01       	movw	r30, r28
    246a:	ea 58       	subi	r30, 0x8A	; 138
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	01 90       	ld	r0, Z+
    2470:	f0 81       	ld	r31, Z
    2472:	e0 2d       	mov	r30, r0
    2474:	94 81       	ldd	r25, Z+4	; 0x04
    2476:	69 2f       	mov	r22, r25
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    247e:	fe 01       	movw	r30, r28
    2480:	e3 59       	subi	r30, 0x93	; 147
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	a0 ea       	ldi	r26, 0xA0	; 160
    248a:	b0 e4       	ldi	r27, 0x40	; 64
    248c:	80 83       	st	Z, r24
    248e:	91 83       	std	Z+1, r25	; 0x01
    2490:	a2 83       	std	Z+2, r26	; 0x02
    2492:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2494:	8e 01       	movw	r16, r28
    2496:	07 59       	subi	r16, 0x97	; 151
    2498:	1f 4f       	sbci	r17, 0xFF	; 255
    249a:	fe 01       	movw	r30, r28
    249c:	e3 59       	subi	r30, 0x93	; 147
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	60 81       	ld	r22, Z
    24a2:	71 81       	ldd	r23, Z+1	; 0x01
    24a4:	82 81       	ldd	r24, Z+2	; 0x02
    24a6:	93 81       	ldd	r25, Z+3	; 0x03
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a e7       	ldi	r20, 0x7A	; 122
    24ae:	55 e4       	ldi	r21, 0x45	; 69
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	f8 01       	movw	r30, r16
    24ba:	80 83       	st	Z, r24
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	a2 83       	std	Z+2, r26	; 0x02
    24c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24c2:	fe 01       	movw	r30, r28
    24c4:	e7 59       	subi	r30, 0x97	; 151
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	60 81       	ld	r22, Z
    24ca:	71 81       	ldd	r23, Z+1	; 0x01
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e8       	ldi	r20, 0x80	; 128
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24dc:	88 23       	and	r24, r24
    24de:	44 f4       	brge	.+16     	; 0x24f0 <Stepper_u8RotateAngle+0x1be>
		__ticks = 1;
    24e0:	fe 01       	movw	r30, r28
    24e2:	e9 59       	subi	r30, 0x99	; 153
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	80 83       	st	Z, r24
    24ee:	64 c0       	rjmp	.+200    	; 0x25b8 <Stepper_u8RotateAngle+0x286>
	else if (__tmp > 65535)
    24f0:	fe 01       	movw	r30, r28
    24f2:	e7 59       	subi	r30, 0x97	; 151
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	0c f0       	brlt	.+2      	; 0x2510 <Stepper_u8RotateAngle+0x1de>
    250e:	43 c0       	rjmp	.+134    	; 0x2596 <Stepper_u8RotateAngle+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	fe 01       	movw	r30, r28
    2512:	e3 59       	subi	r30, 0x93	; 147
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	8e 01       	movw	r16, r28
    2530:	09 59       	subi	r16, 0x99	; 153
    2532:	1f 4f       	sbci	r17, 0xFF	; 255
    2534:	bc 01       	movw	r22, r24
    2536:	cd 01       	movw	r24, r26
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	f8 01       	movw	r30, r16
    2542:	91 83       	std	Z+1, r25	; 0x01
    2544:	80 83       	st	Z, r24
    2546:	1f c0       	rjmp	.+62     	; 0x2586 <Stepper_u8RotateAngle+0x254>
    2548:	fe 01       	movw	r30, r28
    254a:	eb 59       	subi	r30, 0x9B	; 155
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 e9       	ldi	r24, 0x90	; 144
    2550:	91 e0       	ldi	r25, 0x01	; 1
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
    2556:	fe 01       	movw	r30, r28
    2558:	eb 59       	subi	r30, 0x9B	; 155
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <Stepper_u8RotateAngle+0x22e>
    2564:	fe 01       	movw	r30, r28
    2566:	eb 59       	subi	r30, 0x9B	; 155
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256e:	de 01       	movw	r26, r28
    2570:	a9 59       	subi	r26, 0x99	; 153
    2572:	bf 4f       	sbci	r27, 0xFF	; 255
    2574:	fe 01       	movw	r30, r28
    2576:	e9 59       	subi	r30, 0x99	; 153
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	11 96       	adiw	r26, 0x01	; 1
    2582:	9c 93       	st	X, r25
    2584:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2586:	fe 01       	movw	r30, r28
    2588:	e9 59       	subi	r30, 0x99	; 153
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	d1 f6       	brne	.-76     	; 0x2548 <Stepper_u8RotateAngle+0x216>
    2594:	11 c3       	rjmp	.+1570   	; 0x2bb8 <Stepper_u8RotateAngle+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	8e 01       	movw	r16, r28
    2598:	09 59       	subi	r16, 0x99	; 153
    259a:	1f 4f       	sbci	r17, 0xFF	; 255
    259c:	fe 01       	movw	r30, r28
    259e:	e7 59       	subi	r30, 0x97	; 151
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	60 81       	ld	r22, Z
    25a4:	71 81       	ldd	r23, Z+1	; 0x01
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	f8 01       	movw	r30, r16
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	80 83       	st	Z, r24
    25b8:	de 01       	movw	r26, r28
    25ba:	ad 59       	subi	r26, 0x9D	; 157
    25bc:	bf 4f       	sbci	r27, 0xFF	; 255
    25be:	fe 01       	movw	r30, r28
    25c0:	e9 59       	subi	r30, 0x99	; 153
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 81       	ld	r24, Z
    25c6:	91 81       	ldd	r25, Z+1	; 0x01
    25c8:	11 96       	adiw	r26, 0x01	; 1
    25ca:	9c 93       	st	X, r25
    25cc:	8e 93       	st	-X, r24
    25ce:	fe 01       	movw	r30, r28
    25d0:	ed 59       	subi	r30, 0x9D	; 157
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	91 81       	ldd	r25, Z+1	; 0x01
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <Stepper_u8RotateAngle+0x2a6>
    25dc:	fe 01       	movw	r30, r28
    25de:	ed 59       	subi	r30, 0x9D	; 157
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
    25e6:	e8 c2       	rjmp	.+1488   	; 0x2bb8 <Stepper_u8RotateAngle+0x886>
					_delay_ms(5);
				}
				else if(Local_u16LoopCounter % 4 == 1 )
    25e8:	fe 01       	movw	r30, r28
    25ea:	ef 58       	subi	r30, 0x8F	; 143
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 81       	ld	r24, Z
    25f0:	91 81       	ldd	r25, Z+1	; 0x01
    25f2:	83 70       	andi	r24, 0x03	; 3
    25f4:	90 70       	andi	r25, 0x00	; 0
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	91 05       	cpc	r25, r1
    25fa:	09 f0       	breq	.+2      	; 0x25fe <Stepper_u8RotateAngle+0x2cc>
    25fc:	fd c0       	rjmp	.+506    	; 0x27f8 <Stepper_u8RotateAngle+0x4c6>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_HIGH);
    25fe:	fe 01       	movw	r30, r28
    2600:	ea 58       	subi	r30, 0x8A	; 138
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	01 90       	ld	r0, Z+
    2606:	f0 81       	ld	r31, Z
    2608:	e0 2d       	mov	r30, r0
    260a:	80 81       	ld	r24, Z
    260c:	fe 01       	movw	r30, r28
    260e:	ea 58       	subi	r30, 0x8A	; 138
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	01 90       	ld	r0, Z+
    2614:	f0 81       	ld	r31, Z
    2616:	e0 2d       	mov	r30, r0
    2618:	91 81       	ldd	r25, Z+1	; 0x01
    261a:	69 2f       	mov	r22, r25
    261c:	41 e0       	ldi	r20, 0x01	; 1
    261e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_LOW);
    2622:	fe 01       	movw	r30, r28
    2624:	ea 58       	subi	r30, 0x8A	; 138
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	01 90       	ld	r0, Z+
    262a:	f0 81       	ld	r31, Z
    262c:	e0 2d       	mov	r30, r0
    262e:	80 81       	ld	r24, Z
    2630:	fe 01       	movw	r30, r28
    2632:	ea 58       	subi	r30, 0x8A	; 138
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	01 90       	ld	r0, Z+
    2638:	f0 81       	ld	r31, Z
    263a:	e0 2d       	mov	r30, r0
    263c:	92 81       	ldd	r25, Z+2	; 0x02
    263e:	69 2f       	mov	r22, r25
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_HIGH);
    2646:	fe 01       	movw	r30, r28
    2648:	ea 58       	subi	r30, 0x8A	; 138
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	01 90       	ld	r0, Z+
    264e:	f0 81       	ld	r31, Z
    2650:	e0 2d       	mov	r30, r0
    2652:	80 81       	ld	r24, Z
    2654:	fe 01       	movw	r30, r28
    2656:	ea 58       	subi	r30, 0x8A	; 138
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	01 90       	ld	r0, Z+
    265c:	f0 81       	ld	r31, Z
    265e:	e0 2d       	mov	r30, r0
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	69 2f       	mov	r22, r25
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_HIGH);
    266a:	fe 01       	movw	r30, r28
    266c:	ea 58       	subi	r30, 0x8A	; 138
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	01 90       	ld	r0, Z+
    2672:	f0 81       	ld	r31, Z
    2674:	e0 2d       	mov	r30, r0
    2676:	80 81       	ld	r24, Z
    2678:	fe 01       	movw	r30, r28
    267a:	ea 58       	subi	r30, 0x8A	; 138
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	01 90       	ld	r0, Z+
    2680:	f0 81       	ld	r31, Z
    2682:	e0 2d       	mov	r30, r0
    2684:	94 81       	ldd	r25, Z+4	; 0x04
    2686:	69 2f       	mov	r22, r25
    2688:	41 e0       	ldi	r20, 0x01	; 1
    268a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    268e:	fe 01       	movw	r30, r28
    2690:	e1 5a       	subi	r30, 0xA1	; 161
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	a0 ea       	ldi	r26, 0xA0	; 160
    269a:	b0 e4       	ldi	r27, 0x40	; 64
    269c:	80 83       	st	Z, r24
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	a2 83       	std	Z+2, r26	; 0x02
    26a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a4:	8e 01       	movw	r16, r28
    26a6:	05 5a       	subi	r16, 0xA5	; 165
    26a8:	1f 4f       	sbci	r17, 0xFF	; 255
    26aa:	fe 01       	movw	r30, r28
    26ac:	e1 5a       	subi	r30, 0xA1	; 161
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	60 81       	ld	r22, Z
    26b2:	71 81       	ldd	r23, Z+1	; 0x01
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	93 81       	ldd	r25, Z+3	; 0x03
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	4a e7       	ldi	r20, 0x7A	; 122
    26be:	55 e4       	ldi	r21, 0x45	; 69
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	f8 01       	movw	r30, r16
    26ca:	80 83       	st	Z, r24
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	a2 83       	std	Z+2, r26	; 0x02
    26d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26d2:	fe 01       	movw	r30, r28
    26d4:	e5 5a       	subi	r30, 0xA5	; 165
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	60 81       	ld	r22, Z
    26da:	71 81       	ldd	r23, Z+1	; 0x01
    26dc:	82 81       	ldd	r24, Z+2	; 0x02
    26de:	93 81       	ldd	r25, Z+3	; 0x03
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	44 f4       	brge	.+16     	; 0x2700 <Stepper_u8RotateAngle+0x3ce>
		__ticks = 1;
    26f0:	fe 01       	movw	r30, r28
    26f2:	e7 5a       	subi	r30, 0xA7	; 167
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
    26fe:	64 c0       	rjmp	.+200    	; 0x27c8 <Stepper_u8RotateAngle+0x496>
	else if (__tmp > 65535)
    2700:	fe 01       	movw	r30, r28
    2702:	e5 5a       	subi	r30, 0xA5	; 165
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	3f ef       	ldi	r19, 0xFF	; 255
    2712:	4f e7       	ldi	r20, 0x7F	; 127
    2714:	57 e4       	ldi	r21, 0x47	; 71
    2716:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271a:	18 16       	cp	r1, r24
    271c:	0c f0       	brlt	.+2      	; 0x2720 <Stepper_u8RotateAngle+0x3ee>
    271e:	43 c0       	rjmp	.+134    	; 0x27a6 <Stepper_u8RotateAngle+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2720:	fe 01       	movw	r30, r28
    2722:	e1 5a       	subi	r30, 0xA1	; 161
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e2       	ldi	r20, 0x20	; 32
    2734:	51 e4       	ldi	r21, 0x41	; 65
    2736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	8e 01       	movw	r16, r28
    2740:	07 5a       	subi	r16, 0xA7	; 167
    2742:	1f 4f       	sbci	r17, 0xFF	; 255
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	f8 01       	movw	r30, r16
    2752:	91 83       	std	Z+1, r25	; 0x01
    2754:	80 83       	st	Z, r24
    2756:	1f c0       	rjmp	.+62     	; 0x2796 <Stepper_u8RotateAngle+0x464>
    2758:	fe 01       	movw	r30, r28
    275a:	e9 5a       	subi	r30, 0xA9	; 169
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 e9       	ldi	r24, 0x90	; 144
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	91 83       	std	Z+1, r25	; 0x01
    2764:	80 83       	st	Z, r24
    2766:	fe 01       	movw	r30, r28
    2768:	e9 5a       	subi	r30, 0xA9	; 169
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	80 81       	ld	r24, Z
    276e:	91 81       	ldd	r25, Z+1	; 0x01
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <Stepper_u8RotateAngle+0x43e>
    2774:	fe 01       	movw	r30, r28
    2776:	e9 5a       	subi	r30, 0xA9	; 169
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	91 83       	std	Z+1, r25	; 0x01
    277c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	de 01       	movw	r26, r28
    2780:	a7 5a       	subi	r26, 0xA7	; 167
    2782:	bf 4f       	sbci	r27, 0xFF	; 255
    2784:	fe 01       	movw	r30, r28
    2786:	e7 5a       	subi	r30, 0xA7	; 167
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	11 96       	adiw	r26, 0x01	; 1
    2792:	9c 93       	st	X, r25
    2794:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	fe 01       	movw	r30, r28
    2798:	e7 5a       	subi	r30, 0xA7	; 167
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 81       	ld	r24, Z
    279e:	91 81       	ldd	r25, Z+1	; 0x01
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	d1 f6       	brne	.-76     	; 0x2758 <Stepper_u8RotateAngle+0x426>
    27a4:	09 c2       	rjmp	.+1042   	; 0x2bb8 <Stepper_u8RotateAngle+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a6:	8e 01       	movw	r16, r28
    27a8:	07 5a       	subi	r16, 0xA7	; 167
    27aa:	1f 4f       	sbci	r17, 0xFF	; 255
    27ac:	fe 01       	movw	r30, r28
    27ae:	e5 5a       	subi	r30, 0xA5	; 165
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	60 81       	ld	r22, Z
    27b4:	71 81       	ldd	r23, Z+1	; 0x01
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	f8 01       	movw	r30, r16
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	80 83       	st	Z, r24
    27c8:	de 01       	movw	r26, r28
    27ca:	ab 5a       	subi	r26, 0xAB	; 171
    27cc:	bf 4f       	sbci	r27, 0xFF	; 255
    27ce:	fe 01       	movw	r30, r28
    27d0:	e7 5a       	subi	r30, 0xA7	; 167
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	91 81       	ldd	r25, Z+1	; 0x01
    27d8:	11 96       	adiw	r26, 0x01	; 1
    27da:	9c 93       	st	X, r25
    27dc:	8e 93       	st	-X, r24
    27de:	fe 01       	movw	r30, r28
    27e0:	eb 5a       	subi	r30, 0xAB	; 171
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <Stepper_u8RotateAngle+0x4b6>
    27ec:	fe 01       	movw	r30, r28
    27ee:	eb 5a       	subi	r30, 0xAB	; 171
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
    27f6:	e0 c1       	rjmp	.+960    	; 0x2bb8 <Stepper_u8RotateAngle+0x886>
					_delay_ms(5);

				}
				else if(Local_u16LoopCounter % 4 == 2 )
    27f8:	fe 01       	movw	r30, r28
    27fa:	ef 58       	subi	r30, 0x8F	; 143
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 81       	ld	r24, Z
    2800:	91 81       	ldd	r25, Z+1	; 0x01
    2802:	83 70       	andi	r24, 0x03	; 3
    2804:	90 70       	andi	r25, 0x00	; 0
    2806:	82 30       	cpi	r24, 0x02	; 2
    2808:	91 05       	cpc	r25, r1
    280a:	09 f0       	breq	.+2      	; 0x280e <Stepper_u8RotateAngle+0x4dc>
    280c:	fd c0       	rjmp	.+506    	; 0x2a08 <Stepper_u8RotateAngle+0x6d6>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_HIGH);
    280e:	fe 01       	movw	r30, r28
    2810:	ea 58       	subi	r30, 0x8A	; 138
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	01 90       	ld	r0, Z+
    2816:	f0 81       	ld	r31, Z
    2818:	e0 2d       	mov	r30, r0
    281a:	80 81       	ld	r24, Z
    281c:	fe 01       	movw	r30, r28
    281e:	ea 58       	subi	r30, 0x8A	; 138
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	01 90       	ld	r0, Z+
    2824:	f0 81       	ld	r31, Z
    2826:	e0 2d       	mov	r30, r0
    2828:	91 81       	ldd	r25, Z+1	; 0x01
    282a:	69 2f       	mov	r22, r25
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_HIGH);
    2832:	fe 01       	movw	r30, r28
    2834:	ea 58       	subi	r30, 0x8A	; 138
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	01 90       	ld	r0, Z+
    283a:	f0 81       	ld	r31, Z
    283c:	e0 2d       	mov	r30, r0
    283e:	80 81       	ld	r24, Z
    2840:	fe 01       	movw	r30, r28
    2842:	ea 58       	subi	r30, 0x8A	; 138
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	01 90       	ld	r0, Z+
    2848:	f0 81       	ld	r31, Z
    284a:	e0 2d       	mov	r30, r0
    284c:	92 81       	ldd	r25, Z+2	; 0x02
    284e:	69 2f       	mov	r22, r25
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_LOW);
    2856:	fe 01       	movw	r30, r28
    2858:	ea 58       	subi	r30, 0x8A	; 138
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	01 90       	ld	r0, Z+
    285e:	f0 81       	ld	r31, Z
    2860:	e0 2d       	mov	r30, r0
    2862:	80 81       	ld	r24, Z
    2864:	fe 01       	movw	r30, r28
    2866:	ea 58       	subi	r30, 0x8A	; 138
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	01 90       	ld	r0, Z+
    286c:	f0 81       	ld	r31, Z
    286e:	e0 2d       	mov	r30, r0
    2870:	93 81       	ldd	r25, Z+3	; 0x03
    2872:	69 2f       	mov	r22, r25
    2874:	40 e0       	ldi	r20, 0x00	; 0
    2876:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_HIGH);
    287a:	fe 01       	movw	r30, r28
    287c:	ea 58       	subi	r30, 0x8A	; 138
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	01 90       	ld	r0, Z+
    2882:	f0 81       	ld	r31, Z
    2884:	e0 2d       	mov	r30, r0
    2886:	80 81       	ld	r24, Z
    2888:	fe 01       	movw	r30, r28
    288a:	ea 58       	subi	r30, 0x8A	; 138
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	01 90       	ld	r0, Z+
    2890:	f0 81       	ld	r31, Z
    2892:	e0 2d       	mov	r30, r0
    2894:	94 81       	ldd	r25, Z+4	; 0x04
    2896:	69 2f       	mov	r22, r25
    2898:	41 e0       	ldi	r20, 0x01	; 1
    289a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    289e:	fe 01       	movw	r30, r28
    28a0:	ef 5a       	subi	r30, 0xAF	; 175
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a0 ea       	ldi	r26, 0xA0	; 160
    28aa:	b0 e4       	ldi	r27, 0x40	; 64
    28ac:	80 83       	st	Z, r24
    28ae:	91 83       	std	Z+1, r25	; 0x01
    28b0:	a2 83       	std	Z+2, r26	; 0x02
    28b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b4:	8e 01       	movw	r16, r28
    28b6:	03 5b       	subi	r16, 0xB3	; 179
    28b8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ba:	fe 01       	movw	r30, r28
    28bc:	ef 5a       	subi	r30, 0xAF	; 175
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	60 81       	ld	r22, Z
    28c2:	71 81       	ldd	r23, Z+1	; 0x01
    28c4:	82 81       	ldd	r24, Z+2	; 0x02
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4a e7       	ldi	r20, 0x7A	; 122
    28ce:	55 e4       	ldi	r21, 0x45	; 69
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	f8 01       	movw	r30, r16
    28da:	80 83       	st	Z, r24
    28dc:	91 83       	std	Z+1, r25	; 0x01
    28de:	a2 83       	std	Z+2, r26	; 0x02
    28e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28e2:	fe 01       	movw	r30, r28
    28e4:	e3 5b       	subi	r30, 0xB3	; 179
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	60 81       	ld	r22, Z
    28ea:	71 81       	ldd	r23, Z+1	; 0x01
    28ec:	82 81       	ldd	r24, Z+2	; 0x02
    28ee:	93 81       	ldd	r25, Z+3	; 0x03
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e8       	ldi	r20, 0x80	; 128
    28f6:	5f e3       	ldi	r21, 0x3F	; 63
    28f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28fc:	88 23       	and	r24, r24
    28fe:	44 f4       	brge	.+16     	; 0x2910 <Stepper_u8RotateAngle+0x5de>
		__ticks = 1;
    2900:	fe 01       	movw	r30, r28
    2902:	e5 5b       	subi	r30, 0xB5	; 181
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	80 83       	st	Z, r24
    290e:	64 c0       	rjmp	.+200    	; 0x29d8 <Stepper_u8RotateAngle+0x6a6>
	else if (__tmp > 65535)
    2910:	fe 01       	movw	r30, r28
    2912:	e3 5b       	subi	r30, 0xB3	; 179
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	60 81       	ld	r22, Z
    2918:	71 81       	ldd	r23, Z+1	; 0x01
    291a:	82 81       	ldd	r24, Z+2	; 0x02
    291c:	93 81       	ldd	r25, Z+3	; 0x03
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	3f ef       	ldi	r19, 0xFF	; 255
    2922:	4f e7       	ldi	r20, 0x7F	; 127
    2924:	57 e4       	ldi	r21, 0x47	; 71
    2926:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    292a:	18 16       	cp	r1, r24
    292c:	0c f0       	brlt	.+2      	; 0x2930 <Stepper_u8RotateAngle+0x5fe>
    292e:	43 c0       	rjmp	.+134    	; 0x29b6 <Stepper_u8RotateAngle+0x684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2930:	fe 01       	movw	r30, r28
    2932:	ef 5a       	subi	r30, 0xAF	; 175
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	60 81       	ld	r22, Z
    2938:	71 81       	ldd	r23, Z+1	; 0x01
    293a:	82 81       	ldd	r24, Z+2	; 0x02
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e2       	ldi	r20, 0x20	; 32
    2944:	51 e4       	ldi	r21, 0x41	; 65
    2946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	8e 01       	movw	r16, r28
    2950:	05 5b       	subi	r16, 0xB5	; 181
    2952:	1f 4f       	sbci	r17, 0xFF	; 255
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	f8 01       	movw	r30, r16
    2962:	91 83       	std	Z+1, r25	; 0x01
    2964:	80 83       	st	Z, r24
    2966:	1f c0       	rjmp	.+62     	; 0x29a6 <Stepper_u8RotateAngle+0x674>
    2968:	fe 01       	movw	r30, r28
    296a:	e7 5b       	subi	r30, 0xB7	; 183
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 e9       	ldi	r24, 0x90	; 144
    2970:	91 e0       	ldi	r25, 0x01	; 1
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	80 83       	st	Z, r24
    2976:	fe 01       	movw	r30, r28
    2978:	e7 5b       	subi	r30, 0xB7	; 183
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <Stepper_u8RotateAngle+0x64e>
    2984:	fe 01       	movw	r30, r28
    2986:	e7 5b       	subi	r30, 0xB7	; 183
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	91 83       	std	Z+1, r25	; 0x01
    298c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298e:	de 01       	movw	r26, r28
    2990:	a5 5b       	subi	r26, 0xB5	; 181
    2992:	bf 4f       	sbci	r27, 0xFF	; 255
    2994:	fe 01       	movw	r30, r28
    2996:	e5 5b       	subi	r30, 0xB5	; 181
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	80 81       	ld	r24, Z
    299c:	91 81       	ldd	r25, Z+1	; 0x01
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	11 96       	adiw	r26, 0x01	; 1
    29a2:	9c 93       	st	X, r25
    29a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	fe 01       	movw	r30, r28
    29a8:	e5 5b       	subi	r30, 0xB5	; 181
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	80 81       	ld	r24, Z
    29ae:	91 81       	ldd	r25, Z+1	; 0x01
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	d1 f6       	brne	.-76     	; 0x2968 <Stepper_u8RotateAngle+0x636>
    29b4:	01 c1       	rjmp	.+514    	; 0x2bb8 <Stepper_u8RotateAngle+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b6:	8e 01       	movw	r16, r28
    29b8:	05 5b       	subi	r16, 0xB5	; 181
    29ba:	1f 4f       	sbci	r17, 0xFF	; 255
    29bc:	fe 01       	movw	r30, r28
    29be:	e3 5b       	subi	r30, 0xB3	; 179
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	60 81       	ld	r22, Z
    29c4:	71 81       	ldd	r23, Z+1	; 0x01
    29c6:	82 81       	ldd	r24, Z+2	; 0x02
    29c8:	93 81       	ldd	r25, Z+3	; 0x03
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	f8 01       	movw	r30, r16
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	80 83       	st	Z, r24
    29d8:	de 01       	movw	r26, r28
    29da:	a9 5b       	subi	r26, 0xB9	; 185
    29dc:	bf 4f       	sbci	r27, 0xFF	; 255
    29de:	fe 01       	movw	r30, r28
    29e0:	e5 5b       	subi	r30, 0xB5	; 181
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	80 81       	ld	r24, Z
    29e6:	91 81       	ldd	r25, Z+1	; 0x01
    29e8:	11 96       	adiw	r26, 0x01	; 1
    29ea:	9c 93       	st	X, r25
    29ec:	8e 93       	st	-X, r24
    29ee:	fe 01       	movw	r30, r28
    29f0:	e9 5b       	subi	r30, 0xB9	; 185
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 81       	ld	r24, Z
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <Stepper_u8RotateAngle+0x6c6>
    29fc:	fe 01       	movw	r30, r28
    29fe:	e9 5b       	subi	r30, 0xB9	; 185
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	80 83       	st	Z, r24
    2a06:	d8 c0       	rjmp	.+432    	; 0x2bb8 <Stepper_u8RotateAngle+0x886>
					_delay_ms(5);
				}
				else if(Local_u16LoopCounter % 4 == 3  )
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ef 58       	subi	r30, 0x8F	; 143
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	83 70       	andi	r24, 0x03	; 3
    2a14:	90 70       	andi	r25, 0x00	; 0
    2a16:	83 30       	cpi	r24, 0x03	; 3
    2a18:	91 05       	cpc	r25, r1
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <Stepper_u8RotateAngle+0x6ec>
    2a1c:	cd c0       	rjmp	.+410    	; 0x2bb8 <Stepper_u8RotateAngle+0x886>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_HIGH);
    2a1e:	fe 01       	movw	r30, r28
    2a20:	ea 58       	subi	r30, 0x8A	; 138
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	01 90       	ld	r0, Z+
    2a26:	f0 81       	ld	r31, Z
    2a28:	e0 2d       	mov	r30, r0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	ea 58       	subi	r30, 0x8A	; 138
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	01 90       	ld	r0, Z+
    2a34:	f0 81       	ld	r31, Z
    2a36:	e0 2d       	mov	r30, r0
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	69 2f       	mov	r22, r25
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_HIGH);
    2a42:	fe 01       	movw	r30, r28
    2a44:	ea 58       	subi	r30, 0x8A	; 138
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	01 90       	ld	r0, Z+
    2a4a:	f0 81       	ld	r31, Z
    2a4c:	e0 2d       	mov	r30, r0
    2a4e:	80 81       	ld	r24, Z
    2a50:	fe 01       	movw	r30, r28
    2a52:	ea 58       	subi	r30, 0x8A	; 138
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	01 90       	ld	r0, Z+
    2a58:	f0 81       	ld	r31, Z
    2a5a:	e0 2d       	mov	r30, r0
    2a5c:	92 81       	ldd	r25, Z+2	; 0x02
    2a5e:	69 2f       	mov	r22, r25
    2a60:	41 e0       	ldi	r20, 0x01	; 1
    2a62:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_HIGH);
    2a66:	fe 01       	movw	r30, r28
    2a68:	ea 58       	subi	r30, 0x8A	; 138
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	01 90       	ld	r0, Z+
    2a6e:	f0 81       	ld	r31, Z
    2a70:	e0 2d       	mov	r30, r0
    2a72:	80 81       	ld	r24, Z
    2a74:	fe 01       	movw	r30, r28
    2a76:	ea 58       	subi	r30, 0x8A	; 138
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	01 90       	ld	r0, Z+
    2a7c:	f0 81       	ld	r31, Z
    2a7e:	e0 2d       	mov	r30, r0
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	69 2f       	mov	r22, r25
    2a84:	41 e0       	ldi	r20, 0x01	; 1
    2a86:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_LOW);
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	ea 58       	subi	r30, 0x8A	; 138
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	01 90       	ld	r0, Z+
    2a92:	f0 81       	ld	r31, Z
    2a94:	e0 2d       	mov	r30, r0
    2a96:	80 81       	ld	r24, Z
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ea 58       	subi	r30, 0x8A	; 138
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	01 90       	ld	r0, Z+
    2aa0:	f0 81       	ld	r31, Z
    2aa2:	e0 2d       	mov	r30, r0
    2aa4:	94 81       	ldd	r25, Z+4	; 0x04
    2aa6:	69 2f       	mov	r22, r25
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    2aae:	fe 01       	movw	r30, r28
    2ab0:	ed 5b       	subi	r30, 0xBD	; 189
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	a0 ea       	ldi	r26, 0xA0	; 160
    2aba:	b0 e4       	ldi	r27, 0x40	; 64
    2abc:	80 83       	st	Z, r24
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	a2 83       	std	Z+2, r26	; 0x02
    2ac2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac4:	8e 01       	movw	r16, r28
    2ac6:	01 5c       	subi	r16, 0xC1	; 193
    2ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aca:	fe 01       	movw	r30, r28
    2acc:	ed 5b       	subi	r30, 0xBD	; 189
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	60 81       	ld	r22, Z
    2ad2:	71 81       	ldd	r23, Z+1	; 0x01
    2ad4:	82 81       	ldd	r24, Z+2	; 0x02
    2ad6:	93 81       	ldd	r25, Z+3	; 0x03
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	4a e7       	ldi	r20, 0x7A	; 122
    2ade:	55 e4       	ldi	r21, 0x45	; 69
    2ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	f8 01       	movw	r30, r16
    2aea:	80 83       	st	Z, r24
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	a2 83       	std	Z+2, r26	; 0x02
    2af0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2af2:	fe 01       	movw	r30, r28
    2af4:	ff 96       	adiw	r30, 0x3f	; 63
    2af6:	60 81       	ld	r22, Z
    2af8:	71 81       	ldd	r23, Z+1	; 0x01
    2afa:	82 81       	ldd	r24, Z+2	; 0x02
    2afc:	93 81       	ldd	r25, Z+3	; 0x03
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	2c f4       	brge	.+10     	; 0x2b18 <Stepper_u8RotateAngle+0x7e6>
		__ticks = 1;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9e af       	std	Y+62, r25	; 0x3e
    2b14:	8d af       	std	Y+61, r24	; 0x3d
    2b16:	46 c0       	rjmp	.+140    	; 0x2ba4 <Stepper_u8RotateAngle+0x872>
	else if (__tmp > 65535)
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ff 96       	adiw	r30, 0x3f	; 63
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	3f ef       	ldi	r19, 0xFF	; 255
    2b28:	4f e7       	ldi	r20, 0x7F	; 127
    2b2a:	57 e4       	ldi	r21, 0x47	; 71
    2b2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b30:	18 16       	cp	r1, r24
    2b32:	64 f5       	brge	.+88     	; 0x2b8c <Stepper_u8RotateAngle+0x85a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b34:	fe 01       	movw	r30, r28
    2b36:	ed 5b       	subi	r30, 0xBD	; 189
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	60 81       	ld	r22, Z
    2b3c:	71 81       	ldd	r23, Z+1	; 0x01
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	93 81       	ldd	r25, Z+3	; 0x03
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e2       	ldi	r20, 0x20	; 32
    2b48:	51 e4       	ldi	r21, 0x41	; 65
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	bc 01       	movw	r22, r24
    2b54:	cd 01       	movw	r24, r26
    2b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	9e af       	std	Y+62, r25	; 0x3e
    2b60:	8d af       	std	Y+61, r24	; 0x3d
    2b62:	0f c0       	rjmp	.+30     	; 0x2b82 <Stepper_u8RotateAngle+0x850>
    2b64:	80 e9       	ldi	r24, 0x90	; 144
    2b66:	91 e0       	ldi	r25, 0x01	; 1
    2b68:	9c af       	std	Y+60, r25	; 0x3c
    2b6a:	8b af       	std	Y+59, r24	; 0x3b
    2b6c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b6e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <Stepper_u8RotateAngle+0x83e>
    2b74:	9c af       	std	Y+60, r25	; 0x3c
    2b76:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b78:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	9e af       	std	Y+62, r25	; 0x3e
    2b80:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b82:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b84:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	69 f7       	brne	.-38     	; 0x2b64 <Stepper_u8RotateAngle+0x832>
    2b8a:	16 c0       	rjmp	.+44     	; 0x2bb8 <Stepper_u8RotateAngle+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	ff 96       	adiw	r30, 0x3f	; 63
    2b90:	60 81       	ld	r22, Z
    2b92:	71 81       	ldd	r23, Z+1	; 0x01
    2b94:	82 81       	ldd	r24, Z+2	; 0x02
    2b96:	93 81       	ldd	r25, Z+3	; 0x03
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9e af       	std	Y+62, r25	; 0x3e
    2ba2:	8d af       	std	Y+61, r24	; 0x3d
    2ba4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ba6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ba8:	9a af       	std	Y+58, r25	; 0x3a
    2baa:	89 af       	std	Y+57, r24	; 0x39
    2bac:	89 ad       	ldd	r24, Y+57	; 0x39
    2bae:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <Stepper_u8RotateAngle+0x87e>
    2bb4:	9a af       	std	Y+58, r25	; 0x3a
    2bb6:	89 af       	std	Y+57, r24	; 0x39
		Local_u16Steps = (uint16)( (  ( (uint32)Copy_u8Angle ) * (2048UL)  ) /360UL );

		if(Copy_u8Direction == ROTAT_CCW)
		{
			// untiClockwise rotation:Blue > Pink  > Yellow > Orange
			for(Local_u16LoopCounter = 0 ; Local_u16LoopCounter < Local_u16Steps ; Local_u16LoopCounter++)
    2bb8:	de 01       	movw	r26, r28
    2bba:	af 58       	subi	r26, 0x8F	; 143
    2bbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	ef 58       	subi	r30, 0x8F	; 143
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	80 81       	ld	r24, Z
    2bc6:	91 81       	ldd	r25, Z+1	; 0x01
    2bc8:	01 96       	adiw	r24, 0x01	; 1
    2bca:	8d 93       	st	X+, r24
    2bcc:	9c 93       	st	X, r25
    2bce:	fe 01       	movw	r30, r28
    2bd0:	ef 58       	subi	r30, 0x8F	; 143
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	de 01       	movw	r26, r28
    2bd6:	ad 58       	subi	r26, 0x8D	; 141
    2bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bda:	20 81       	ld	r18, Z
    2bdc:	31 81       	ldd	r19, Z+1	; 0x01
    2bde:	8d 91       	ld	r24, X+
    2be0:	9c 91       	ld	r25, X
    2be2:	11 97       	sbiw	r26, 0x01	; 1
    2be4:	28 17       	cp	r18, r24
    2be6:	39 07       	cpc	r19, r25
    2be8:	08 f4       	brcc	.+2      	; 0x2bec <Stepper_u8RotateAngle+0x8ba>
    2bea:	f7 cb       	rjmp	.-2066   	; 0x23da <Stepper_u8RotateAngle+0xa8>
    2bec:	3c c3       	rjmp	.+1656   	; 0x3266 <Stepper_u8RotateAngle+0xf34>
		}

		else if(ROTAT_CW)
		{
			// Clockwise rotation:Blue > Pink  > Yellow > Orange
			for(Local_u16LoopCounter = 0 ; Local_u16LoopCounter < Local_u16Steps ; Local_u16LoopCounter++)
    2bee:	fe 01       	movw	r30, r28
    2bf0:	ef 58       	subi	r30, 0x8F	; 143
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	11 82       	std	Z+1, r1	; 0x01
    2bf6:	10 82       	st	Z, r1
    2bf8:	21 c3       	rjmp	.+1602   	; 0x323c <Stepper_u8RotateAngle+0xf0a>
			{
				if(Local_u16LoopCounter % 4 == 0 )
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ef 58       	subi	r30, 0x8F	; 143
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	91 81       	ldd	r25, Z+1	; 0x01
    2c04:	83 70       	andi	r24, 0x03	; 3
    2c06:	90 70       	andi	r25, 0x00	; 0
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <Stepper_u8RotateAngle+0x8dc>
    2c0c:	bb c0       	rjmp	.+374    	; 0x2d84 <Stepper_u8RotateAngle+0xa52>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_HIGH);
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ea 58       	subi	r30, 0x8A	; 138
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	01 90       	ld	r0, Z+
    2c16:	f0 81       	ld	r31, Z
    2c18:	e0 2d       	mov	r30, r0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	ea 58       	subi	r30, 0x8A	; 138
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	01 90       	ld	r0, Z+
    2c24:	f0 81       	ld	r31, Z
    2c26:	e0 2d       	mov	r30, r0
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	69 2f       	mov	r22, r25
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_HIGH);
    2c32:	fe 01       	movw	r30, r28
    2c34:	ea 58       	subi	r30, 0x8A	; 138
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	01 90       	ld	r0, Z+
    2c3a:	f0 81       	ld	r31, Z
    2c3c:	e0 2d       	mov	r30, r0
    2c3e:	80 81       	ld	r24, Z
    2c40:	fe 01       	movw	r30, r28
    2c42:	ea 58       	subi	r30, 0x8A	; 138
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	01 90       	ld	r0, Z+
    2c48:	f0 81       	ld	r31, Z
    2c4a:	e0 2d       	mov	r30, r0
    2c4c:	92 81       	ldd	r25, Z+2	; 0x02
    2c4e:	69 2f       	mov	r22, r25
    2c50:	41 e0       	ldi	r20, 0x01	; 1
    2c52:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_HIGH);
    2c56:	fe 01       	movw	r30, r28
    2c58:	ea 58       	subi	r30, 0x8A	; 138
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	01 90       	ld	r0, Z+
    2c5e:	f0 81       	ld	r31, Z
    2c60:	e0 2d       	mov	r30, r0
    2c62:	80 81       	ld	r24, Z
    2c64:	fe 01       	movw	r30, r28
    2c66:	ea 58       	subi	r30, 0x8A	; 138
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	01 90       	ld	r0, Z+
    2c6c:	f0 81       	ld	r31, Z
    2c6e:	e0 2d       	mov	r30, r0
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	69 2f       	mov	r22, r25
    2c74:	41 e0       	ldi	r20, 0x01	; 1
    2c76:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_LOW);
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	ea 58       	subi	r30, 0x8A	; 138
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	01 90       	ld	r0, Z+
    2c82:	f0 81       	ld	r31, Z
    2c84:	e0 2d       	mov	r30, r0
    2c86:	80 81       	ld	r24, Z
    2c88:	fe 01       	movw	r30, r28
    2c8a:	ea 58       	subi	r30, 0x8A	; 138
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	01 90       	ld	r0, Z+
    2c90:	f0 81       	ld	r31, Z
    2c92:	e0 2d       	mov	r30, r0
    2c94:	94 81       	ldd	r25, Z+4	; 0x04
    2c96:	69 2f       	mov	r22, r25
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ca4:	b0 e4       	ldi	r27, 0x40	; 64
    2ca6:	8d ab       	std	Y+53, r24	; 0x35
    2ca8:	9e ab       	std	Y+54, r25	; 0x36
    2caa:	af ab       	std	Y+55, r26	; 0x37
    2cac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cae:	6d a9       	ldd	r22, Y+53	; 0x35
    2cb0:	7e a9       	ldd	r23, Y+54	; 0x36
    2cb2:	8f a9       	ldd	r24, Y+55	; 0x37
    2cb4:	98 ad       	ldd	r25, Y+56	; 0x38
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4a e7       	ldi	r20, 0x7A	; 122
    2cbc:	55 e4       	ldi	r21, 0x45	; 69
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	89 ab       	std	Y+49, r24	; 0x31
    2cc8:	9a ab       	std	Y+50, r25	; 0x32
    2cca:	ab ab       	std	Y+51, r26	; 0x33
    2ccc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cce:	69 a9       	ldd	r22, Y+49	; 0x31
    2cd0:	7a a9       	ldd	r23, Y+50	; 0x32
    2cd2:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd4:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e8       	ldi	r20, 0x80	; 128
    2cdc:	5f e3       	ldi	r21, 0x3F	; 63
    2cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ce2:	88 23       	and	r24, r24
    2ce4:	2c f4       	brge	.+10     	; 0x2cf0 <Stepper_u8RotateAngle+0x9be>
		__ticks = 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	98 ab       	std	Y+48, r25	; 0x30
    2cec:	8f a7       	std	Y+47, r24	; 0x2f
    2cee:	3f c0       	rjmp	.+126    	; 0x2d6e <Stepper_u8RotateAngle+0xa3c>
	else if (__tmp > 65535)
    2cf0:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf2:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf6:	9c a9       	ldd	r25, Y+52	; 0x34
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	3f ef       	ldi	r19, 0xFF	; 255
    2cfc:	4f e7       	ldi	r20, 0x7F	; 127
    2cfe:	57 e4       	ldi	r21, 0x47	; 71
    2d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d04:	18 16       	cp	r1, r24
    2d06:	4c f5       	brge	.+82     	; 0x2d5a <Stepper_u8RotateAngle+0xa28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d08:	6d a9       	ldd	r22, Y+53	; 0x35
    2d0a:	7e a9       	ldd	r23, Y+54	; 0x36
    2d0c:	8f a9       	ldd	r24, Y+55	; 0x37
    2d0e:	98 ad       	ldd	r25, Y+56	; 0x38
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e2       	ldi	r20, 0x20	; 32
    2d16:	51 e4       	ldi	r21, 0x41	; 65
    2d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	98 ab       	std	Y+48, r25	; 0x30
    2d2e:	8f a7       	std	Y+47, r24	; 0x2f
    2d30:	0f c0       	rjmp	.+30     	; 0x2d50 <Stepper_u8RotateAngle+0xa1e>
    2d32:	80 e9       	ldi	r24, 0x90	; 144
    2d34:	91 e0       	ldi	r25, 0x01	; 1
    2d36:	9e a7       	std	Y+46, r25	; 0x2e
    2d38:	8d a7       	std	Y+45, r24	; 0x2d
    2d3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <Stepper_u8RotateAngle+0xa0c>
    2d42:	9e a7       	std	Y+46, r25	; 0x2e
    2d44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d48:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	98 ab       	std	Y+48, r25	; 0x30
    2d4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d52:	98 a9       	ldd	r25, Y+48	; 0x30
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	69 f7       	brne	.-38     	; 0x2d32 <Stepper_u8RotateAngle+0xa00>
    2d58:	66 c2       	rjmp	.+1228   	; 0x3226 <Stepper_u8RotateAngle+0xef4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5a:	69 a9       	ldd	r22, Y+49	; 0x31
    2d5c:	7a a9       	ldd	r23, Y+50	; 0x32
    2d5e:	8b a9       	ldd	r24, Y+51	; 0x33
    2d60:	9c a9       	ldd	r25, Y+52	; 0x34
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	98 ab       	std	Y+48, r25	; 0x30
    2d6c:	8f a7       	std	Y+47, r24	; 0x2f
    2d6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d70:	98 a9       	ldd	r25, Y+48	; 0x30
    2d72:	9c a7       	std	Y+44, r25	; 0x2c
    2d74:	8b a7       	std	Y+43, r24	; 0x2b
    2d76:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d78:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <Stepper_u8RotateAngle+0xa48>
    2d7e:	9c a7       	std	Y+44, r25	; 0x2c
    2d80:	8b a7       	std	Y+43, r24	; 0x2b
    2d82:	51 c2       	rjmp	.+1186   	; 0x3226 <Stepper_u8RotateAngle+0xef4>
					_delay_ms(5);
				}
				else if(Local_u16LoopCounter % 4 == 1 )
    2d84:	fe 01       	movw	r30, r28
    2d86:	ef 58       	subi	r30, 0x8F	; 143
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	83 70       	andi	r24, 0x03	; 3
    2d90:	90 70       	andi	r25, 0x00	; 0
    2d92:	81 30       	cpi	r24, 0x01	; 1
    2d94:	91 05       	cpc	r25, r1
    2d96:	09 f0       	breq	.+2      	; 0x2d9a <Stepper_u8RotateAngle+0xa68>
    2d98:	bb c0       	rjmp	.+374    	; 0x2f10 <Stepper_u8RotateAngle+0xbde>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PORT_HIGH);
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ea 58       	subi	r30, 0x8A	; 138
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	01 90       	ld	r0, Z+
    2da2:	f0 81       	ld	r31, Z
    2da4:	e0 2d       	mov	r30, r0
    2da6:	80 81       	ld	r24, Z
    2da8:	fe 01       	movw	r30, r28
    2daa:	ea 58       	subi	r30, 0x8A	; 138
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	01 90       	ld	r0, Z+
    2db0:	f0 81       	ld	r31, Z
    2db2:	e0 2d       	mov	r30, r0
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	69 2f       	mov	r22, r25
    2db8:	4f ef       	ldi	r20, 0xFF	; 255
    2dba:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PORT_HIGH);
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	ea 58       	subi	r30, 0x8A	; 138
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	01 90       	ld	r0, Z+
    2dc6:	f0 81       	ld	r31, Z
    2dc8:	e0 2d       	mov	r30, r0
    2dca:	80 81       	ld	r24, Z
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ea 58       	subi	r30, 0x8A	; 138
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	01 90       	ld	r0, Z+
    2dd4:	f0 81       	ld	r31, Z
    2dd6:	e0 2d       	mov	r30, r0
    2dd8:	92 81       	ldd	r25, Z+2	; 0x02
    2dda:	69 2f       	mov	r22, r25
    2ddc:	4f ef       	ldi	r20, 0xFF	; 255
    2dde:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_LOW);
    2de2:	fe 01       	movw	r30, r28
    2de4:	ea 58       	subi	r30, 0x8A	; 138
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	01 90       	ld	r0, Z+
    2dea:	f0 81       	ld	r31, Z
    2dec:	e0 2d       	mov	r30, r0
    2dee:	80 81       	ld	r24, Z
    2df0:	fe 01       	movw	r30, r28
    2df2:	ea 58       	subi	r30, 0x8A	; 138
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	01 90       	ld	r0, Z+
    2df8:	f0 81       	ld	r31, Z
    2dfa:	e0 2d       	mov	r30, r0
    2dfc:	93 81       	ldd	r25, Z+3	; 0x03
    2dfe:	69 2f       	mov	r22, r25
    2e00:	40 e0       	ldi	r20, 0x00	; 0
    2e02:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PORT_HIGH);
    2e06:	fe 01       	movw	r30, r28
    2e08:	ea 58       	subi	r30, 0x8A	; 138
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	01 90       	ld	r0, Z+
    2e0e:	f0 81       	ld	r31, Z
    2e10:	e0 2d       	mov	r30, r0
    2e12:	80 81       	ld	r24, Z
    2e14:	fe 01       	movw	r30, r28
    2e16:	ea 58       	subi	r30, 0x8A	; 138
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	01 90       	ld	r0, Z+
    2e1c:	f0 81       	ld	r31, Z
    2e1e:	e0 2d       	mov	r30, r0
    2e20:	94 81       	ldd	r25, Z+4	; 0x04
    2e22:	69 2f       	mov	r22, r25
    2e24:	4f ef       	ldi	r20, 0xFF	; 255
    2e26:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	a0 ea       	ldi	r26, 0xA0	; 160
    2e30:	b0 e4       	ldi	r27, 0x40	; 64
    2e32:	8f a3       	std	Y+39, r24	; 0x27
    2e34:	98 a7       	std	Y+40, r25	; 0x28
    2e36:	a9 a7       	std	Y+41, r26	; 0x29
    2e38:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e3c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e3e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e40:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	4a e7       	ldi	r20, 0x7A	; 122
    2e48:	55 e4       	ldi	r21, 0x45	; 69
    2e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	8b a3       	std	Y+35, r24	; 0x23
    2e54:	9c a3       	std	Y+36, r25	; 0x24
    2e56:	ad a3       	std	Y+37, r26	; 0x25
    2e58:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e60:	9e a1       	ldd	r25, Y+38	; 0x26
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	40 e8       	ldi	r20, 0x80	; 128
    2e68:	5f e3       	ldi	r21, 0x3F	; 63
    2e6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e6e:	88 23       	and	r24, r24
    2e70:	2c f4       	brge	.+10     	; 0x2e7c <Stepper_u8RotateAngle+0xb4a>
		__ticks = 1;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	9a a3       	std	Y+34, r25	; 0x22
    2e78:	89 a3       	std	Y+33, r24	; 0x21
    2e7a:	3f c0       	rjmp	.+126    	; 0x2efa <Stepper_u8RotateAngle+0xbc8>
	else if (__tmp > 65535)
    2e7c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e7e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e80:	8d a1       	ldd	r24, Y+37	; 0x25
    2e82:	9e a1       	ldd	r25, Y+38	; 0x26
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	3f ef       	ldi	r19, 0xFF	; 255
    2e88:	4f e7       	ldi	r20, 0x7F	; 127
    2e8a:	57 e4       	ldi	r21, 0x47	; 71
    2e8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e90:	18 16       	cp	r1, r24
    2e92:	4c f5       	brge	.+82     	; 0x2ee6 <Stepper_u8RotateAngle+0xbb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e94:	6f a1       	ldd	r22, Y+39	; 0x27
    2e96:	78 a5       	ldd	r23, Y+40	; 0x28
    2e98:	89 a5       	ldd	r24, Y+41	; 0x29
    2e9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e2       	ldi	r20, 0x20	; 32
    2ea2:	51 e4       	ldi	r21, 0x41	; 65
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	bc 01       	movw	r22, r24
    2eae:	cd 01       	movw	r24, r26
    2eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	9a a3       	std	Y+34, r25	; 0x22
    2eba:	89 a3       	std	Y+33, r24	; 0x21
    2ebc:	0f c0       	rjmp	.+30     	; 0x2edc <Stepper_u8RotateAngle+0xbaa>
    2ebe:	80 e9       	ldi	r24, 0x90	; 144
    2ec0:	91 e0       	ldi	r25, 0x01	; 1
    2ec2:	98 a3       	std	Y+32, r25	; 0x20
    2ec4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ec6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ec8:	98 a1       	ldd	r25, Y+32	; 0x20
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <Stepper_u8RotateAngle+0xb98>
    2ece:	98 a3       	std	Y+32, r25	; 0x20
    2ed0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	9a a3       	std	Y+34, r25	; 0x22
    2eda:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2edc:	89 a1       	ldd	r24, Y+33	; 0x21
    2ede:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	69 f7       	brne	.-38     	; 0x2ebe <Stepper_u8RotateAngle+0xb8c>
    2ee4:	a0 c1       	rjmp	.+832    	; 0x3226 <Stepper_u8RotateAngle+0xef4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee8:	7c a1       	ldd	r23, Y+36	; 0x24
    2eea:	8d a1       	ldd	r24, Y+37	; 0x25
    2eec:	9e a1       	ldd	r25, Y+38	; 0x26
    2eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	9a a3       	std	Y+34, r25	; 0x22
    2ef8:	89 a3       	std	Y+33, r24	; 0x21
    2efa:	89 a1       	ldd	r24, Y+33	; 0x21
    2efc:	9a a1       	ldd	r25, Y+34	; 0x22
    2efe:	9e 8f       	std	Y+30, r25	; 0x1e
    2f00:	8d 8f       	std	Y+29, r24	; 0x1d
    2f02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <Stepper_u8RotateAngle+0xbd4>
    2f0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f0c:	8d 8f       	std	Y+29, r24	; 0x1d
    2f0e:	8b c1       	rjmp	.+790    	; 0x3226 <Stepper_u8RotateAngle+0xef4>
					_delay_ms(5);

				}
				else if(Local_u16LoopCounter % 4 == 2 )
    2f10:	fe 01       	movw	r30, r28
    2f12:	ef 58       	subi	r30, 0x8F	; 143
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	83 70       	andi	r24, 0x03	; 3
    2f1c:	90 70       	andi	r25, 0x00	; 0
    2f1e:	82 30       	cpi	r24, 0x02	; 2
    2f20:	91 05       	cpc	r25, r1
    2f22:	09 f0       	breq	.+2      	; 0x2f26 <Stepper_u8RotateAngle+0xbf4>
    2f24:	bb c0       	rjmp	.+374    	; 0x309c <Stepper_u8RotateAngle+0xd6a>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PORT_HIGH);
    2f26:	fe 01       	movw	r30, r28
    2f28:	ea 58       	subi	r30, 0x8A	; 138
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	01 90       	ld	r0, Z+
    2f2e:	f0 81       	ld	r31, Z
    2f30:	e0 2d       	mov	r30, r0
    2f32:	80 81       	ld	r24, Z
    2f34:	fe 01       	movw	r30, r28
    2f36:	ea 58       	subi	r30, 0x8A	; 138
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	01 90       	ld	r0, Z+
    2f3c:	f0 81       	ld	r31, Z
    2f3e:	e0 2d       	mov	r30, r0
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	69 2f       	mov	r22, r25
    2f44:	4f ef       	ldi	r20, 0xFF	; 255
    2f46:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_LOW);
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	ea 58       	subi	r30, 0x8A	; 138
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	01 90       	ld	r0, Z+
    2f52:	f0 81       	ld	r31, Z
    2f54:	e0 2d       	mov	r30, r0
    2f56:	80 81       	ld	r24, Z
    2f58:	fe 01       	movw	r30, r28
    2f5a:	ea 58       	subi	r30, 0x8A	; 138
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	01 90       	ld	r0, Z+
    2f60:	f0 81       	ld	r31, Z
    2f62:	e0 2d       	mov	r30, r0
    2f64:	92 81       	ldd	r25, Z+2	; 0x02
    2f66:	69 2f       	mov	r22, r25
    2f68:	40 e0       	ldi	r20, 0x00	; 0
    2f6a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PORT_HIGH);
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ea 58       	subi	r30, 0x8A	; 138
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	01 90       	ld	r0, Z+
    2f76:	f0 81       	ld	r31, Z
    2f78:	e0 2d       	mov	r30, r0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	ea 58       	subi	r30, 0x8A	; 138
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	01 90       	ld	r0, Z+
    2f84:	f0 81       	ld	r31, Z
    2f86:	e0 2d       	mov	r30, r0
    2f88:	93 81       	ldd	r25, Z+3	; 0x03
    2f8a:	69 2f       	mov	r22, r25
    2f8c:	4f ef       	ldi	r20, 0xFF	; 255
    2f8e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PORT_HIGH);
    2f92:	fe 01       	movw	r30, r28
    2f94:	ea 58       	subi	r30, 0x8A	; 138
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	01 90       	ld	r0, Z+
    2f9a:	f0 81       	ld	r31, Z
    2f9c:	e0 2d       	mov	r30, r0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	ea 58       	subi	r30, 0x8A	; 138
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	01 90       	ld	r0, Z+
    2fa8:	f0 81       	ld	r31, Z
    2faa:	e0 2d       	mov	r30, r0
    2fac:	94 81       	ldd	r25, Z+4	; 0x04
    2fae:	69 2f       	mov	r22, r25
    2fb0:	4f ef       	ldi	r20, 0xFF	; 255
    2fb2:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	a0 ea       	ldi	r26, 0xA0	; 160
    2fbc:	b0 e4       	ldi	r27, 0x40	; 64
    2fbe:	89 8f       	std	Y+25, r24	; 0x19
    2fc0:	9a 8f       	std	Y+26, r25	; 0x1a
    2fc2:	ab 8f       	std	Y+27, r26	; 0x1b
    2fc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc6:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	4a e7       	ldi	r20, 0x7A	; 122
    2fd4:	55 e4       	ldi	r21, 0x45	; 69
    2fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	8d 8b       	std	Y+21, r24	; 0x15
    2fe0:	9e 8b       	std	Y+22, r25	; 0x16
    2fe2:	af 8b       	std	Y+23, r26	; 0x17
    2fe4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    2fea:	8f 89       	ldd	r24, Y+23	; 0x17
    2fec:	98 8d       	ldd	r25, Y+24	; 0x18
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e8       	ldi	r20, 0x80	; 128
    2ff4:	5f e3       	ldi	r21, 0x3F	; 63
    2ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ffa:	88 23       	and	r24, r24
    2ffc:	2c f4       	brge	.+10     	; 0x3008 <Stepper_u8RotateAngle+0xcd6>
		__ticks = 1;
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	9c 8b       	std	Y+20, r25	; 0x14
    3004:	8b 8b       	std	Y+19, r24	; 0x13
    3006:	3f c0       	rjmp	.+126    	; 0x3086 <Stepper_u8RotateAngle+0xd54>
	else if (__tmp > 65535)
    3008:	6d 89       	ldd	r22, Y+21	; 0x15
    300a:	7e 89       	ldd	r23, Y+22	; 0x16
    300c:	8f 89       	ldd	r24, Y+23	; 0x17
    300e:	98 8d       	ldd	r25, Y+24	; 0x18
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	3f ef       	ldi	r19, 0xFF	; 255
    3014:	4f e7       	ldi	r20, 0x7F	; 127
    3016:	57 e4       	ldi	r21, 0x47	; 71
    3018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    301c:	18 16       	cp	r1, r24
    301e:	4c f5       	brge	.+82     	; 0x3072 <Stepper_u8RotateAngle+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3020:	69 8d       	ldd	r22, Y+25	; 0x19
    3022:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3024:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3026:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e2       	ldi	r20, 0x20	; 32
    302e:	51 e4       	ldi	r21, 0x41	; 65
    3030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	bc 01       	movw	r22, r24
    303a:	cd 01       	movw	r24, r26
    303c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	9c 8b       	std	Y+20, r25	; 0x14
    3046:	8b 8b       	std	Y+19, r24	; 0x13
    3048:	0f c0       	rjmp	.+30     	; 0x3068 <Stepper_u8RotateAngle+0xd36>
    304a:	80 e9       	ldi	r24, 0x90	; 144
    304c:	91 e0       	ldi	r25, 0x01	; 1
    304e:	9a 8b       	std	Y+18, r25	; 0x12
    3050:	89 8b       	std	Y+17, r24	; 0x11
    3052:	89 89       	ldd	r24, Y+17	; 0x11
    3054:	9a 89       	ldd	r25, Y+18	; 0x12
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	f1 f7       	brne	.-4      	; 0x3056 <Stepper_u8RotateAngle+0xd24>
    305a:	9a 8b       	std	Y+18, r25	; 0x12
    305c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305e:	8b 89       	ldd	r24, Y+19	; 0x13
    3060:	9c 89       	ldd	r25, Y+20	; 0x14
    3062:	01 97       	sbiw	r24, 0x01	; 1
    3064:	9c 8b       	std	Y+20, r25	; 0x14
    3066:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3068:	8b 89       	ldd	r24, Y+19	; 0x13
    306a:	9c 89       	ldd	r25, Y+20	; 0x14
    306c:	00 97       	sbiw	r24, 0x00	; 0
    306e:	69 f7       	brne	.-38     	; 0x304a <Stepper_u8RotateAngle+0xd18>
    3070:	da c0       	rjmp	.+436    	; 0x3226 <Stepper_u8RotateAngle+0xef4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3072:	6d 89       	ldd	r22, Y+21	; 0x15
    3074:	7e 89       	ldd	r23, Y+22	; 0x16
    3076:	8f 89       	ldd	r24, Y+23	; 0x17
    3078:	98 8d       	ldd	r25, Y+24	; 0x18
    307a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	9c 8b       	std	Y+20, r25	; 0x14
    3084:	8b 8b       	std	Y+19, r24	; 0x13
    3086:	8b 89       	ldd	r24, Y+19	; 0x13
    3088:	9c 89       	ldd	r25, Y+20	; 0x14
    308a:	98 8b       	std	Y+16, r25	; 0x10
    308c:	8f 87       	std	Y+15, r24	; 0x0f
    308e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3090:	98 89       	ldd	r25, Y+16	; 0x10
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	f1 f7       	brne	.-4      	; 0x3092 <Stepper_u8RotateAngle+0xd60>
    3096:	98 8b       	std	Y+16, r25	; 0x10
    3098:	8f 87       	std	Y+15, r24	; 0x0f
    309a:	c5 c0       	rjmp	.+394    	; 0x3226 <Stepper_u8RotateAngle+0xef4>
					_delay_ms(5);
				}
				else if(Local_u16LoopCounter % 4 == 3  )
    309c:	fe 01       	movw	r30, r28
    309e:	ef 58       	subi	r30, 0x8F	; 143
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	80 81       	ld	r24, Z
    30a4:	91 81       	ldd	r25, Z+1	; 0x01
    30a6:	83 70       	andi	r24, 0x03	; 3
    30a8:	90 70       	andi	r25, 0x00	; 0
    30aa:	83 30       	cpi	r24, 0x03	; 3
    30ac:	91 05       	cpc	r25, r1
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <Stepper_u8RotateAngle+0xd80>
    30b0:	ba c0       	rjmp	.+372    	; 0x3226 <Stepper_u8RotateAngle+0xef4>
				{
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_LOW);
    30b2:	fe 01       	movw	r30, r28
    30b4:	ea 58       	subi	r30, 0x8A	; 138
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	01 90       	ld	r0, Z+
    30ba:	f0 81       	ld	r31, Z
    30bc:	e0 2d       	mov	r30, r0
    30be:	80 81       	ld	r24, Z
    30c0:	fe 01       	movw	r30, r28
    30c2:	ea 58       	subi	r30, 0x8A	; 138
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	01 90       	ld	r0, Z+
    30c8:	f0 81       	ld	r31, Z
    30ca:	e0 2d       	mov	r30, r0
    30cc:	91 81       	ldd	r25, Z+1	; 0x01
    30ce:	69 2f       	mov	r22, r25
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PORT_HIGH);
    30d6:	fe 01       	movw	r30, r28
    30d8:	ea 58       	subi	r30, 0x8A	; 138
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	01 90       	ld	r0, Z+
    30de:	f0 81       	ld	r31, Z
    30e0:	e0 2d       	mov	r30, r0
    30e2:	80 81       	ld	r24, Z
    30e4:	fe 01       	movw	r30, r28
    30e6:	ea 58       	subi	r30, 0x8A	; 138
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	01 90       	ld	r0, Z+
    30ec:	f0 81       	ld	r31, Z
    30ee:	e0 2d       	mov	r30, r0
    30f0:	92 81       	ldd	r25, Z+2	; 0x02
    30f2:	69 2f       	mov	r22, r25
    30f4:	4f ef       	ldi	r20, 0xFF	; 255
    30f6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PORT_HIGH);
    30fa:	fe 01       	movw	r30, r28
    30fc:	ea 58       	subi	r30, 0x8A	; 138
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	01 90       	ld	r0, Z+
    3102:	f0 81       	ld	r31, Z
    3104:	e0 2d       	mov	r30, r0
    3106:	80 81       	ld	r24, Z
    3108:	fe 01       	movw	r30, r28
    310a:	ea 58       	subi	r30, 0x8A	; 138
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	01 90       	ld	r0, Z+
    3110:	f0 81       	ld	r31, Z
    3112:	e0 2d       	mov	r30, r0
    3114:	93 81       	ldd	r25, Z+3	; 0x03
    3116:	69 2f       	mov	r22, r25
    3118:	4f ef       	ldi	r20, 0xFF	; 255
    311a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PORT_HIGH);
    311e:	fe 01       	movw	r30, r28
    3120:	ea 58       	subi	r30, 0x8A	; 138
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	01 90       	ld	r0, Z+
    3126:	f0 81       	ld	r31, Z
    3128:	e0 2d       	mov	r30, r0
    312a:	80 81       	ld	r24, Z
    312c:	fe 01       	movw	r30, r28
    312e:	ea 58       	subi	r30, 0x8A	; 138
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	01 90       	ld	r0, Z+
    3134:	f0 81       	ld	r31, Z
    3136:	e0 2d       	mov	r30, r0
    3138:	94 81       	ldd	r25, Z+4	; 0x04
    313a:	69 2f       	mov	r22, r25
    313c:	4f ef       	ldi	r20, 0xFF	; 255
    313e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	a0 ea       	ldi	r26, 0xA0	; 160
    3148:	b0 e4       	ldi	r27, 0x40	; 64
    314a:	8b 87       	std	Y+11, r24	; 0x0b
    314c:	9c 87       	std	Y+12, r25	; 0x0c
    314e:	ad 87       	std	Y+13, r26	; 0x0d
    3150:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3152:	6b 85       	ldd	r22, Y+11	; 0x0b
    3154:	7c 85       	ldd	r23, Y+12	; 0x0c
    3156:	8d 85       	ldd	r24, Y+13	; 0x0d
    3158:	9e 85       	ldd	r25, Y+14	; 0x0e
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	4a e7       	ldi	r20, 0x7A	; 122
    3160:	55 e4       	ldi	r21, 0x45	; 69
    3162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	8f 83       	std	Y+7, r24	; 0x07
    316c:	98 87       	std	Y+8, r25	; 0x08
    316e:	a9 87       	std	Y+9, r26	; 0x09
    3170:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3172:	6f 81       	ldd	r22, Y+7	; 0x07
    3174:	78 85       	ldd	r23, Y+8	; 0x08
    3176:	89 85       	ldd	r24, Y+9	; 0x09
    3178:	9a 85       	ldd	r25, Y+10	; 0x0a
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e8       	ldi	r20, 0x80	; 128
    3180:	5f e3       	ldi	r21, 0x3F	; 63
    3182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3186:	88 23       	and	r24, r24
    3188:	2c f4       	brge	.+10     	; 0x3194 <Stepper_u8RotateAngle+0xe62>
		__ticks = 1;
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	8d 83       	std	Y+5, r24	; 0x05
    3192:	3f c0       	rjmp	.+126    	; 0x3212 <Stepper_u8RotateAngle+0xee0>
	else if (__tmp > 65535)
    3194:	6f 81       	ldd	r22, Y+7	; 0x07
    3196:	78 85       	ldd	r23, Y+8	; 0x08
    3198:	89 85       	ldd	r24, Y+9	; 0x09
    319a:	9a 85       	ldd	r25, Y+10	; 0x0a
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	3f ef       	ldi	r19, 0xFF	; 255
    31a0:	4f e7       	ldi	r20, 0x7F	; 127
    31a2:	57 e4       	ldi	r21, 0x47	; 71
    31a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a8:	18 16       	cp	r1, r24
    31aa:	4c f5       	brge	.+82     	; 0x31fe <Stepper_u8RotateAngle+0xecc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e2       	ldi	r20, 0x20	; 32
    31ba:	51 e4       	ldi	r21, 0x41	; 65
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	9e 83       	std	Y+6, r25	; 0x06
    31d2:	8d 83       	std	Y+5, r24	; 0x05
    31d4:	0f c0       	rjmp	.+30     	; 0x31f4 <Stepper_u8RotateAngle+0xec2>
    31d6:	80 e9       	ldi	r24, 0x90	; 144
    31d8:	91 e0       	ldi	r25, 0x01	; 1
    31da:	9c 83       	std	Y+4, r25	; 0x04
    31dc:	8b 83       	std	Y+3, r24	; 0x03
    31de:	8b 81       	ldd	r24, Y+3	; 0x03
    31e0:	9c 81       	ldd	r25, Y+4	; 0x04
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <Stepper_u8RotateAngle+0xeb0>
    31e6:	9c 83       	std	Y+4, r25	; 0x04
    31e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	9e 81       	ldd	r25, Y+6	; 0x06
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	9e 83       	std	Y+6, r25	; 0x06
    31f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f4:	8d 81       	ldd	r24, Y+5	; 0x05
    31f6:	9e 81       	ldd	r25, Y+6	; 0x06
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	69 f7       	brne	.-38     	; 0x31d6 <Stepper_u8RotateAngle+0xea4>
    31fc:	14 c0       	rjmp	.+40     	; 0x3226 <Stepper_u8RotateAngle+0xef4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3200:	78 85       	ldd	r23, Y+8	; 0x08
    3202:	89 85       	ldd	r24, Y+9	; 0x09
    3204:	9a 85       	ldd	r25, Y+10	; 0x0a
    3206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	9e 83       	std	Y+6, r25	; 0x06
    3210:	8d 83       	std	Y+5, r24	; 0x05
    3212:	8d 81       	ldd	r24, Y+5	; 0x05
    3214:	9e 81       	ldd	r25, Y+6	; 0x06
    3216:	9a 83       	std	Y+2, r25	; 0x02
    3218:	89 83       	std	Y+1, r24	; 0x01
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	9a 81       	ldd	r25, Y+2	; 0x02
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <Stepper_u8RotateAngle+0xeec>
    3222:	9a 83       	std	Y+2, r25	; 0x02
    3224:	89 83       	std	Y+1, r24	; 0x01
		}

		else if(ROTAT_CW)
		{
			// Clockwise rotation:Blue > Pink  > Yellow > Orange
			for(Local_u16LoopCounter = 0 ; Local_u16LoopCounter < Local_u16Steps ; Local_u16LoopCounter++)
    3226:	de 01       	movw	r26, r28
    3228:	af 58       	subi	r26, 0x8F	; 143
    322a:	bf 4f       	sbci	r27, 0xFF	; 255
    322c:	fe 01       	movw	r30, r28
    322e:	ef 58       	subi	r30, 0x8F	; 143
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	01 96       	adiw	r24, 0x01	; 1
    3238:	8d 93       	st	X+, r24
    323a:	9c 93       	st	X, r25
    323c:	fe 01       	movw	r30, r28
    323e:	ef 58       	subi	r30, 0x8F	; 143
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	de 01       	movw	r26, r28
    3244:	ad 58       	subi	r26, 0x8D	; 141
    3246:	bf 4f       	sbci	r27, 0xFF	; 255
    3248:	20 81       	ld	r18, Z
    324a:	31 81       	ldd	r19, Z+1	; 0x01
    324c:	8d 91       	ld	r24, X+
    324e:	9c 91       	ld	r25, X
    3250:	11 97       	sbiw	r26, 0x01	; 1
    3252:	28 17       	cp	r18, r24
    3254:	39 07       	cpc	r19, r25
    3256:	08 f4       	brcc	.+2      	; 0x325a <Stepper_u8RotateAngle+0xf28>
    3258:	d0 cc       	rjmp	.-1632   	; 0x2bfa <Stepper_u8RotateAngle+0x8c8>
    325a:	05 c0       	rjmp	.+10     	; 0x3266 <Stepper_u8RotateAngle+0xf34>


	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR ;// Set error state to NULL pointer error
    325c:	fe 01       	movw	r30, r28
    325e:	eb 58       	subi	r30, 0x8B	; 139
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	82 e0       	ldi	r24, 0x02	; 2
    3264:	80 83       	st	Z, r24
	}
	return Local_u8ErrorState ;// Return the error state
    3266:	fe 01       	movw	r30, r28
    3268:	eb 58       	subi	r30, 0x8B	; 139
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	80 81       	ld	r24, Z
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_LOW);
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_LOW);
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_LOW);
	_delay_ms(5);
	//	stepper_motor_stop(&ST_Motor1);
}
    326e:	c6 58       	subi	r28, 0x86	; 134
    3270:	df 4f       	sbci	r29, 0xFF	; 255
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	cd bf       	out	0x3d, r28	; 61
    327c:	cf 91       	pop	r28
    327e:	df 91       	pop	r29
    3280:	1f 91       	pop	r17
    3282:	0f 91       	pop	r16
    3284:	08 95       	ret

00003286 <stepper_motor_stop>:

void stepper_motor_stop(const SteperConfig_t* Copy_stpStepper)
{
    3286:	df 93       	push	r29
    3288:	cf 93       	push	r28
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	60 97       	sbiw	r28, 0x10	; 16
    3290:	0f b6       	in	r0, 0x3f	; 63
    3292:	f8 94       	cli
    3294:	de bf       	out	0x3e, r29	; 62
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	cd bf       	out	0x3d, r28	; 61
    329a:	98 8b       	std	Y+16, r25	; 0x10
    329c:	8f 87       	std	Y+15, r24	; 0x0f

	// Stepper Motor OFF
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> BLUE_PIN  ,DIO_u8PIN_LOW);
    329e:	ef 85       	ldd	r30, Y+15	; 0x0f
    32a0:	f8 89       	ldd	r31, Y+16	; 0x10
    32a2:	80 81       	ld	r24, Z
    32a4:	ef 85       	ldd	r30, Y+15	; 0x0f
    32a6:	f8 89       	ldd	r31, Y+16	; 0x10
    32a8:	91 81       	ldd	r25, Z+1	; 0x01
    32aa:	69 2f       	mov	r22, r25
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> PINK_PIN  ,DIO_u8PIN_LOW);
    32b2:	ef 85       	ldd	r30, Y+15	; 0x0f
    32b4:	f8 89       	ldd	r31, Y+16	; 0x10
    32b6:	80 81       	ld	r24, Z
    32b8:	ef 85       	ldd	r30, Y+15	; 0x0f
    32ba:	f8 89       	ldd	r31, Y+16	; 0x10
    32bc:	92 81       	ldd	r25, Z+2	; 0x02
    32be:	69 2f       	mov	r22, r25
    32c0:	40 e0       	ldi	r20, 0x00	; 0
    32c2:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> YELLOW_PIN,DIO_u8PIN_LOW);
    32c6:	ef 85       	ldd	r30, Y+15	; 0x0f
    32c8:	f8 89       	ldd	r31, Y+16	; 0x10
    32ca:	80 81       	ld	r24, Z
    32cc:	ef 85       	ldd	r30, Y+15	; 0x0f
    32ce:	f8 89       	ldd	r31, Y+16	; 0x10
    32d0:	93 81       	ldd	r25, Z+3	; 0x03
    32d2:	69 2f       	mov	r22, r25
    32d4:	40 e0       	ldi	r20, 0x00	; 0
    32d6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_stpStepper -> PORT,Copy_stpStepper -> ORANGE_PIN,DIO_u8PIN_LOW);
    32da:	ef 85       	ldd	r30, Y+15	; 0x0f
    32dc:	f8 89       	ldd	r31, Y+16	; 0x10
    32de:	80 81       	ld	r24, Z
    32e0:	ef 85       	ldd	r30, Y+15	; 0x0f
    32e2:	f8 89       	ldd	r31, Y+16	; 0x10
    32e4:	94 81       	ldd	r25, Z+4	; 0x04
    32e6:	69 2f       	mov	r22, r25
    32e8:	40 e0       	ldi	r20, 0x00	; 0
    32ea:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	a0 ea       	ldi	r26, 0xA0	; 160
    32f4:	b0 e4       	ldi	r27, 0x40	; 64
    32f6:	8b 87       	std	Y+11, r24	; 0x0b
    32f8:	9c 87       	std	Y+12, r25	; 0x0c
    32fa:	ad 87       	std	Y+13, r26	; 0x0d
    32fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3300:	7c 85       	ldd	r23, Y+12	; 0x0c
    3302:	8d 85       	ldd	r24, Y+13	; 0x0d
    3304:	9e 85       	ldd	r25, Y+14	; 0x0e
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	4a e7       	ldi	r20, 0x7A	; 122
    330c:	55 e4       	ldi	r21, 0x45	; 69
    330e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	8f 83       	std	Y+7, r24	; 0x07
    3318:	98 87       	std	Y+8, r25	; 0x08
    331a:	a9 87       	std	Y+9, r26	; 0x09
    331c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    331e:	6f 81       	ldd	r22, Y+7	; 0x07
    3320:	78 85       	ldd	r23, Y+8	; 0x08
    3322:	89 85       	ldd	r24, Y+9	; 0x09
    3324:	9a 85       	ldd	r25, Y+10	; 0x0a
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e8       	ldi	r20, 0x80	; 128
    332c:	5f e3       	ldi	r21, 0x3F	; 63
    332e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3332:	88 23       	and	r24, r24
    3334:	2c f4       	brge	.+10     	; 0x3340 <stepper_motor_stop+0xba>
		__ticks = 1;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	9e 83       	std	Y+6, r25	; 0x06
    333c:	8d 83       	std	Y+5, r24	; 0x05
    333e:	3f c0       	rjmp	.+126    	; 0x33be <stepper_motor_stop+0x138>
	else if (__tmp > 65535)
    3340:	6f 81       	ldd	r22, Y+7	; 0x07
    3342:	78 85       	ldd	r23, Y+8	; 0x08
    3344:	89 85       	ldd	r24, Y+9	; 0x09
    3346:	9a 85       	ldd	r25, Y+10	; 0x0a
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	3f ef       	ldi	r19, 0xFF	; 255
    334c:	4f e7       	ldi	r20, 0x7F	; 127
    334e:	57 e4       	ldi	r21, 0x47	; 71
    3350:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3354:	18 16       	cp	r1, r24
    3356:	4c f5       	brge	.+82     	; 0x33aa <stepper_motor_stop+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3358:	6b 85       	ldd	r22, Y+11	; 0x0b
    335a:	7c 85       	ldd	r23, Y+12	; 0x0c
    335c:	8d 85       	ldd	r24, Y+13	; 0x0d
    335e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e2       	ldi	r20, 0x20	; 32
    3366:	51 e4       	ldi	r21, 0x41	; 65
    3368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	bc 01       	movw	r22, r24
    3372:	cd 01       	movw	r24, r26
    3374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	8d 83       	std	Y+5, r24	; 0x05
    3380:	0f c0       	rjmp	.+30     	; 0x33a0 <stepper_motor_stop+0x11a>
    3382:	80 e9       	ldi	r24, 0x90	; 144
    3384:	91 e0       	ldi	r25, 0x01	; 1
    3386:	9c 83       	std	Y+4, r25	; 0x04
    3388:	8b 83       	std	Y+3, r24	; 0x03
    338a:	8b 81       	ldd	r24, Y+3	; 0x03
    338c:	9c 81       	ldd	r25, Y+4	; 0x04
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	f1 f7       	brne	.-4      	; 0x338e <stepper_motor_stop+0x108>
    3392:	9c 83       	std	Y+4, r25	; 0x04
    3394:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3396:	8d 81       	ldd	r24, Y+5	; 0x05
    3398:	9e 81       	ldd	r25, Y+6	; 0x06
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	9e 83       	std	Y+6, r25	; 0x06
    339e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a0:	8d 81       	ldd	r24, Y+5	; 0x05
    33a2:	9e 81       	ldd	r25, Y+6	; 0x06
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	69 f7       	brne	.-38     	; 0x3382 <stepper_motor_stop+0xfc>
    33a8:	14 c0       	rjmp	.+40     	; 0x33d2 <stepper_motor_stop+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33aa:	6f 81       	ldd	r22, Y+7	; 0x07
    33ac:	78 85       	ldd	r23, Y+8	; 0x08
    33ae:	89 85       	ldd	r24, Y+9	; 0x09
    33b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	9e 83       	std	Y+6, r25	; 0x06
    33bc:	8d 83       	std	Y+5, r24	; 0x05
    33be:	8d 81       	ldd	r24, Y+5	; 0x05
    33c0:	9e 81       	ldd	r25, Y+6	; 0x06
    33c2:	9a 83       	std	Y+2, r25	; 0x02
    33c4:	89 83       	std	Y+1, r24	; 0x01
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <stepper_motor_stop+0x144>
    33ce:	9a 83       	std	Y+2, r25	; 0x02
    33d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);



}
    33d2:	60 96       	adiw	r28, 0x10	; 16
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	cf 91       	pop	r28
    33e0:	df 91       	pop	r29
    33e2:	08 95       	ret

000033e4 <main>:
#include "EXTI_interface.h"
void INT0_Func(void);
void INT1_Func(void);

void main(void)
{
    33e4:	df 93       	push	r29
    33e6:	cf 93       	push	r28
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62



	PORT_voidInit(); //D2,D3 INPUT EXTI buttons C0 output for LED
    33ec:	0e 94 78 11 	call	0x22f0	; 0x22f0 <PORT_voidInit>

	EXTI_voidInit();
    33f0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <EXTI_voidInit>
	EXTI_u8SetCallBack(INT0,&INT0_Func);
    33f4:	29 e0       	ldi	r18, 0x09	; 9
    33f6:	3a e1       	ldi	r19, 0x1A	; 26
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	b9 01       	movw	r22, r18
    33fc:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <EXTI_u8SetCallBack>
	EXTI_u8SetCallBack(INT1,&INT1_Func);
    3400:	25 e1       	ldi	r18, 0x15	; 21
    3402:	3a e1       	ldi	r19, 0x1A	; 26
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	b9 01       	movw	r22, r18
    3408:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <EXTI_u8SetCallBack>
	GIE_voidEnableGlobal();
    340c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <GIE_voidEnableGlobal>
    3410:	ff cf       	rjmp	.-2      	; 0x3410 <main+0x2c>

00003412 <INT0_Func>:
	while(1); // IF while dose not main will decode & exceut in places dose not need
}

void INT0_Func(void)
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_HIGH);
    341a:	82 e0       	ldi	r24, 0x02	; 2
    341c:	60 e0       	ldi	r22, 0x00	; 0
    341e:	41 e0       	ldi	r20, 0x01	; 1
    3420:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>

}
    3424:	cf 91       	pop	r28
    3426:	df 91       	pop	r29
    3428:	08 95       	ret

0000342a <INT1_Func>:
void INT1_Func(void)
{
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_LOW);
    3432:	82 e0       	ldi	r24, 0x02	; 2
    3434:	60 e0       	ldi	r22, 0x00	; 0
    3436:	40 e0       	ldi	r20, 0x00	; 0
    3438:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinValue>

}
    343c:	cf 91       	pop	r28
    343e:	df 91       	pop	r29
    3440:	08 95       	ret

00003442 <__udivmodsi4>:
    3442:	a1 e2       	ldi	r26, 0x21	; 33
    3444:	1a 2e       	mov	r1, r26
    3446:	aa 1b       	sub	r26, r26
    3448:	bb 1b       	sub	r27, r27
    344a:	fd 01       	movw	r30, r26
    344c:	0d c0       	rjmp	.+26     	; 0x3468 <__udivmodsi4_ep>

0000344e <__udivmodsi4_loop>:
    344e:	aa 1f       	adc	r26, r26
    3450:	bb 1f       	adc	r27, r27
    3452:	ee 1f       	adc	r30, r30
    3454:	ff 1f       	adc	r31, r31
    3456:	a2 17       	cp	r26, r18
    3458:	b3 07       	cpc	r27, r19
    345a:	e4 07       	cpc	r30, r20
    345c:	f5 07       	cpc	r31, r21
    345e:	20 f0       	brcs	.+8      	; 0x3468 <__udivmodsi4_ep>
    3460:	a2 1b       	sub	r26, r18
    3462:	b3 0b       	sbc	r27, r19
    3464:	e4 0b       	sbc	r30, r20
    3466:	f5 0b       	sbc	r31, r21

00003468 <__udivmodsi4_ep>:
    3468:	66 1f       	adc	r22, r22
    346a:	77 1f       	adc	r23, r23
    346c:	88 1f       	adc	r24, r24
    346e:	99 1f       	adc	r25, r25
    3470:	1a 94       	dec	r1
    3472:	69 f7       	brne	.-38     	; 0x344e <__udivmodsi4_loop>
    3474:	60 95       	com	r22
    3476:	70 95       	com	r23
    3478:	80 95       	com	r24
    347a:	90 95       	com	r25
    347c:	9b 01       	movw	r18, r22
    347e:	ac 01       	movw	r20, r24
    3480:	bd 01       	movw	r22, r26
    3482:	cf 01       	movw	r24, r30
    3484:	08 95       	ret

00003486 <__divmodsi4>:
    3486:	97 fb       	bst	r25, 7
    3488:	09 2e       	mov	r0, r25
    348a:	05 26       	eor	r0, r21
    348c:	0e d0       	rcall	.+28     	; 0x34aa <__divmodsi4_neg1>
    348e:	57 fd       	sbrc	r21, 7
    3490:	04 d0       	rcall	.+8      	; 0x349a <__divmodsi4_neg2>
    3492:	d7 df       	rcall	.-82     	; 0x3442 <__udivmodsi4>
    3494:	0a d0       	rcall	.+20     	; 0x34aa <__divmodsi4_neg1>
    3496:	00 1c       	adc	r0, r0
    3498:	38 f4       	brcc	.+14     	; 0x34a8 <__divmodsi4_exit>

0000349a <__divmodsi4_neg2>:
    349a:	50 95       	com	r21
    349c:	40 95       	com	r20
    349e:	30 95       	com	r19
    34a0:	21 95       	neg	r18
    34a2:	3f 4f       	sbci	r19, 0xFF	; 255
    34a4:	4f 4f       	sbci	r20, 0xFF	; 255
    34a6:	5f 4f       	sbci	r21, 0xFF	; 255

000034a8 <__divmodsi4_exit>:
    34a8:	08 95       	ret

000034aa <__divmodsi4_neg1>:
    34aa:	f6 f7       	brtc	.-4      	; 0x34a8 <__divmodsi4_exit>
    34ac:	90 95       	com	r25
    34ae:	80 95       	com	r24
    34b0:	70 95       	com	r23
    34b2:	61 95       	neg	r22
    34b4:	7f 4f       	sbci	r23, 0xFF	; 255
    34b6:	8f 4f       	sbci	r24, 0xFF	; 255
    34b8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ba:	08 95       	ret

000034bc <__prologue_saves__>:
    34bc:	2f 92       	push	r2
    34be:	3f 92       	push	r3
    34c0:	4f 92       	push	r4
    34c2:	5f 92       	push	r5
    34c4:	6f 92       	push	r6
    34c6:	7f 92       	push	r7
    34c8:	8f 92       	push	r8
    34ca:	9f 92       	push	r9
    34cc:	af 92       	push	r10
    34ce:	bf 92       	push	r11
    34d0:	cf 92       	push	r12
    34d2:	df 92       	push	r13
    34d4:	ef 92       	push	r14
    34d6:	ff 92       	push	r15
    34d8:	0f 93       	push	r16
    34da:	1f 93       	push	r17
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
    34e0:	cd b7       	in	r28, 0x3d	; 61
    34e2:	de b7       	in	r29, 0x3e	; 62
    34e4:	ca 1b       	sub	r28, r26
    34e6:	db 0b       	sbc	r29, r27
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	09 94       	ijmp

000034f4 <__epilogue_restores__>:
    34f4:	2a 88       	ldd	r2, Y+18	; 0x12
    34f6:	39 88       	ldd	r3, Y+17	; 0x11
    34f8:	48 88       	ldd	r4, Y+16	; 0x10
    34fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    34fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    34fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    3500:	8c 84       	ldd	r8, Y+12	; 0x0c
    3502:	9b 84       	ldd	r9, Y+11	; 0x0b
    3504:	aa 84       	ldd	r10, Y+10	; 0x0a
    3506:	b9 84       	ldd	r11, Y+9	; 0x09
    3508:	c8 84       	ldd	r12, Y+8	; 0x08
    350a:	df 80       	ldd	r13, Y+7	; 0x07
    350c:	ee 80       	ldd	r14, Y+6	; 0x06
    350e:	fd 80       	ldd	r15, Y+5	; 0x05
    3510:	0c 81       	ldd	r16, Y+4	; 0x04
    3512:	1b 81       	ldd	r17, Y+3	; 0x03
    3514:	aa 81       	ldd	r26, Y+2	; 0x02
    3516:	b9 81       	ldd	r27, Y+1	; 0x01
    3518:	ce 0f       	add	r28, r30
    351a:	d1 1d       	adc	r29, r1
    351c:	0f b6       	in	r0, 0x3f	; 63
    351e:	f8 94       	cli
    3520:	de bf       	out	0x3e, r29	; 62
    3522:	0f be       	out	0x3f, r0	; 63
    3524:	cd bf       	out	0x3d, r28	; 61
    3526:	ed 01       	movw	r28, r26
    3528:	08 95       	ret

0000352a <_exit>:
    352a:	f8 94       	cli

0000352c <__stop_program>:
    352c:	ff cf       	rjmp	.-2      	; 0x352c <__stop_program>
